(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{690:function(a,s,t){"use strict";t.r(s);var e=t(14),v=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"_2、koa2源码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、koa2源码"}},[a._v("#")]),a._v(" 2、Koa2源码")]),a._v(" "),t("h2",{attrs:{id:"课程目标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课程目标"}},[a._v("#")]),a._v(" 课程目标")]),a._v(" "),t("ol",[t("li",[a._v("手写koa")]),a._v(" "),t("li",[a._v("手写static中间件")])]),a._v(" "),t("h3",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),t("p",[a._v("概述：Koa 是一个新的 web 框架，致力于成为 web 应用和 API 开发领域中的一个更小、更富有 表现力、更健壮的基石。\nkoa是Express的下一代基于Node.js的web框架 koa2完全使用Promise并配合 async 来实现异步。")]),a._v(" "),t("ul",[t("li",[a._v("Express下一代web框架")]),a._v(" "),t("li",[a._v("v1：ES6 generator")]),a._v(" "),t("li",[a._v("v2：ES7 async/await")])]),a._v(" "),t("h3",{attrs:{id:"特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[a._v("#")]),a._v(" 特点")]),a._v(" "),t("ul",[t("li",[a._v("🚀优雅的API设计（ctx.body直接赋值返回，可自动识别json等数据格式，增加到响应头中）")]),a._v(" "),t("li",[a._v("🚀中间件机制（洋葱圈模型）")]),a._v(" "),t("li",[a._v("增强的错误处理")]),a._v(" "),t("li",[a._v("轻量，无捆绑")])]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("原生http的不足是什么？")]),a._v(" "),t("ol",[t("li",[a._v("令人困惑的request和response，即api不够优雅\n"),t("ul",[t("li",[a._v("res.end，res.writeHead等api设计很晦涩，res.end要求对流的概念有好的认识，而writeHead也不够直接。")])])]),a._v(" "),t("li",[a._v("无法描述复杂业务逻辑\n"),t("ul",[t("li",[a._v("特别是对于切面编程表述AOP来说，不够顺畅")]),a._v(" "),t("li",[a._v("比如"),t("code",[a._v("生命周期函数，路由守卫，都是为了满足AOP的编程需要")])])])])]),a._v(" "),t("p",[t("strong",[a._v("因此，Koa2提供的「优雅的API设计」，「中间件机制」就分别解决了上述两个问题。")])])]),a._v(" "),t("p",[a._v("::: tips Ioc 与 AOP 概念\n来源于Spring的概念，Spring的核心是"),t("code",[a._v("控制反转（IoC")]),a._v(", Inversion of Control ）和"),t("code",[a._v("面向切面编程（AOP")]),a._v(", Aspect Oriented Programming）。\n:::")]),a._v(" "),t("h3",{attrs:{id:"中间件机制-洋葱圈模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中间件机制-洋葱圈模型"}},[a._v("#")]),a._v(" 中间件机制（洋葱圈模型）")]),a._v(" "),t("p",[a._v("Koa中间件机制：Koa中间件机制就是函数式 组合概念 Compose的概念，将一组需要顺序执行的 函数复合为一个函数，外层函数的参数实际是内层函数的返回值。洋葱圈模型可以形象表示这种机制，是源码中的精髓和难点。")]),a._v(" "),t("p",[a._v("use就是策略模式，而next是责任链模式")]),a._v(" "),t("h2",{attrs:{id:"比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#比较"}},[a._v("#")]),a._v(" 比较")]),a._v(" "),t("p",[a._v("在koa中，一切的流程都是中间件，数据流向遵循洋葱模型，先入后出，是按照类似堆栈的方式组织和执行的，koa-compose是理解koa中间件的关键，在koa中间件中会深入分析。")]),a._v(" "),t("p",[a._v("koa2与koa1的最大区别是koa2实现异步是通过async/await，koa1实现异步是通过generator/yield，而express实现异步是通过回调函数的方式。")]),a._v(" "),t("p",[a._v("koa2与express 提供的API大致相同，express是大而全，内置了大多数的中间件，更让人省心，koa2不绑定任何的框架，干净简洁，小而精，更容易实现定制化，扩展性好。")]),a._v(" "),t("p",[a._v("express是没有提供ctx来提供上下流服务，需要更多的手动处理，express本身是不支持洋葱模型的数据流入流出能力的，需要引入其他的插件。")]),a._v(" "),t("p",[a._v("koa的数据流入流出，next()后，会进入下一个中间件并执行，然后从最后一个中间件反向执行。")])])}),[],!1,null,null,null);s.default=v.exports}}]);