(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{490:function(t,s,a){t.exports=a.p+"assets/img/stack1.b212784d.png"},491:function(t,s,a){t.exports=a.p+"assets/img/stack2.d8533d5d.png"},492:function(t,s,a){t.exports=a.p+"assets/img/heap.305cd00f.png"},493:function(t,s,a){t.exports=a.p+"assets/img/copy-basic-type.1f87cb2c.png"},494:function(t,s,a){t.exports=a.p+"assets/img/copy-reference-type.9097f9a3.png"},495:function(t,s,a){t.exports=a.p+"assets/img/Comparison-of-types.79e6de46.png"},801:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("blockquote",[n("p",[t._v("本文是在 ConardLi的“"),n("a",{attrs:{href:"https://juejin.im/post/5cec1bcff265da1b8f1aa08f",target:"_blank",rel:"noopener noreferrer"}},[t._v("【JS 进阶】你真的掌握变量和类型了吗"),n("OutboundLink")],1),t._v("”文章上的总结和扩展，集中记述了js中的变量和数据类型的相关知识点及应用场景，共分为5部分。")])]),t._v(" "),n("blockquote",[n("p",[t._v("本文为“JS专题-变量与类型”的第一篇，1）JS数据类型，主要关注JS中变量在内存中的具体存储形式。")])]),t._v(" "),n("h1",{attrs:{id:"javascript数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript数据类型"}},[t._v("#")]),t._v(" JavaScript数据类型")]),t._v(" "),n("h2",{attrs:{id:"数据类型分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据类型分类"}},[t._v("#")]),t._v(" 数据类型分类")]),t._v(" "),n("p",[n("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/9.0/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript标准"),n("OutboundLink")],1),t._v("规定了"),n("code",[t._v("7")]),t._v("种数据类型，其把这"),n("code",[t._v("7")]),t._v("种数据类型又分为两种：原始类型 和 对象类型。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("原始类型")]),t._v(" "),n("ul",[n("li",[t._v("Null：只包含一个值：null")]),t._v(" "),n("li",[t._v("Undefined：只包含一个值：undefined")]),t._v(" "),n("li",[t._v("Boolean：包含两个值：true和false")]),t._v(" "),n("li",[t._v("Number：整数或浮点数，还有一些特殊值（-Infinity、+Infinity、NaN）")]),t._v(" "),n("li",[t._v("String：一串表示文本值的字符序列")]),t._v(" "),n("li",[t._v("Symbol：一种实例是唯一且不可改变的数据类型\n(在es10中加入了第七种原始类型BigInt，现已被最新Chrome支持)")])])]),t._v(" "),n("li",[n("p",[t._v("对象类型（引用类型）")]),t._v(" "),n("ul",[n("li",[t._v("Object：除了常用的Object，Array、Date、RegExp、Function等都属于特殊的对象")])])])]),t._v(" "),n("h2",{attrs:{id:"为什么区分原始类型和对象类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么区分原始类型和对象类型"}},[t._v("#")]),t._v(" 为什么区分原始类型和对象类型")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("首先搞明白原始类型的特性 —— "),n("code",[t._v("不可变性")])]),t._v(" "),n("p",[t._v("在ES标准中，原始类型被定义为"),n("code",[t._v("primitive values")]),t._v("，即原始值，代表值本身是不可被改变的。\n以字符串为例：在调用操作字符串的方法时，没有任何方法是可以直接改变字符串的。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ConardLi'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("substr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ConardLi")]),t._v("\n")])])]),n("p",[t._v("这些方法都在原字符串的基础上产生了一个新字符串，而非直接去改变str，这就印证了字符串的不可变性。")])]),t._v(" "),n("li",[n("p",[t._v("内存空间 —— "),n("code",[t._v("栈内存")]),t._v("与"),n("code",[t._v("堆内存")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ConardLi'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'6'")]),t._v("\n\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ConardLi6")]),t._v("\n")])])]),n("blockquote",[n("p",[t._v("上面的str值改变了，这违背了原始值的不可变性吗？\n并没有! 这在内存原理上是有根据的，在js中，变量在内存中需要空间来存储，"),n("code",[t._v("内存空间被分为两种，栈内存与堆内存")]),t._v("。")])]),t._v(" "),n("p",[t._v("2.1 栈内存（原始类型）")]),t._v(" "),n("ul",[n("li",[t._v("存储的值大小固定")]),t._v(" "),n("li",[t._v("空间较小")]),t._v(" "),n("li",[t._v("可以直接操作其保存的变量，运行效率高")]),t._v(" "),n("li",[t._v("由系统自动分配存储空间")])]),t._v(" "),n("p",[t._v("js中的原始类型的值被直接存储在栈中，在变量定义时，栈就为其分配好了内存空间。由于栈中的内存空间的大小是固定的，那么注定了存储在栈中的变量就是不可变的。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(490),alt:"栈示例"}})]),t._v(" "),n("p",[t._v("执行 "),n("code",[t._v("str += '6'")]),t._v("的操作，实际上是在栈中"),n("code",[t._v("又开辟了一块内存空间")]),t._v("用于存储'ConardLi6'，然后将变量str指向这块空间，所以这"),n("code",[t._v("并不违背不可变性")]),t._v("的特点。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(491),alt:"栈示例2"}})]),t._v(" "),n("p",[t._v("2.2 堆内存（引用类型）")]),t._v(" "),n("ul",[n("li",[t._v("存储的值大小不定，可动态调整")]),t._v(" "),n("li",[t._v("空间较大，运行效率低")]),t._v(" "),n("li",[t._v("无法直接操作其内部存储，使用引用地址读取")]),t._v(" "),n("li",[t._v("通过代码进行分配空间和释放")]),t._v(" "),n("li",[t._v("如果程序员没有主动通过代码释放，则由操作系统自动回收")])]),t._v(" "),n("p",[t._v("习惯于把对象称为引用类型，引用类型的"),n("code",[t._v("值实际存储在堆内存")]),t._v("中，它在"),n("code",[t._v("栈中只存储了一个固定长度的地址")]),t._v("，这个地址指向堆内存中的值。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ConardLi"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("age"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("obj3")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(492),alt:"堆示例"}})]),t._v(" "),n("p",[t._v("当然，引用类型就不再具有不可变性了，可以轻易改变它。")]),t._v(" "),n("p",[t._v("以数组为例，它的很多方法都是"),n("code",[t._v("变异方法")]),t._v("，都可以改变它自身。")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("pop()")]),t._v(" 删除数组最后一个元素，如果数组为空，则不改变数组，返回undefined，改变原数组，返回被删除的元素")]),t._v(" "),n("li",[n("code",[t._v("push()")]),t._v(" 向数组末尾添加一个或多个元素，改变原数组，返回新数组的长度")]),t._v(" "),n("li",[n("code",[t._v("shift()")]),t._v(" 把数组的第一个元素删除，若空数组，不进行任何操作，返回undefined,改变原数组，返回第一个元素的值")]),t._v(" "),n("li",[n("code",[t._v("unshift()")]),t._v(" 向数组的开头添加一个或多个元素，改变原数组，返回新数组的长度")]),t._v(" "),n("li",[n("code",[t._v("reverse()")]),t._v(" 颠倒数组中元素的顺序，改变原数组，返回该数组")]),t._v(" "),n("li",[n("code",[t._v("sort()")]),t._v(" 对数组元素进行排序，改变原数组，返回该数组")]),t._v(" "),n("li",[n("code",[t._v("splice()")]),t._v(" 从数组中添加/删除项目，改变原数组，返回被删除的元素")])])])]),t._v(" "),n("h2",{attrs:{id:"比较原始类型与引用类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#比较原始类型与引用类型"}},[t._v("#")]),t._v(" "),n("code",[t._v("比较")]),t._v("原始类型与引用类型")]),t._v(" "),n("p",[t._v("复制、比较、值传递和引用传递")]),t._v(" "),n("h3",{attrs:{id:"复制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#复制"}},[t._v("#")]),t._v(" 复制")]),t._v(" "),n("p",[t._v("关于复制，原始类型和引用类型的表现是不一样的：")]),t._v(" "),n("ul",[n("li",[t._v("原始类型的复制")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ConardLi'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nname2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'code秘密花园'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ConardLi;")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(493),alt:"原始类型复制"}}),t._v("\n内存中有一个变量name，值为ConardLi。我们从变量name复制出一个变量name2，此时在内存中"),n("code",[t._v("创建了一个块新的空间")]),t._v("用于存储ConardLi，虽然两者值是相同的，但是"),n("code",[t._v("两者指向的内存空间完全不同")]),t._v("，这两个变量参与任何操作都互不影响。")]),t._v(" "),n("ul",[n("li",[t._v("引用类型的复制")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ConardLi'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'code秘密花园'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// code秘密花园")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(494),alt:"引用类型复制"}}),t._v("\n当我们复制引用类型的变量时，"),n("code",[t._v("实际上复制的是栈中存储的地址")]),t._v("，所以复制出来的obj2实际上和obj"),n("code",[t._v("指向的堆中同一个对象")]),t._v("。因此，我们改变其中任何一个变量的值，另一个变量都会受到影响，"),n("code",[t._v("这就是为什么会有深拷贝和浅拷贝")]),t._v("的原因。")]),t._v(" "),n("h3",{attrs:{id:"比较"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#比较"}},[t._v("#")]),t._v(" 比较")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("对于原始类型，比较时会直接比较它们的值")]),t._v("，如果值相等，即返回true。")]),t._v(" "),n("li",[n("code",[t._v("对于引用类型，比较时会比较它们的引用地址")]),t._v("，虽然两个变量在堆中存储的对象具有的属性值都是相等的，但是它们被存储在了不同的存储空间，因此比较值为false。")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(495),alt:"类型比较"}})]),t._v(" "),n("h3",{attrs:{id:"值传递和引用传递"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#值传递和引用传递"}},[t._v("#")]),t._v(" 值传递和引用传递")]),t._v(" "),n("ul",[n("li",[t._v("参数是原始类型")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ConardLi'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeValue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'code秘密花园'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeValue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'ConardLi'")]),t._v("\n")])])]),n("p",[t._v("是"),n("code",[t._v("值传递")]),t._v("：函数参数仅仅是被传入变量复制给了的一个局部变量，改变这个局部变量不会对外部变量产生影响。")]),t._v(" "),n("ul",[n("li",[t._v("参数是引用类型")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeValue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ConardLi'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'code秘密花园'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeValue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ConardLi")]),t._v("\n")])])]),n("p",[t._v("同样的，当函数参数是引用类型时，我们同样将参数复制了一个副本到局部变量，只不过复制的这个副本是指向堆内存中的地址而已，我们在函数内部对对象的属性进行操作，实际上和外部变量指向堆内存中的值相同，但是这并不代表着引用传递，依然是"),n("code",[t._v("值传递")])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("明确一点，ECMAScript中所有的函数的参数都是"),n("strong",[t._v("按值传递")]),t._v("的。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);