(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{406:function(e,v,t){e.exports=t.p+"assets/img/service-discovery.ae03ed6e.png"},551:function(e,v,t){e.exports=t.p+"assets/img/consul.a01148f4.png"},552:function(e,v,t){e.exports=t.p+"assets/img/consul2.3d6e9ece.png"},864:function(e,v,t){"use strict";t.r(v);var _=t(14),r=Object(_.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"service-discovery-服务发现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#service-discovery-服务发现"}},[e._v("#")]),e._v(" Service Discovery 服务发现")]),e._v(" "),_("p",[e._v("「服务发现」就是通过"),_("code",[e._v("服务唯一标识")]),e._v("来"),_("strong",[e._v("获取服务地址")]),e._v("的过程。")]),e._v(" "),_("h2",{attrs:{id:"为什么需要服务发现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要服务发现"}},[e._v("#")]),e._v(" 为什么需要服务发现")]),e._v(" "),_("p",[e._v("正常情况下当我们要访问服务时需要知道服务实例地址和端口，如果服务实例地址和端口都是固定的我们可以直接将其配置在文件中使用。")]),e._v(" "),_("p",[e._v("但大多数线上生产环境，尤其容器部署情况下服务实例地址都是动态分配的，只有当服务实例实际部署之后才能获得地址，服务调用者根本无法提前获取服务实例地址和端口，只能在运行时通过服务发现组件解析服务名来获取服务实例地址和端口。")]),e._v(" "),_("h2",{attrs:{id:"什么是服务发现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是服务发现"}},[e._v("#")]),e._v(" 什么是服务发现")]),e._v(" "),_("p",[e._v("简单讲就是，"),_("code",[e._v("通过服务名找到提供服务的实例地址和端口")]),e._v("，主要用于解决如何获取服务实例地址问题。")]),e._v(" "),_("p",[e._v("近年来随着容器技术的兴起，大量服务分散在系统各处，服务彼此之间调用都需要通过服务发现来实现。服务发现是"),_("code",[e._v("分布式系统")]),e._v("中不可或缺的关键组件。")]),e._v(" "),_("h2",{attrs:{id:"服务发现的分类-以负载方式区分"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务发现的分类-以负载方式区分"}},[e._v("#")]),e._v(" 服务发现的分类（以负载方式区分）")]),e._v(" "),_("h3",{attrs:{id:"硬负载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#硬负载"}},[e._v("#")]),e._v(" 硬负载")]),e._v(" "),_("p",[e._v("依靠硬件设备做负载，在调用链路上加一个独立部署的硬件设备（一般就是我们所熟知的 F5/LVS/HAproxy 集群），通过它们对后端的服务进行发现，对流量进行"),_("code",[e._v("负载均衡（Load Balancer）")]),e._v("。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("                                                +------------+\n+----------+  invoke   +---------------+        |  Services  |-+\n| Consumer | --------\x3e | Load Balancer | -----\x3e |  Providers | |-+\n+----------+           +---------------+        +------------+ | |\n                                                 |-------------+ |\n                                                   +-------------+\n")])])]),_("ul",[_("li",[e._v("优点：存在一个统一的流量集中化节点，可以实现一些全局性的掌控，比如路由、鉴权、安全防控等等。")]),e._v(" "),_("li",[e._v("缺点：\n"),_("ul",[_("li",[e._v("硬负载设备的成本高，不易维护；")]),e._v(" "),_("li",[e._v("在调用主链路上有一定性能损耗；")]),e._v(" "),_("li",[e._v("硬负载设备需要实现集群化部署的模式以解决单点故障的问题。")])])])]),e._v(" "),_("h3",{attrs:{id:"软负载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#软负载"}},[e._v("#")]),e._v(" 软负载")]),e._v(" "),_("p",[e._v("依靠软件方式进行服务发现和负载均衡：")]),e._v(" "),_("ul",[_("li",[e._v("没有了中心化的硬负载设备，把 "),_("code",[e._v("负载均衡（Load Balancer）")]),e._v(" 的功能以 SDK 的模式集成到服务消费方的进程里；")]),e._v(" "),_("li",[e._v("引入了注册中心（Service Registry），用来动态管理所有的服务地址；")]),e._v(" "),_("li",[e._v("注册中心不在调用的主链路上，它在旁路。")])]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("                  +------------------+\n                  | Service Registry |\n                  +------------------+\n                   /                ^\n                  /                  \\\n           Discover          Register & Keep Alive\n             /                               \\\n            /                                 \\\n           v                                   \\\n  +----------+                                +----------+\n  | Consumer | ---- Load Balance & Invoke --\x3e | Provider |\n  +----------+                                +----------+\n")])])]),_("ul",[_("li",[e._v("优点：\n"),_("ul",[_("li",[e._v("Consumer 直接调用 Provider，不再有中间节点；")]),e._v(" "),_("li",[e._v("不需独立的负载均衡设备，也就不存在成本和运维的问题；")])])]),e._v(" "),_("li",[e._v("缺点：\n"),_("ul",[_("li",[e._v("对 Consumer 端有侵入性，存在接入成本；")]),e._v(" "),_("li",[e._v("去中心化，所以弱管控；")]),e._v(" "),_("li",[e._v("虽然注册中心在旁路，但也是一个关键的基础设施，需要确保高可用；")])])])]),e._v(" "),_("h2",{attrs:{id:"常见服务发现解决方案-服务发现组件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常见服务发现解决方案-服务发现组件"}},[e._v("#")]),e._v(" 常见服务发现解决方案（服务发现组件）")]),e._v(" "),_("ul",[_("li",[e._v("硬负载\n"),_("ul",[_("li",[e._v("阿里云的 SLB")]),e._v(" "),_("li",[e._v("AWS 的 ELB")])])]),e._v(" "),_("li",[e._v("软负载\n"),_("ul",[_("li",[e._v("Eureka")]),e._v(" "),_("li",[e._v("Zookeeper、Etcd、Consul")]),e._v(" "),_("li",[e._v("阿里和蚂蚁的 ConfigServer")])])])]),e._v(" "),_("p",[_("strong",[e._v("在 RPC 里我们通常采用"),_("code",[e._v("软负载")]),e._v("来做服务发现")]),e._v("。常用于构建服务发现解决方案的开源框架如 Zookeeper、Etcd、Consul。")]),e._v(" "),_("h2",{attrs:{id:"服务发现的架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务发现的架构"}},[e._v("#")]),e._v(" 服务发现的架构")]),e._v(" "),_("p",[_("img",{attrs:{src:t(406),alt:"服务发现"}})]),e._v(" "),_("p",[e._v("标准的服务发现架构主要有三部分组成：")]),e._v(" "),_("ul",[_("li",[e._v("服务注册中心 ( Service Registry )：管理所有注册信息的，后面简称 Registry")]),e._v(" "),_("li",[e._v("服务提供者 ( Service Provider )：提供服务给别人调用的，后面简称 Provider")]),e._v(" "),_("li",[e._v("服务调用者 ( Service Requestor )：调用别人的服务的，后面简称 Requestor")])]),e._v(" "),_("p",[e._v("主要有通用的四种调用方式：")]),e._v(" "),_("ul",[_("li",[e._v("服务注册：注册 Provider 信息，如绑定域名")]),e._v(" "),_("li",[e._v("服务订阅：监听 Provider 变更")]),e._v(" "),_("li",[e._v("变更通知：通知 Requestor，Provider 发生变更")]),e._v(" "),_("li",[e._v("服务调用：调用 Provider，如 http 请求")])]),e._v(" "),_("h3",{attrs:{id:"服务注册中心"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务注册中心"}},[e._v("#")]),e._v(" 服务注册中心")]),e._v(" "),_("p",[_("code",[e._v("服务注册中心（Service Registry）")]),e._v("是服务发现的核心组件，本质是一个"),_("strong",[e._v("服务名和服务实例地址映射集合")]),e._v("，主要提供基本的"),_("code",[e._v("（1）服务名解析功能")]),e._v("。除此之外还提供如下能力：")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("（2）容错（Fault Tolerance）")]),e._v("：服务注册中心保存了分布式系统中所有服务名与服务实例地址映射，一旦故障必将导致整个系统不可用，是整个分布式系统核心，必须具备高可用性；")]),e._v(" "),_("li",[_("code",[e._v("（3）健康检查（Health Check）")]),e._v("：服务注册中心必须要能及时发现故障实例并将其注销以防止被错误访问；\n"),_("ul",[_("li",[e._v("方式一般分两种")])])]),e._v(" "),_("li",[_("code",[e._v("（4）监视器（Watcher）")]),e._v("：服务注册中心必须具备及时通知服务调用者服务实例注册或注销的能力，以便服务调用者及时采取措施。")])]),e._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[e._v("「健康检查」的实现")]),e._v(" "),_("p",[e._v("服务注册中心不同于一般的动态配置系统，因为服务是有状态的（至少包含可用和不可用两种状态）。在服务发布成功以后，还需要持续通过健康检查来确保服务是可用的。")]),e._v(" "),_("p",[_("code",[e._v("1、通过心跳")]),e._v("\n服务提供方和注册中心通过定时发送心跳包来维护一个长连接，只要长连接不断，就代表服务可用。")]),e._v(" "),_("ul",[_("li",[e._v("优点")]),e._v(" "),_("li",[e._v("对业务透明，实现也比较简单\n"),_("ul",[_("li",[e._v("可以确保至少网络连接是通的")])])]),e._v(" "),_("li",[e._v("缺点\n"),_("ul",[_("li",[e._v("粒度较粗，无法检查实际业务是否健康")]),e._v(" "),_("li",[e._v("对于注册中心来说需要维护大量长连接")])])])]),e._v(" "),_("p",[e._v("Zookeeper, 阿里的 ConfigServer 都采用这种方式来做健康检查")]),e._v(" "),_("p",[_("code",[e._v("2、暴露接口用于定时检查")]),e._v("\n服务提供方单独暴露一个接口给注册中心来轮训，根据接口的返回状态来判断服务是否可用")]),e._v(" "),_("ul",[_("li",[e._v("优点\n"),_("ul",[_("li",[e._v("业务可以自定健康标准，做更精确的健康检查")]),e._v(" "),_("li",[e._v("不用维护长连接")])])]),e._v(" "),_("li",[e._v("缺点\n"),_("ul",[_("li",[e._v("对业务有一定侵入")])])])]),e._v(" "),_("p",[e._v("K8s 里的 Health Checks 就是这种方式")])]),e._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[e._v("「注册」或「注销」服务实例")]),e._v(" "),_("p",[e._v("「注册」或「注销」服务实例一般有两种选择：")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("Self-Registration 模式")]),e._v("：服务实例自己注册，在服务实例启动成功后主动将自己注册到服务注册中心，这种方法好处是架构简单但需要为服务用到的每种编程语言实现注册代码；")]),e._v(" "),_("li",[_("code",[e._v("Third-party Registration 模式")]),e._v("：通过其他组件来注册服务实例，例如使用一个独立 Agent 通过轮询或监听事件去跟踪运行的服务实例变化进行注册或注销，好处是服务实例与服务注册中心解耦但引入第三方组件增加了架构复杂性。")])])]),e._v(" "),_("h2",{attrs:{id:"常用解决方案-consul"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常用解决方案-consul"}},[e._v("#")]),e._v(" 常用解决方案 Consul")]),e._v(" "),_("p",[_("img",{attrs:{src:t(551),alt:"Consul"}})]),e._v(" "),_("p",[e._v("Consul 是一个成熟的服务发现解决方案。其核心是一个"),_("strong",[e._v("基于 "),_("code",[e._v("Raft 共识算法")]),e._v("具备"),_("code",[e._v("线性强一致性")]),e._v("的 "),_("code",[e._v("Key-Value 存储系统")]),_("strong",[e._v("作为")]),e._v("服务注册中心")]),e._v("。")]),e._v(" "),_("p",[_("img",{attrs:{src:t(552),alt:"Consul官方图"}})]),e._v(" "),_("p",[_("strong",[e._v("架构上 Consul 包括：")])]),e._v(" "),_("ol",[_("li",[_("p",[_("code",[e._v("Agent")]),e._v("：提供"),_("strong",[e._v("代理（Agent）机制")]),e._v("，一方面用于协调服务注册，一方面提供服务健康检查。代理（Agent）会在每个运行服务的节点（Node）上启动，所以就分 Client 模式与 Server 模式，每个 agent 维护一套服务和注册发现以及健康信息。")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("Server")]),e._v("：agent 以 server 模式启动的节点。一个数据中心中至少包含 1 个 server 节点。不过官方建议使用 3 或 5 个 server 节点组建成集群，以保证高可用且不失效率。server 节点参与 Raft、维护会员信息、注册服务、健康检查等功能。")]),e._v(" "),_("ul",[_("li",[e._v("服务注册信息保存在 Server 上，通过 Raft 共识算法保证多个 Server 间数据线性强一致，保证服务注册中心高可用；")]),e._v(" "),_("li",[e._v("将所有 Agent 作为集群节点，使用 "),_("code",[e._v("Gossip 协议")]),e._v("进行"),_("code",[e._v("组关系管理和故障探测")]),e._v("，当有 Agent 加入（启动）或离开（故障）集群时其他 Agent 会得到通知，实现服务健康检查和监视功能。\n"),_("blockquote",[_("p",[e._v("Gossip 是一种基于绯闻、流行病传播方式的进程间信息交换的协议。常用于集群组关系管理和故障检测。Gossip 利用一种随机的方式把信息传播到整个网络中，并在一定时间内使得系统内的所有节点数据一致。Gossip 其实是一种去中心化思路的分布式协议，解决状态在集群中的传播和状态一致性。Gossip 具有可扩展性、容错、健壮性、最终一致性方面的优势。")]),e._v(" "),_("blockquote",[_("p",[e._v("Gossip 在 consul 中的应用：\nConsul 使用 gossip 协议构建了 LAN 和 WAN pool 进行集群管理和信息传递。Consul 中的具体实现是依赖 serf 库。")])])])])])]),e._v(" "),_("li",[_("p",[_("code",[e._v("Client")]),e._v("：agent 以 client 模式启动的节点。在该模式下，该节点会采集相关信息，通过 RPC 的方式向 server 发送。")])])]),e._v(" "),_("p",[e._v("简单理解，可把图中的「服务注册中心」，就看做是 Consul：\n"),_("img",{attrs:{src:t(406),alt:"服务发现"}})]),e._v(" "),_("ol",[_("li",[e._v("Consul 使用的是 Requestor -> Registry 方式\n"),_("ul",[_("li",[e._v("Consul agent 是部署在本地机器上，所以它们的通信只会在本地机器，避免了漫长的网络调用；")]),e._v(" "),_("li",[e._v("SDK 中缓存的时间也比 dns 小得多，可以使用秒级缓存；")])])]),e._v(" "),_("li",[e._v("Consul agent 与业务进程的通信方式是基于 http 协议，所以 "),_("strong",[e._v("Consul 其实是没有服务订阅与变更通知的")]),e._v("，这两个功能由 SDK 层自行通过 http 轮询实现。")])]),e._v(" "),_("div",{staticClass:"custom-block warning"},[_("p",{staticClass:"custom-block-title"},[e._v("不同机器上的 Consul agent 是如何保持信息一致的呢？")]),e._v(" "),_("p",[e._v("部署在本地机器上的是 client，client 自身是不会去修改数据的，都是从 server 进行同步的。")]),e._v(" "),_("p",[e._v("server 又分为 leader 跟 follower，当 leader 收到一个提议，比如说某台机器上线需要加入集群，leader 会先跟所有 follower 进行同步，然后 follower 又会跟连接到自身的 client 进行同步。这样就把一个信息同步到所有本地机器了，可以认为这时整个集群中的所有 agent 信息一致。")]),e._v(" "),_("p",[e._v("在同步中间出现的任何问题，比如网络中断 ( 网线被挖断了 )、leader 挂了，这些意外情况都是由 raft 协议去对数据一致性进行保证的。")])]),e._v(" "),_("blockquote",[_("p",[e._v("Consul 和 Etcd 都非常适合容器环境，因为 Docker 容器启动、停止都会发送事件（Event），"),_("code",[e._v("基于事件通知机制")]),e._v("非常便于将服务实例从 Consul 或 Etcd 上注册、注销。")])]),e._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[e._v("Raft 共识算法")]),e._v(" "),_("blockquote",[_("p",[e._v("Raft 共识算法，是解决分布式系统中系统一致性的一种经典方案。起源于"),_("code",[e._v("「拜占庭将军问题」")]),e._v("（"),_("strong",[e._v("多个拜占庭将军要如何在可能有叛徒、信使可能被策反或者暗杀的情况下达成是否要进攻的一致性决定")]),e._v("）。")]),e._v(" "),_("blockquote",[_("p",[e._v("拜占庭将军问题是分布式领域最复杂、最严格的容错模型。但在日常工作中使用的分布式系统面对的问题不会那么复杂，更多的是计算机故障挂掉了，或者网络通信问题而没法传递信息，这种情况不考虑计算机之间互相发送恶意信息，极大简化了系统对容错的要求，最主要的是达到一致性。")])]),e._v(" "),_("blockquote",[_("p",[e._v("所以 "),_("strong",[e._v("Raft 是简化版拜占庭将军问题的解决方案")]),e._v("。")])])]),e._v(" "),_("p",[e._v("在 Raft 运行过程中，最主要进行两个活动：")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("选主 Leader Election")])]),e._v(" "),_("li",[_("code",[e._v("复制日志 Log Replication")])])]),e._v(" "),_("p",[e._v("详细过程可参考动画示意："),_("a",{attrs:{href:"http://thesecretlivesofdata.com/raft/",target:"_blank",rel:"noopener noreferrer"}},[e._v("动画演示：Raft 共识算法"),_("OutboundLink")],1)])]),e._v(" "),_("h2",{attrs:{id:"参考文章"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[e._v("#")]),e._v(" 参考文章")]),e._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://juejin.cn/post/6844903937653342216",target:"_blank",rel:"noopener noreferrer"}},[e._v("分布式系统之服务发现（Service Discovery）"),_("OutboundLink")],1)]),e._v(" "),_("li",[_("a",{attrs:{href:"https://www.yuque.com/egg/nodejs/mhgl9f",target:"_blank",rel:"noopener noreferrer"}},[e._v("聊聊 Node.js RPC（二）— 服务发现"),_("OutboundLink")],1)]),e._v(" "),_("li",[_("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/130974371",target:"_blank",rel:"noopener noreferrer"}},[e._v("分布式一致性协议概述"),_("OutboundLink")],1)]),e._v(" "),_("li",[_("a",{attrs:{href:"https://www.cnblogs.com/shhnwangjian/p/9139866.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("consul 介绍"),_("OutboundLink")],1)]),e._v(" "),_("li",[_("a",{attrs:{href:"https://www.consul.io/docs/intro/vs",target:"_blank",rel:"noopener noreferrer"}},[e._v("consul"),_("OutboundLink")],1)]),e._v(" "),_("li",[_("a",{attrs:{href:"https://www.consul.io/docs/agent",target:"_blank",rel:"noopener noreferrer"}},[e._v("consul agent"),_("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=r.exports}}]);