(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{508:function(t,e,a){t.exports=a.p+"assets/img/render.86e7face.png"},816:function(t,e,a){"use strict";a.r(e);var s=a(14),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"浏览器渲染机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染机制"}},[t._v("#")]),t._v(" 浏览器渲染机制")]),t._v(" "),s("h2",{attrs:{id:"doctype"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#doctype"}},[t._v("#")]),t._v(" DOCTYPE")]),t._v(" "),s("h3",{attrs:{id:"定义及作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义及作用"}},[t._v("#")]),t._v(" 定义及作用")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("DTD")]),t._v("(document type definition，"),s("code",[t._v("文档类型定义")]),t._v(")是一系列的语法规则，用来定义XML或(X)HTML的文件类型。浏览器会使用DTD来判断文档类型，决定使用何种协议来解析，以及切换浏览器模式。")]),t._v(" "),s("li",[s("code",[t._v("DOCTYPE是用来声明DTD的")]),t._v("，即"),s("code",[t._v("声明文档类型")]),t._v("。")]),t._v(" "),s("li",[t._v("主要的用途有：对文档的合法性进行验证；决定浏览器的呈现模式。")])]),t._v(" "),s("h3",{attrs:{id:"常用的-doctype-声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用的-doctype-声明"}},[t._v("#")]),t._v(" 常用的 DOCTYPE 声明")]),t._v(" "),s("p",[t._v("HTML 5：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token doctype"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),s("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("DOCTYPE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token name"}},[t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("HTML 4.01 Strict：\n该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token doctype"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),s("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("DOCTYPE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token name"}},[t._v("HTML")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token name"}},[t._v("PUBLIC")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-//W3C//DTD HTML 4.01//EN"')]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.w3.org/TR/html4/strict.dtd"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("HTML 4.01 Transitional：\n该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token doctype"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),s("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("DOCTYPE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token name"}},[t._v("HTML")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token name"}},[t._v("PUBLIC")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-//W3C//DTD HTML 4.01 Transitional//EN"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.w3.org/TR/html4/loose.dtd"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("h3",{attrs:{id:"严格模式有什么主要限制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#严格模式有什么主要限制"}},[t._v("#")]),t._v(" 严格模式有什么主要限制")]),t._v(" "),s("ul",[s("li",[t._v("变量必须声明才能使用；")]),t._v(" "),s("li",[t._v("arguments参数不会自动反映函数参数的变化；")]),t._v(" "),s("li",[t._v("不能使用arguments.caller或.callee；")]),t._v(" "),s("li",[t._v("禁止this指向全局对象；")]),t._v(" "),s("li",[t._v("不能使用前缀0表示八进制数；")])]),t._v(" "),s("h3",{attrs:{id:"不同浏览器内核"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不同浏览器内核"}},[t._v("#")]),t._v(" 不同浏览器内核")]),t._v(" "),s("ul",[s("li",[t._v("IE：trident内核")]),t._v(" "),s("li",[t._v("Firefox：gecko内核")]),t._v(" "),s("li",[t._v("Safari：webkit内核")]),t._v(" "),s("li",[t._v("Chrome：Blink（基于webkit）内核")])]),t._v(" "),s("h2",{attrs:{id:"浏览器渲染过程-6步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染过程-6步"}},[t._v("#")]),t._v(" 浏览器渲染过程（6步）")]),t._v(" "),s("p",[t._v("Firefox、Chrome和Safari是基于两种渲染引擎构建的，Firefox使用Geoko——Mozilla自主研发的渲染引擎，Safari和Chrome都使用webkit。尽管Webkit与Gecko使用略微不同的术语，这个过程还是基本相同的：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(508),alt:"渲染过程"}})]),t._v(" "),s("ol",[s("li",[s("code",[t._v("DOM tree")]),t._v("：浏览器会将HTML解析成一个DOM树，DOM 树的构建过程是一个深度遍历过程：当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。")]),t._v(" "),s("li",[s("code",[t._v("CSS规则树")]),t._v("：将CSS解析成 CSS Rule Tree 。")]),t._v(" "),s("li",[s("code",[t._v("Render tree")]),t._v("：根据DOM树和CSSOM来构造 Render Tree。注意：Render Tree 渲染树并不等同于 DOM 树，因为一些像Header或display:none的东西就没必要放在渲染树中了。")]),t._v(" "),s("li",[s("code",[t._v("Layout（Reflow）")]),t._v("：有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系。这一步操作称之为layout/reflow，顾名思义就是计算出每个节点在屏幕中的尺寸和位置。")]),t._v(" "),s("li",[s("code",[t._v("Paint")]),t._v("：再下来这一步就是绘制，即遍历render树，绘制页面像素信息。")]),t._v(" "),s("li",[s("code",[t._v("Composite 并显示")]),t._v("：最终，浏览器将各层的信息发送给GPU，进而将各层合成（composite）并显示在屏幕上。")])]),t._v(" "),s("p",[s("strong",[t._v("注意")]),t._v("：上述这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会"),s("code",[t._v("尽可能早的将内容呈现到屏幕上")]),t._v("，并不会等到所有的html都解析完成之后再去构建和布局render树。它是"),s("code",[t._v("解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"重排reflow-与-重绘repaint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重排reflow-与-重绘repaint"}},[t._v("#")]),t._v(" 重排reflow 与 重绘repaint")]),t._v(" "),s("h3",{attrs:{id:"_1、reflow-重排-回流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、reflow-重排-回流"}},[t._v("#")]),t._v(" 1、reflow（重排/回流）：")]),t._v(" "),s("h4",{attrs:{id:"定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),s("p",[t._v("各个DOM元素都有自己的盒子模型，这些都需要浏览器根据各种样式来计算并根据计算结果将元素放到应该的位置上。当浏览器发现某个部分发生了点变化影响了布局，需要倒回去重新渲染，那么这个回退的过程叫 reflow。")]),t._v(" "),s("ul",[s("li",[t._v("reflow 会从"),s("code",[t._v("<html>")]),t._v("这个 root frame 开始递归往下，依次计算所有的结点几何尺寸和位置。")]),t._v(" "),s("li",[t._v("reflow 几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显 示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击……只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。")])]),t._v(" "),s("h4",{attrs:{id:"触发reflow的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#触发reflow的情况"}},[t._v("#")]),t._v(" 触发reflow的情况")]),t._v(" "),s("ol",[s("li",[t._v("页面初始化渲染时；")]),t._v(" "),s("li",[t._v("dom结构改变：操作dom节点结构时、移动dom位置时；")]),t._v(" "),s("li",[s("code",[t._v("resize窗口")]),t._v("时有可能；")]),t._v(" "),s("li",[t._v("改变字体大小时；")]),t._v(" "),s("li",[t._v("render tree变化：修改某些影响布局的css样式时（比如增减padding）；")]),t._v(" "),s("li",[s("code",[t._v("最复杂的一种：获取某些属性时")]),t._v("。很多浏览器会对回流做优化，会等到数量足够时做一次"),s("code",[t._v("批处理")]),t._v("回流，但是，除了render树的直接变化，当获取一些属性时，浏览器为了获得正确的值也会触发回流，这样"),s("code",[t._v("使得浏览器批处理优化无效")]),t._v("，包括：\n"),s("ul",[s("li",[t._v("offset(Top/Left/Width/Height)")]),t._v(" "),s("li",[t._v("scroll(Top/Left/Width/Height)")]),t._v(" "),s("li",[t._v("cilent(Top/Left/Width/Height)")]),t._v(" "),s("li",[t._v("width，height")]),t._v(" "),s("li",[t._v("调用了getComputedStyle()或者IE的currentStyle("),s("RouterLink",{attrs:{to:"/Question-Bank/css/box-sizing&margin-collapse&BFC.html#js如何设置获取盒模型对应的宽和高"}},[t._v("js如何设置获取盒模型对应的宽和高")]),t._v(")")],1)])])]),t._v(" "),s("h3",{attrs:{id:"_2、repaint-重绘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、repaint-重绘"}},[t._v("#")]),t._v(" 2、repaint（重绘）：")]),t._v(" "),s("h4",{attrs:{id:"定义-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义-2"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),s("p",[t._v("改变某个元素的背景色、文字颜色、边框颜色等等但不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸没有变。这个过程就叫做repaint。")]),t._v(" "),s("ul",[s("li",[t._v("重排一定伴随着重绘，重绘却可以单独出现。")]),t._v(" "),s("li",[t._v("注意：\n"),s("ul",[s("li",[t._v("(1) "),s("code",[t._v("display:none 的节点不会被加入Render Tree")]),t._v("，而visibility: hidden 则会，所以，如果某个节点最开始是不显示的，设为display:none是更优的。")]),t._v(" "),s("li",[t._v("(2) "),s("code",[t._v("display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发现位置变化")]),t._v("。")]),t._v(" "),s("li",[t._v("(3) 有些情况下，比如修改了元素的样式，浏览器并不会立刻reflow 或 repaint 一次，而是会把这样的操作积攒一批，然后做一次 reflow，这又叫异步 reflow 或增量异步reflow。但是在有些情况下，比如resize 窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行 reflow。")])])])]),t._v(" "),s("h4",{attrs:{id:"减少-reflow-repaint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#减少-reflow-repaint"}},[t._v("#")]),t._v(" 减少 reflow & repaint")]),t._v(" "),s("p",[s("code",[t._v("重排和重绘是不可避免的")]),t._v("，我们只能说将它们对性能的影响减到最小，既然我们知道什么情况会触发它们，那就从这些方面入手：")]),t._v(" "),s("ol",[s("li",[t._v("让需要改变的元素进行"),s("code",[t._v("“离线处理”")]),t._v("，处理完后一起更新；")]),t._v(" "),s("li",[t._v("避免循环操作dom，创建一个"),s("code",[t._v("documentFragment")]),t._v("或div，在它上面应用所有DOM操作，最后再把它添加到window.document，触发一次重排和重绘\n（"),s("RouterLink",{attrs:{to:"/Lets-Read/one/read-3-1.html#使用-documentfragment"}},[t._v("使用documentfragment")]),t._v("）；")],1),t._v(" "),s("li",[s("code",[t._v("使用display: none")]),t._v("，触发两次重排和重绘（由于display: none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排）；")]),t._v(" "),s("li",[s("code",[t._v("将需要多次重排的元素的position属性设为absolute或fixed")]),t._v("（设为float没有完全脱离文档流，这个很微妙），这样元素就脱离了文档流，它的变化不会影响到其他元素的布局，不会导致一个完整重排；")]),t._v(" "),s("li",[t._v("减少逐项更改样式，最好"),s("code",[t._v("一次性更改style")]),t._v("，或者将样式定义为class并一次性更新；")]),t._v(" "),s("li",[s("code",[t._v("避免多次读取offset等属性。无法避免则将它们缓存到变量")]),t._v("；")]),t._v(" "),s("li",[s("code",[t._v("不要用table布局")]),t._v("，table中某个元素一旦触发重排就会导致table里所有的其它元素重排。在适合用table的场合，可以设置table-layout为auto或fixed，这样可以让table一行一行的渲染，这种做法也是为了限制重排的影响范围（一般我们可以通过ul li的布局替代之）。")])]),t._v(" "),s("p",[t._v("总之，在以后的开发中我们要尽量避免大量、频繁的操作DOM元素，因为DOM操作的代价实在是太昂贵了（这也是Virtual DOM应运而生的原因）。在书写HTML时要避免不必要的层级，书写CSS时避免嵌套过深、规则过于复杂，尤其是后代选择器，匹配选择器也会耗费更多的CPU。")])])}),[],!1,null,null,null);e.default=r.exports}}]);