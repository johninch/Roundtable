(window.webpackJsonp=window.webpackJsonp||[]).push([[194],{747:function(t,n,s){"use strict";s.r(n);var e=s(14),v=Object(e.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"基础知识提纲"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础知识提纲"}},[t._v("#")]),t._v(" 基础知识提纲")]),t._v(" "),s("h3",{attrs:{id:"面试注意点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试注意点"}},[t._v("#")]),t._v(" 面试注意点")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("回答项目问题")]),t._v(" "),s("ul",[s("li",[t._v("项目背景: 简要说一下项目的背景,让面试官知道这个项目是做什么的")]),t._v(" "),s("li",[t._v("个人角色: 让面试官知道你在这个项目中扮演的角色")]),t._v(" "),s("li",[t._v("难点: 让面试官知道你在项目开发过程中碰到的难点")]),t._v(" "),s("li",[t._v("解决方案: 针对上面的难点你有哪一些解决方案, 是如何结合业务进行取舍的")]),t._v(" "),s("li",[t._v("总结沉淀: 在攻克上述的难点后有没有沉淀出一套通用的解决方案, 有没有将自己的方案在大部门进行推广等等")])])]),t._v(" "),s("li",[s("p",[t._v("向面试官提问")]),t._v(" "),s("ul",[s("li",[t._v("禁忌\n"),s("ul",[s("li",[t._v("切忌问结果")]),t._v(" "),s("li",[t._v("切忌问工资")]),t._v(" "),s("li",[t._v("切忌问技术问题")])])]),t._v(" "),s("li",[t._v("有几个比较好的提问可供参考:\n"),s("ul",[s("li",[t._v("如果我入职这个岗位的话,前三个月你希望我能做到些什么?")]),t._v(" "),s("li",[t._v("你对这个职位理想人选的要求是什么?你觉得我在这个要求体系下欠缺的是什么？")]),t._v(" "),s("li",[t._v("请不要问一些技术无关 的问题，比如:几点下班，团队现在多少人等;这些问题可以留给 hr 来解答 。 最好是根据面试情况，问一下技术方向的话题，比如性能优化你回答的不好，问面试 官，如何提高这方面的技术，尽量表现出对技术的追求，面试官会喜欢的")])])])])])]),t._v(" "),s("h3",{attrs:{id:"知识点列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#知识点列表"}},[t._v("#")]),t._v(" 知识点列表")]),t._v(" "),s("h3",{attrs:{id:"details"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#details"}},[t._v("#")]),t._v(" details")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("列表带解释")]),t._v(" "),s("ul",[s("li",[t._v("js 连等赋值问题")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 持有a，以回查")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --\x3e undefined")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --\x3e {n:2}")]),t._v("\n")])])]),s("ul",[s("li",[s("p",[t._v("错误监控")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("即时运行错误的捕获方式：")]),t._v(" "),s("ul",[s("li",[t._v("try..catch..")]),t._v(" "),s("li",[t._v("window.onerror")])])]),t._v(" "),s("li",[s("p",[t._v("资源加载错误的捕获方式：")]),t._v(" "),s("ul",[s("li",[t._v("object.onerror 比如 img.onerror")]),t._v(" "),s("li",[t._v("performance.getEntries()：用 2 需要的去除 1 中已经加载到的资源就是加载失败的资源\n"),s("ol",[s("li",[t._v("performance.getEntries().forEach(item=>{console.log(item.name)}) 遍历出来页面中所有加载到的资源；")]),t._v(" "),s("li",[t._v("document.getElementsByTagName('img') 拿到所有需要的某种需要的资源")])])])])]),t._v(" "),s("li",[s("p",[t._v("Error 事件捕获\nwindow.addEventListener('error', function(e) {\nconsole.log('捕获', e)\n}, true)\ntrue 代表事件捕获，如果是 false，也就是事件冒泡，只报错但获取不到该错误")])]),t._v(" "),s("li",[s("p",[t._v("延伸：跨域的 js 运行错误可以捕获吗，错误提示是什么，应该怎么处理?\n可以捕获，但是只能知道 script error，但无法拿到行号列号，处理方法是：\n在客户端 script 标签增加 crossorigin 属性；\n在服务端设置 js 资源响应头 Access-Control-Allow-Origin: *\n就可以拿到具体的跨域的 js 运行错误了。")])])])]),t._v(" "),s("li",[s("p",[t._v("精度丢失问题：0.1+0.2 !== 0.3")]),t._v(" "),s("ul",[s("li",[t._v("数据均以 2 进制存储，js 使用 64 位双进度浮点数编码，1+11+52，由于尾数位只能存储 52 个数字，这就能解释 toString(2)的执行结果了:由于限制，有效数字第 53 位及以后的数字是不能存储的，它遵循，如果是 1 就向前一位进 1，如果是 0 就舍弃的原则。")]),t._v(" "),s("li",[t._v("0.1 的二进制科学计数法第 53 位是 1，0.2 有着同样的问题，其实正是由于这样的存储，在这里有了精度丢失，导致了 0.1+0.2!=0.3。")])])]),t._v(" "),s("li",[s("p",[t._v("前端性能优化方向（缓存、发送请求、页面解析、静态资源加载、运行时(可包括框架性能优化)）")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("（一）缓存")])]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("有些资源和数据可以本地存储，不需要发请求（localStorage、sessionStorage、indexedDB）")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("内存缓存（Memory）")])]),t._v(" "),s("ul",[s("li",[t._v("请求页面及其子资源时，会先检查内存中是否已经有对应资源，这部分是浏览器自己完成的，对我们而言是无感的")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("使用 Service Worker 和 Cache API")])]),t._v(" "),s("ul",[s("li",[t._v("Cache API 提供的缓存可以认为是“持久性”的，关闭浏览器或离开页面之后，下次再访问仍然可以使用。通过 Service Worker 的生命周期控制。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("HTTP 缓存")])]),t._v(" "),s("ul",[s("li",[t._v("强缓存\n"),s("ul",[s("li",[t._v("如果响应头部有 Etag 字段，那么浏览器就会将本次缓存写入硬盘中（from disk cache）")]),t._v(" "),s("li",[t._v("如果服务器上设置 Etag 未开启，则放到内存中（from memory cache）")])])]),t._v(" "),s("li",[t._v("协商缓存")])])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("（二）发送请求")])]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("避免多余重定向")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("DNS 预解析")])]),t._v(" "),s("ul",[s("li",[t._v("DNS 解析是一个递归与迭代的过程\n"),s("ul",[s("li",[t._v("hosts 文件中是否有映射")]),t._v(" "),s("li",[t._v("查找本地 DNS 缓存")]),t._v(" "),s("li",[t._v("向 本地 DNS 服务器 递归查询")]),t._v(" "),s("li",[t._v("本地 DNS 服务器 迭代向根域名服务器、顶级域名服务器、二级域名服务器、主机域名服务器查询，直到找到该域名。")])])]),t._v(" "),s("li",[t._v("开启预解析："),s("code",[t._v('<link rel="dns-prefetch" href="//yourwebsite.com">')])])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("DNS 优化：域名发散与域名收敛")])]),t._v(" "),s("ul",[s("li",[t._v("域名发散是 pc 端为了利用浏览器的多线程并行下载能力")]),t._v(" "),s("li",[t._v("域名收敛多用于移动端，m 端网速慢 dns 太耗时，收敛提高性能")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("预先建立连接")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v('<link rel="preconnect" href="//sample.com" crossorigin>')]),t._v(" 告诉浏览器，视情况来预先建立 tcp/ip 链接，crossorigin 是可选的设置 CORS")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"5"}},[s("li",[t._v("使用 CDN")])])])])]),t._v(" "),s("li",[s("p",[t._v("（三）服务端响应")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("使用流进行响应")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("业务聚合 BFF，减少请求数和请求时间")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("负载均衡（只针对高并发量网站）")])]),t._v(" "),s("ul",[s("li",[t._v("Node.js 处理 IO 密集型请求")]),t._v(" "),s("li",[t._v("pm2 实现 Node.js“多线程”，pm2 是对进程实现负载均衡")]),t._v(" "),s("li",[t._v("nginx 搭建反向代理，反向代理是对服务器实现负载均衡，通过轮询机制，将用户的请求分配到压力较小的服务器上\n"),s("ul",[s("li",[t._v("nginx 中，模块被分为三大类：handler、filter 和 upstream。而其中的 upstream 模块，负责完成网络数据的接收、处理和转发，也是我们需要在反向代理中用到的模块。")])])])])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("（四）页面解析与处理")])]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("资源引用位置")])]),t._v(" "),s("ul",[s("li",[t._v("因为 JS 会阻塞 DOM 构建，而 CSSOM 的构建又会阻塞 JS 的执行。")]),t._v(" "),s("li",[t._v("CSS 样式表放在 "),s("code",[t._v("<head>")]),t._v(" 之中（即页面的头部），把 JS 脚本放在 "),s("code",[t._v("<body>")]),t._v(" 的最后（即页面的尾部）")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("使用 defer 和 async")])]),t._v(" "),s("ul",[s("li",[t._v("在一些与主业务无关的非核心 JS 脚本上使用 async 和 defer 属性")])])]),t._v(" "),s("li",[t._v("白屏体验优化\n"),s("ul",[s("li",[t._v("白屏时间 = firstPaint - performance.timing.navigationStart")]),t._v(" "),s("li",[t._v("白屏时间内发生了什么:\n回车按下,浏览器解析网址,进行 DNS 查询,查询返回 IP,通过 IP 发出 HTTP(S) 请求\n服务器返回 HTML,浏览器开始解析 HTML,此时触发请求 js 和 css 资源\njs 被加载,开始执行 js,调用各种函数创建 DOM 并渲染到根节点,直到第一个可见元素产生")]),t._v(" "),s("li",[t._v("白屏体验优化\n"),s("ol",[s("li",[t._v("白屏 loading 提示（在 js 执行期间插入 loading 图）")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("plugins: [\n    new HtmlWebpackPlugin({\n        template: './src/index.html',\n        loading: loading\n    })\n]\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("SSR 同构，服务端直出 html")]),t._v(" "),s("li",[t._v("首次有意义绘制 FMP\n"),s("ul",[s("li",[t._v("在不同框架上都有相应的 Skeleton 骨架屏实现\n"),s("ul",[s("li",[t._v("React: antd 内置的骨架图 Skeleton 方案")]),t._v(" "),s("li",[t._v("Vue: vue-skeleton-webpack-plugin")])])])])])])])])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("（五）页面静态资源")])]),t._v(" "),s("ul",[s("li",[t._v("预加载\n"),s("ul",[s("li",[t._v("通过设置 link 属性来控制预加载\n"),s("ul",[s("li",[t._v("DNS Prefetch")]),t._v(" "),s("li",[t._v("Preconnect")]),t._v(" "),s("li",[t._v("prefetch")]),t._v(" "),s("li",[t._v("prerender")]),t._v(" "),s("li",[t._v("preload")]),t._v(" "),s("li",[t._v("在 webpack 中使用魔法注释指定\n"),s("ul",[s("li",[t._v("/_ webpackPrefetch: true _/")]),t._v(" "),s("li",[t._v("/_ webpackPreload: true _/")])])])])]),t._v(" "),s("li",[t._v("通过 js 来控制预加载\n"),s("ul",[s("li",[t._v("可以使用 PreloadJS 这个库，提供脚本、样式、图片、字体、SVG 等各类资源的预加载器")])])])])]),t._v(" "),s("li",[t._v("代码拆分（code split）与按需加载")]),t._v(" "),s("li",[t._v("提取公共代码：splitChunks 或者 CommonChunkPlugin")]),t._v(" "),s("li",[t._v("Tree Shaking\n"),s("ul",[s("li",[t._v("只支持 ESM，因为本质是利用静态分析")])]),t._v(" "),s("ol",[s("li",[t._v("先标记：标记功能需要配置 optimization.usedExports = true 开启")]),t._v(" "),s("li",[t._v("再 shaking：使用 terser 插件进行 dead 代码摘除")])])]),t._v(" "),s("li",[t._v("只加载真正所需的 polyfill，减小代码体积。\n"),s("ul",[s("li",[t._v("useBuiltIns: entry/usage/false")])])]),t._v(" "),s("li",[t._v("打包压缩代码资源\n"),s("ul",[s("li",[t._v("js 压缩：UglifyJsPlugin")]),t._v(" "),s("li",[t._v("html 压缩：HtmlWebpackPlugin，配置 minify 选项")]),t._v(" "),s("li",[t._v("提取 css 并压缩：MiniCssExtractPlugin")]),t._v(" "),s("li",[t._v("开启 Gzip 压缩：配置 nginx 反向代理\n"),s("ul",[s("li",[t._v("！！！不要对图片文件进行 Gzip 压缩，因为会占用后台大量资源，且压缩效果并不理想，「弊大于利」，所以一定要在 gzip_types 配置中把图片的相关项去掉。")])])])])]),t._v(" "),s("li",[t._v("图片资源优化\n"),s("ul",[s("li",[t._v("不要在 HTML 里缩放图像：比如不要在 200✖200 的图片容器内使用 400✖400 的图片，用户并不会感到缩放后的大图更清晰，但严重增加了图片传输时间和带宽浪费。")]),t._v(" "),s("li",[t._v("图片懒加载\n"),s("ul",[s("li",[t._v("js 懒加载图片，监听滚动判断是否进入视口；（还可以使用更先进的 Intersection Observer API）")]),t._v(" "),s("li",[t._v("css 懒加载图片，通过切换 className 的方式"),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".login")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("background-url")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token url"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("url")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/static/img/login.png"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])]),t._v(" "),s("li",[t._v("使用雪碧图")]),t._v(" "),s("li",[t._v("使用字体图标")]),t._v(" "),s("li",[t._v("使用合适的图片\n"),s("ul",[s("li",[t._v("使用 WebP：一种旨在加快图片加载速度的图片格式，压缩体积大约只有 JPEG 的 2/3")]),t._v(" "),s("li",[t._v("HTML5 在 "),s("code",[t._v("<img>")]),t._v(" 元素上为我们提供了 srcset 和 sizes 属性，可以让浏览器根据屏幕信息选择需要展示的图片。\n"),s("ul",[s("li",[s("code",[t._v('<img srcset="small.jpg 480w, large.jpg 1080w" sizes="50w" src="large.jpg" >')])])])])])])])]),t._v(" "),s("li",[t._v("平滑加载字体资源\n"),s("ul",[s("li",[t._v("在字体加载的期间，浏览器页面是默认不展示文本内容的。即我们常说的 FOIT (Flash of Invisible Text)。在现代浏览器中，FOIT 持续至多 3 秒。")]),t._v(" "),s("li",[t._v("通过加载策略来降低甚至消除 FOIT\n"),s("ul",[s("li",[t._v("使用 font-display: swap，在加载期间使用默认字体显示")]),t._v(" "),s("li",[t._v("将字体文件转为 base64 的字符串，避免异步加载时的问题")])])])])]),t._v(" "),s("li",[t._v("使用 CDN")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("（六）运行时")])]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("注意强制同步布局")])]),t._v(" "),s("ul",[s("li",[t._v("什么是强制同步布局？\n"),s("ul",[s("li",[t._v("即某些 JS 操作会导致浏览器需要提前执行布局操作")])])]),t._v(" "),s("li",[t._v("使用 rAF 避免强制同步布局\n"),s("ul",[s("li",[t._v("将布局查询的操作放在 requestAnimationFrame 中")])])]),t._v(" "),s("li",[t._v("批量化元素的布局查询操作，等到下一次 requestAnimationFrame 触发时一起执行")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("长列表优化")])]),t._v(" "),s("ul",[s("li",[t._v("实现 Virtual List，只渲染可见区域附近的列表元素。（只有视口内和临近视口的上下区域内的元素会被渲染）")]),t._v(" "),s("li",[t._v("原生的 Virtual Scroller，"),s("code",[t._v("<virtual-scroller>")]),t._v(" 是内置（built-in）模块提供的，还不建议在生成环境使用")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("避免 JavaScript 运行时间过长（线程互斥导致“掉帧”）")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("使用 rAF 进行任务分解，时间分片")])]),t._v(" "),s("li",[s("p",[t._v("使用 requestIdleCallback 空闲时执行注册回调。防止饿死可以指定第二个参数来设定超时时间。")])]),t._v(" "),s("li",[s("p",[t._v("并行计算，考虑将 CPU 密集型计算场景与主线程并行。在浏览器中启用并行线程可以使用 Web Worker，并行（concurrency）地执行 JS。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" worker "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Worker")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"worker.js"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nworker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("result is ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nworker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("    // worker.js\n    self.addEventListener('message', function (e) {\n        if (e.data === 'start') {\n            // 一些密集的计算……\n            self.postMessage(result);\n        }\n    }, false);\n    ```\n- 页面渲染性能，着重减少重排的发生率：\n    - 因为，重排是由CPU处理的，而重绘是由GPU处理的，CPU的处理效率远不及GPU，并且重排一定会引发重绘，而重绘不一定会引发重排。\n    - CSS属性读写分离：先读后写，避免出现两者交叉使用，最佳实践是不用JS去操作元素样式\n    - 通过切换class或者style.csstext属性去批量操作元素样式\n    - DOM元素离线更新：\n        - 对DOM进行相关操作时（innerHTML、appendChild），都可以使用DocumentFragment对象进行离线操作，等元素“组装”完成后再一次插入页面\n        - 或者使用display:none 对元素隐藏，在元素“消失”后进行相关操作\n    - 图片在渲染前指定大小：因为img元素是内联元素，所以在加载图片后会改变宽高，严重的情况会导致整个页面重排，所以最好在渲染前就指定其大小，或者让其脱离文档流。\n    - 善用 Composite，开启GPU硬件加速（单独触发DOM渲染层）：\n        - GPU会对所有的渲染层作缓存，把那些一直发生大量重排重绘的元素提取出来，单独触发一个渲染层，那样这个元素不就不会“连累”其他元素一块重绘\n        - 给元素设置 3D transform，提升到单独的合成层（比如transform: translateZ(0)）\n        - 合成层在性能优化上的*优点*在于：\n            - 合成层的位图，会交由 GPU 合成，比 CPU 处理要快；\n            - 当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层；\n            - 对于 transform 和 opacity 效果，不会触发 layout 和 paint。\n        - 但同时，也要注意避免*层爆炸*，防止在无法进行层压缩的情况下出现过多的层，反而导致性能的下降\n- 滚动事件的性能优化\n    - 防抖\n    - 节流\n    - Passive event listeners使滚动更顺畅（无等待立即滚动）\n        - 原理：当你添加触摸、滚轮的事件监听后，每次触发该事件，浏览器都会先花费时间执行完你的回调，然后根据结果判断是否需要滚动页面。如果的操作花费了 200ms，那页面只能在 200ms 后再滚动或缩放，这就导致了性能问题。\n            ```js\n            document.addEventListener('touchstart', function (e) {\n                // 做了一些操作……\n                e.preventDefault();\n            }, true);\n\n\n            document.addEventListener('touchstart', function (e) {\n                // 做了一些操作……\n            }, {passive: true});\n            ```\n        - 比如我不会阻止默认事件，通过传入`{passive: true}`先告诉浏览器不用等（你放心，我没有阻止默认行为，你不用在这儿等了可以先“滚”了），直接滚动页面就行\n        - 注意：addEventListener第三个参数中传入 {passive: true}有兼容性问题，因为对于低版本浏览器来说，第三个参数是用来设置是否进行事件捕获的，所以需要特性检测。\n    - 使用 pointer-events: none 禁止鼠标事件\n        - 在用户开始滚动页面的时候, 给body添加 .disable-hover。这个操作可以让鼠标经过元素的时候**禁用hover效果**。\n        ```css\n        .disable-hover {\n            pointer-events: none;\n        }\n        ```\n        ```js\n        var body = document.body,\n            timer;\n\n        window.addEventListener('scroll', function() {\n            clearTimeout(timer);\n            if(!body.classList.contains('disable-hover')) {\n                body.classList.add('disable-hover')\n            }\n\n            // 在用户停止滚动操作的时候移除这个class\n            timer = setTimeout(function(){\n                body.classList.remove('disable-hover')\n            },500);\n        }, false);\n        ```\n        - 当前, 给body添加pointer-events属性能够满足绝大多数场景下工作正常, 但是如果子元素设置了pointer-eventes: auto, 这会覆盖父元素的属性, 然后导致滚动的时候页面闪动.\n        ```css\n        .disable-hover,\n        .disable-hover * {\n            pointer-events: none !important;\n        }\n        ```\n        - 一个简单的解决方案是使用星号选择器, 并且添加 !important 属性. 从而保证子元素的pointer-events属性是设置成’none’的.\n        - 不过，张鑫旭有一篇专门的文章，用来探讨 pointer-events: none 是否真的能够加速滚动性能，并提出了自己的质疑。\n")])])])])])])])])])])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://alienzhou.github.io/fe-performance-journey/#%E5%89%8D%E7%AB%AF%E9%9C%80%E8%A6%81%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%88%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端性能优化之旅"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://juejin.im/post/5b6fa8c86fb9a0099910ac91#heading-15",target:"_blank",rel:"noopener noreferrer"}},[t._v("网站性能优化实战——从 12.67s 到 1.06s 的故事"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"http://www.html-js.com/article/1598",target:"_blank",rel:"noopener noreferrer"}},[t._v("[译]使用 pointer-events:none 实现 60fps 滚动 (2014.1.4 更新)"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://www.zhangxinxu.com/wordpress/2014/01/pointer-events-none-avoiding-unnecessary-paints/",target:"_blank",rel:"noopener noreferrer"}},[t._v("pointer-events:none 提高页面滚动时候的绘制性能？"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[t._v("正向代理："),s("strong",[t._v("正向代理隐藏了真实的请求客户端")]),t._v("，服务端不知道真实的客户端是谁，客户端请求的服务都被代理服务器代替来请求。\n"),s("ul",[s("li",[t._v("某些科学上网工具扮演的就是典型的正向代理角色。用浏览器访问 www.google.com 时，被残忍的 block，于是你可以在国外搭建一台代理服务器，让代理帮我去请求 google.com，代理把请求返回的相应结果再返回给我。")])])]),t._v(" "),s("li",[t._v("反向代理："),s("strong",[t._v("反向代理隐藏了真实的服务端")]),t._v("，反向代理服务器会帮我们把请求转发到真实的服务器那里去。Nginx 就是性能非常好的反向代理服务器，用来做负载均衡。\n"),s("ul",[s("li",[t._v("当我们请求 www.baidu.com 的时候，背后可能有成千上万台服务器为我们服务，www.baidu.com 就是我们的反向代理服务器")])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("前端鉴权")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("session-cookie")]),t._v(" "),s("ul",[s("li",[t._v("利用服务器端的 session（会话）和浏览器端的 cookie 来实现前后端的认证，由于 http 请求是无状态的，服务器正常情况下是不知道当前请求之前有没有来过，这个时候我们如果要记录状态，就需要在服务器端创建一个会话(session)，将同一个客户端的请求都维护在各自的会话中，每当请求到达服务器端的时候，先去查一下该客户端有没有在服务器端创建 session，如果有则已经认证成功了，否则就没有认证。")]),t._v(" "),s("li",[t._v("认证过程：\n"),s("ul",[s("li",[s("ol",[s("li",[t._v("服务器在接受客户端首次访问时在服务器端创建 session 会话，并保存该 session 到"),s("code",[t._v("内存中")]),t._v("，或保存在"),s("code",[t._v("redis中")]),t._v("（推荐后者），然后给这个 session 生成一个唯一的 sessionId，并在响应头中 setCookie 种下这个 sessionId。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("浏览器从响应中解析响应头，然后将 sessionId 保存在本地 cookie 中，浏览器在下次 http 请求的请求头中会带上该域名下的 cookie 信息。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("服务器在接受客户端请求时会去解析请求头 cookie 中的 sessionId，并根据此 sessionId 在服务器端查找保存的该客户端的对应 session 会话，判断该请求是否合法。")])])])])]),t._v(" "),s("li",[t._v("缺点：\n"),s("ul",[s("li",[t._v("服务器内存消耗大: 用户每做一次应用认证，应用就会在服务端做一次记录，以方便用户下次请求时使用，通常来讲 session 保存在内存中，随着认证用户的增加，服务器的消耗就会很大。")]),t._v(" "),s("li",[t._v("易受到 CSRF 攻击: 基于 cookie 的一种跨站伪造攻击，基于 cookie 来进行识别用户的话，用户本身就携带了值，cookie 被截获，用户就很容易被伪造。")])])]),t._v(" "),s("li",[t._v("注意：\n"),s("ul",[s("li",[t._v("对于跨域，前端我们设置 axios 的 withCredentials = true 来设置 axios 可以发送 cookie，后端我们需要设置响应头 Access-Control-Allow-Credentials:true，并且同时设置 Access-Control-Allow-Origin 为前端页面的服务器地址，而不能是*。")])])])])]),t._v(" "),s("li",[s("p",[t._v("Token 验证")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("当用户第一次登录后，服务器生成一个 token 并将此 token 返回给客户端，以后客户端只需带上这个 token 前来请求数据即可，无需再次带上用户名和密码。")])]),t._v(" "),s("li",[s("p",[t._v("Token 验证可以是无状态的，也可以是有状态的")]),t._v(" "),s("ul",[s("li",[t._v("有状态 Token（服务端持久化，存入数据库，考虑有效期有两种方案）：\n"),s("ul",[s("li",[s("ol",[s("li",[t._v("在服务器端保存 Token 状态，用户每次操作都会自动刷新（推迟）Token 的过期时间——Session 就是采用这种策略来保持用户登录状态的")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("使用 Refresh Token，它可以避免频繁的读写操作。即登录后下发到客户端[token,refreshToken]两个一组，二者是相关联的。当 token 发到服务端过期时并返回过期状态时，前端会把 refreshToken 发到后端，后端对其进行验证并生成新的 token'替换掉原来的 token，前端拿到这个 token'之后就可以重新发送业务请求了。。。refreshToken 的有效期可以设置的长一些，当 refreshToken 也过期的时候，就真的应该让用户重新登录一次了")])])])])]),t._v(" "),s("li",[t._v("无状态 Token\n"),s("ul",[s("li",[t._v("（如果把所有状态信息都附加在 Token 上，服务器就可以不保存，服务端只需要认证 Token 有效就行了。。。只要服务端能确认是自己签发的 Token，而且其信息未被改动过，就证明是有效 token。。使用对称加密算法来验证“签名”，一般是 HS256）")]),t._v(" "),s("li",[t._v("本质是：用 解析 token 的计算时间换取 创建会话 session 的存储空间，从而减轻服务器的压力，减少频繁的查询数据库")]),t._v(" "),s("li",[t._v("认证过程：\n"),s("ul",[s("li",[s("ol",[s("li",[t._v("客户端使用用户名跟密码请求登录")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("服务端收到请求，去验证用户名与密码")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("验证成功后，服务端会"),s("code",[t._v("签发一个 Token")]),t._v("，再把这个 Token 发送给客户端")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("客户端收到 Token 以后可以把它存储起来，比如放在 "),s("code",[t._v("Cookie 里")]),t._v("或者 "),s("code",[t._v("LocalStorage 里")])])])]),t._v(" "),s("li",[t._v("前端每次路由跳转，判断 localStroage 有无 token ，没有则跳转到登录页，有则请求获取用户信息，改变登录状态；")]),t._v(" "),s("li",[s("ol",{attrs:{start:"5"}},[s("li",[t._v("客户端每次向服务端请求资源的时候需要带着服务端签发的 Token")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"6"}},[s("li",[t._v("服务端收到请求，然后去验证客户端请求里面带着的 Token")])]),t._v(" "),s("ul",[s("li",[t._v("如果验证成功，就向客户端返回请求的数据")]),t._v(" "),s("li",[t._v("如果验证不合法，就返回 401（鉴权失败）")])])])])]),t._v(" "),s("li",[t._v("JWT，（JSON Web Token）一种跨域认证授权解决方案，无状态 token 解决方案\n"),s("ul",[s("li",[t._v("是一个很长的字符串，中间用点（.）分隔成三个部分：Header（头部）.Payload（载荷）.Signature（签名）")]),t._v(" "),s("li",[t._v('token = base64UrlEncode(header) + "." + base64UrlEncode(payload) + signature\n'),s("ul",[s("li",[t._v("Header 头部：描述 JWT 元数据的 JSON 对象")]),t._v(" "),s("li",[t._v("Payload 载荷：存放实际传递信息的 JSON 对象，需要用 Base64URL 转成字符串")]),t._v(" "),s("li",[t._v("Signature 签名：（使用默认签名算法 HS256 生成，传入密钥 secret， Base64URL 相比于 Base64 算法，多了对 URL 里面特殊含义字符的处理，因为 JWT 作为一个令牌 token，可以放在 URL 中传输）\n"),s("ul",[s("li",[t._v('signature = HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(payload), secret)')])])])])]),t._v(" "),s("li",[t._v("使用方式：\n"),s("ul",[s("li",[t._v("方式 1："),s("code",[t._v("Authorization: Bearer <token>")])]),t._v(" "),s("li",[t._v("方式 2：跨域的时候，可以把 JWT 放在 POST 请求的数据体里")]),t._v(" "),s("li",[t._v("方式 3：通过 URL 传输")])])]),t._v(" "),s("li",[t._v("最大缺点！\n"),s("ul",[s("li",[t._v("JWT 的最大缺点是，由于服务器不保存会话，因此，JWT 一旦签发，在到期之前就会始终有效，因此无法在使用过程中废止某个 token，或者更改 token 的权限，除非服务器部署额外的逻辑。")]),t._v(" "),s("li",[t._v("如果用户修改(比如重置密码)或注销了 token，那他之前未到期的 token 怎么废弃掉呢？\n"),s("ul",[s("li",[t._v("比较常用的方式是「维护一个 token 黑名单，失效则加入黑名单中」，从而使后端能够主动让 JWT 失效")])])])])])])])])])])]),t._v(" "),s("li",[s("p",[t._v("有状态 Token 与 JWT 的区别")]),t._v(" "),s("ul",[s("li",[t._v("有状态 Token：token 是随机生成的 UUID，存在 Redis 内存中，服务端验证客户端发送过来的 Token 时，需要去 redis 内存中查找匹配获取用户信息，验证 Token 是否有效。")]),t._v(" "),s("li",[t._v("JWT：将 Token 和 Payload 加密后存储于客户端，服务端只需要解密进行校验即可，不需要查询或者减少查询数据库，因为 JWT 自包含了用户信息和加密的数据。")])])]),t._v(" "),s("li",[s("p",[t._v("前端存储和发送 Token 的两种方式：")]),t._v(" "),s("ul",[s("li",[t._v("1 使用 Header.Authorization + localStorage 存储和发送 token\n"),s("ul",[s("li",[t._v("这种方法可以避免 CSRF 攻击，因为没有使用 cookie，而 CSRF 就是基于 cookie 来攻击的。")]),t._v(" "),s("li",[t._v("但是这种方法容易被 XSS 攻击，因为 XSS 可以攻击 localStorage ，从中读取到 token，如果 token 中的 head 和 payload 部分没有加密，那么攻击者只要将 head 和 payload 的 base64 形式解码出来就可以看到 head 和 payload 的明文了。当然可以加密 payload 保护敏感信息。")])])]),t._v(" "),s("li",[t._v("2 使用 cookie 存储和发送 token：\n"),s("ul",[s("li",[t._v("这种方法避免 CSRF，需要使用 httpOnly 来使客户端脚本无法访问到 cookie，才能保证 token 安全。")])])])])]),t._v(" "),s("li",[s("p",[t._v("Token 优点与缺点")]),t._v(" "),s("ul",[s("li",[t._v("优点：\n"),s("ul",[s("li",[t._v("Cookie 是不允许垮域访问的，而 token 可避开同源策略")]),t._v(" "),s("li",[t._v("因为不需要 cookie 了，所以 token 可以避免 CSRF 攻击")]),t._v(" "),s("li",[t._v("解决 session 扩展性问题，Token 可以是无状态的，可以在多个服务间共享\n"),s("ul",[s("li",[t._v("token 不需要在服务端去保留用户的认证信息或者会话信息，服务器端只需要根据定义的规则校验这个 token 是否合法就行，这就意味着基于 token 认证机制的应用不需要去考虑用户在哪一台服务器登录了")])])])])]),t._v(" "),s("li",[t._v("缺点：\n"),s("ul",[s("li",[t._v("Token 相比于 session-cookie 来说就是一个"),s("code",[t._v("时间换空间")]),t._v("的方案。token 需要服务端花费更多的时间和性能来对 token 进行解密验证。")])])])])]),t._v(" "),s("li",[s("p",[t._v("💯其实有状态 token 和 sessionId 这种方式其实是差不多的，都是针对每个用户 UUID 生成唯一的字符串来匹配，都需要在服务端来存储。而无论前端是用 cookie 传，还是用 header.Authorization 传，对于后端来说也是差不多的。")]),t._v(" "),s("ul",[s("li",[t._v("但 sessionId 有一个致命问题在于，只会在登录认证的应用服务器上创建对应的 session 会话，而如果有多台服务器，比如做了负载均衡或轮询，则用户登到其他服务器就不行了，因为其他服务器上没有对应的 session 会话，就需要重新创建一个。")]),t._v(" "),s("li",[t._v("而有状态 token 使用 redis 集群来存储已经签发的 token 列表，使用 redis 集群来存而不在「内存」或「应用服务器」中存的原因是：\n"),s("ul",[s("li",[t._v("redis 集群相对于「应用服务器」来说，相当于单独的服务器，不会占用应用服务器资源，且方便扩容。")]),t._v(" "),s("li",[t._v("redis 集群相对于「内存」来说，相当于一个单独的共享空间，对于多个应用服务器可以共享。")])])])])]),t._v(" "),s("li",[s("p",[t._v("单点登录 SSO")])]),t._v(" "),s("li",[s("p",[t._v("第三方登录 OAuth2.0")])])])])])])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.im/post/5c6e6063f265da2da53ec8f3#heading-0",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端面试查漏补缺--(十) 前端鉴权"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://juejin.im/post/5cddae69f265da036207d036#heading-5",target:"_blank",rel:"noopener noreferrer"}},[t._v("JWT、OAuth 2.0、session 用户授权实战"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://juejin.im/post/5e055d9ef265da33997a42cc",target:"_blank",rel:"noopener noreferrer"}},[t._v("傻傻分不清之 Cookie、Session、Token、JWT"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://juejin.im/post/5a6c60166fb9a01caf37a5e5#heading-6",target:"_blank",rel:"noopener noreferrer"}},[t._v("Token 认证的来龙去脉"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://juejin.im/post/5ce272c1e51d45109b01b0f8",target:"_blank",rel:"noopener noreferrer"}},[t._v("跨域认证解决方案-JSON WEB TOKEN 讲解与实战"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[s("p",[t._v("前端安全")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("XSS")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("分类 - XSS 攻击可分为存储型、反射型和 DOM 型 三种")]),t._v(" "),s("ul",[s("li",[t._v("存储型、反射型 都属于服务端安全漏洞\n"),s("ul",[s("li",[s("code",[t._v("存储型")]),t._v("：攻击者将恶意代码提交到目标网站的"),s("code",[t._v("数据库中")]),t._v("。用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。前端执行了恶意代码。")]),t._v(" "),s("li",[t._v("反射型：跟存储型 XSS 的区别是："),s("strong",[t._v("存储型 XSS")]),t._v(" 的恶意代码"),s("code",[t._v("存在数据库里")]),t._v("，"),s("strong",[t._v("反射型 XSS")]),t._v(" 的恶意代码"),s("code",[t._v("存在 URL 里")]),t._v("。用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。")])])]),t._v(" "),s("li",[t._v("DOM 型 则完全是前端 JS 安全漏洞\n"),s("ul",[s("li",[t._v("把不可信的数据当作代码执行了")])])])])]),t._v(" "),s("li",[s("p",[t._v("防范")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("防止攻击者提交：输入过滤")]),t._v(" "),s("ul",[s("li",[t._v("但可能会产生乱码")])])]),t._v(" "),s("li",[s("p",[t._v("防止恶意代码被执行：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("对于服务端的两种：")]),t._v(" "),s("ul",[s("li",[t._v("改成纯前端渲染\n"),s("ul",[s("li",[t._v("代码和数据分开，但对于需要 SSR 的场景是不可行的")])])]),t._v(" "),s("li",[t._v("对 HTML 做充分转义\n"),s("ul",[s("li",[t._v("对于 HTML 转义通常只有一个规则，就是把 & < > \" ' / 这几个字符转义掉")])])])])]),t._v(" "),s("li",[s("p",[t._v("对于前端的 DOM 型：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("实际上就是网站前端 JavaScript 代码本身不够严谨，把不可信的数据当作代码执行了。\n在使用 .innerHTML、.outerHTML、document.write() 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 .textContent、.setAttribute() 等。")]),t._v(" "),s("p",[t._v("如果用 Vue/React 技术栈，并且不使用 v-html/dangerouslySetInnerHTML 功能，就在前端 render 阶段避免 innerHTML、outerHTML 的 XSS 隐患。")]),t._v(" "),s("p",[t._v("DOM 中的内联事件监听器，如 location、onclick、onerror、onload、onmouseover 等，< a> 标签的 href 属性，JavaScript 的 eval()、setTimeout()、setInterval() 等，都能把字符串作为代码运行。")])])])])])])])])])]),t._v(" "),s("li",[s("p",[t._v("中间人劫持，怎么防止。x-frame-option?白屏的喔，怎么办？也不一定嵌入 iframe 啊，可以嵌入脚本、图片，怎么阻止【描述】")]),t._v(" "),s("ul",[s("li",[t._v("https 也不是绝对安全的，中间人劫持攻击，中间人可以获取到客户端与服务器之间所有的通信内容。\n中间人截取客户端发送给服务器的请求，然后伪装成客户端与服务器进行通信；将服务器返回给客户端的内容发送给客户端，伪装成服务器与客户端进行通信。\n通过这样的手段，便可以获取客户端和服务器之间通信的所有内容。")]),t._v(" "),s("li",[t._v("使用中间人攻击手段，必须要让客户端信任中间人的证书，如果客户端不信任，则这种攻击手段也无法发挥作用。")]),t._v(" "),s("li",[t._v("造成中间人劫持的原因是 没有对服务端证书及域名做校验或者校验不完整，")])])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://juejin.im/post/5c6d142151882503b3271f4b",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端面试查漏补缺--(七) XSS 攻击与 CSRF 攻击"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://www.cxymsg.com/guide/security.html#%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8F%AF%E8%83%BD%E5%BC%95%E8%B5%B7%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E7%9A%84%E7%9A%84%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端安全面试题"),s("OutboundLink")],1)])])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("网络基础")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("http 报文组成")]),t._v(" "),s("ul",[s("li",[t._v("请求行（方法，url，协议版本）、请求头（常用的...）、空行、请求体")]),t._v(" "),s("li",[t._v("响应行（协议版本，状态码）、响应头、空行、响应体")])])]),t._v(" "),s("li",[s("p",[t._v("http 方法")]),t._v(" "),s("ul",[s("li",[t._v("无连接，无状态")]),t._v(" "),s("li",[t._v("get 与 post 区别（6 点）\n"),s("ul",[s("li",[t._v("回退时 get 不会重发请求，post 需要重发")]),t._v(" "),s("li",[t._v("get 请求默认会被浏览器缓存，post 不会")]),t._v(" "),s("li",[t._v("get 参数会完整保留在历史记录中，post 不会")]),t._v(" "),s("li",[t._v("get 传参在 url 中，post 在 request body 中")]),t._v(" "),s("li",[t._v("get 参数限制在 2kb，post 无限制")]),t._v(" "),s("li",[t._v("get 发一个 tcp 包，post 发两个 tcp 包，先发 headers 响应 100 continue，再发 data 响应 200")])])]),t._v(" "),s("li",[t._v("状态码\n"),s("ul",[s("li",[t._v("1xx 指示信息")]),t._v(" "),s("li",[t._v("2xx\n"),s("ul",[s("li",[t._v("200 成功")]),t._v(" "),s("li",[t._v("201 Created：请求成功，而且有一个新的资源已经依据请求的需要而建立，通常这是 PUT 方法得到的响应码")]),t._v(" "),s("li",[t._v("204 No content：表示请求成功，但响应报文不含实体的主体部分")]),t._v(" "),s("li",[t._v("206 Partial Content：客户端发送带 Range 头的 Get 请求，服务器会按照 Range 截取对应数据返回，通常用于 video 标签或 audio 标签请求一个大的视音频文件时，返回 range 部分")])])]),t._v(" "),s("li",[t._v("3xx\n"),s("ul",[s("li",[t._v("301 Moved Permanently：永久重定向")]),t._v(" "),s("li",[t._v("302 Found：临时性重定向\n"),s("ul",[s("li",[t._v("ajax302 重定向跨域问题")]),t._v(" "),s("li",[t._v("303 和 307 是 HTTP1.1 新加的，它们是对 HTTP1.0 中的 302 状态码的细化\n"),s("ul",[s("li",[t._v("303，POST 重定向为 GET")]),t._v(" "),s("li",[t._v("307，不会把 POST 转为 GET")])])])])]),t._v(" "),s("li",[t._v("304 Not Modified：协商缓存")])])]),t._v(" "),s("li",[t._v("4xx\n"),s("ul",[s("li",[t._v("400 Bad Request：客户端请求有语法错误")]),t._v(" "),s("li",[t._v("401 unauthorized：缺少身份认证信息\n"),s("ul",[s("li",[t._v("一般是忘加 Authorization 这个请求 Header")])])]),t._v(" "),s("li",[t._v("403 Forbidden：对被请求页面的访问被禁止\n"),s("ul",[s("li",[t._v("一般是服务端收到并验证了，该用户没有权限访问")]),t._v(" "),s("li",[t._v("在跨域时，也会出现\n"),s("ul",[s("li",[t._v("注意，如果使用了 CORS，非简单请求会先发 OPTIONS 请求，即使跨域也会返回 200，所以就不会出现 403 了")])])])])]),t._v(" "),s("li",[t._v("404 Not Found：请求资源不存在")])])]),t._v(" "),s("li",[t._v("5xx\n"),s("ul",[s("li",[t._v("500 Internal Server Error：服务器错误")]),t._v(" "),s("li",[t._v("503 Server Unavailable：服务器不可用，临时过载宕机")])])])])]),t._v(" "),s("li",[t._v("常用端口\n"),s("ul",[s("li",[t._v("http 80 、 https 443 、 DNS 53")])])]),t._v(" "),s("li",[t._v("http 工作模式：\n"),s("ul",[s("li",[t._v("普通模式（http1.0 中，默认使用的是短连接）：每个请求/应答，客户端和服务器都要新建一个连接，完成之后立即断开（HTTP 协议为无连接的协议）。")]),t._v(" "),s("li",[t._v("持久连接（http1.1 支持，且 1.1 默认使用长连接）：\n"),s("ul",[s("li",[t._v("Keep-alive 模式 又称持久连接或连接重用，指定方式为 Connection: keep-alive")]),t._v(" "),s("li",[t._v("keep-alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，keep-alive 功能避免了重新建立连接。\n"),s("ul",[s("li",[t._v("从 tcp/ip 层面来看，长连接需要发送心跳包维持连接，短连接的 tcp 连接会建立并断开")]),t._v(" "),s("li",[t._v("管线化需要长连接才支持（1.1 才支持），只有 get 和 head 可以进行管线化，打包多次请求一次返回多个响应")])])])])])])]),t._v(" "),s("li",[t._v("http2.0 与 http1.1 的显著不同点：\n"),s("ul",[s("li",[t._v("1.1：tcp/ip 请求 1 对 1，受 tcp/ip 本身并发数限制（同一域名下并发的 tcp 连接 2-10 个不等），速度慢")]),t._v(" "),s("li",[t._v("2.0：tcp/ip 请求 1 对多，分割成更小的帧请求，速度明显提升。2.0 的出现导致（譬如打包成精灵图，静态资源多域名拆分等）1.1 的优化方式都不重要了。")])])]),t._v(" "),s("li",[t._v("http2.0 特性\n"),s("ul",[s("li",[t._v("多路复用（即一个 tcp/ip 连接可以请求多个资源）；")]),t._v(" "),s("li",[t._v("首部压缩（http 头部压缩，减少体积）；\n"),s("ul",[s("li",[t._v("压缩原理：\n"),s("ul",[s("li",[t._v("使用"),s("code",[t._v("Hpack")]),t._v("思想，消息发送端和消息接受端共同维护一份"),s("em",[t._v("静态表")]),t._v("和一份"),s("em",[t._v("动态表")]),t._v("（这两个合起来充当"),s("strong",[t._v("字典")]),t._v("的角色），每次请求时，发送方根据字典的内容以及一些特定指定，编码压缩消息头部，接收方根据字典进行解码，并且根据指令来判断是否需要更新动态表。")]),t._v(" "),s("li",[t._v("更新的动态表有利于二次压缩时进一步提升压缩率")]),t._v(" "),s("li",[t._v("据此，可以在传输的过程，简化消息内容，从而降低消息的大小")])])])])]),t._v(" "),s("li",[t._v("服务器端推送 server push（服务端可以对客户端的一个请求发出多个响应，可以主动通知客户端）；")]),t._v(" "),s("li",[t._v("二进制分帧（在应用层跟传送层之间增加了一个二进制分帧层，改进传输性能，实现低延迟和高吞吐量）；")]),t._v(" "),s("li",[t._v("请求优先级（如果流被赋予了优先级，它就会基于这个优先级来处理，由服务器决定需要多少资源来处理该请求）。")])])]),t._v(" "),s("li",[t._v("https\n"),s("ul",[s("li",[t._v("为什么安全")]),t._v(" "),s("li",[t._v("采用什么加密方式\n"),s("ul",[s("li",[t._v("为什么一开始使用非对称加密，传输数据使用对称加密")])])]),t._v(" "),s("li",[t._v("https 通信过程")])])])])]),t._v(" "),s("li",[s("p",[t._v("TCP、UDP")]),t._v(" "),s("ul",[s("li",[t._v("工作原理")]),t._v(" "),s("li",[t._v("区别:\n"),s("ul",[s("li",[t._v("都是传输层协议，传输控制协议、用户数据包协议")]),t._v(" "),s("li",[t._v("是否建立连接")]),t._v(" "),s("li",[t._v("是否可靠传输")]),t._v(" "),s("li",[t._v("面向字节流与面向报文")]),t._v(" "),s("li",[t._v("首部字节 20 与 首部 8 字节开销小")]),t._v(" "),s("li",[t._v("一对一 与 1 对 1/1 对多/多对 1/多对多")])])]),t._v(" "),s("li",[t._v("基于 TCP 的应用层协议：http、ftp")]),t._v(" "),s("li",[t._v("基于 UDP 的应用层协议：dns、rip")]),t._v(" "),s("li",[t._v("TCP 如何保证可靠性\n"),s("ul",[s("li",[t._v("什么是建立全双工信道")]),t._v(" "),s("li",[t._v("数据截断为合理长度")]),t._v(" "),s("li",[t._v("对于收到的请求，给出响应")]),t._v(" "),s("li",[t._v("接收方校验包出错会丢弃，且不给出响应")]),t._v(" "),s("li",[t._v("发送方未收到响应，会超时重发")]),t._v(" "),s("li",[t._v("对于失序数据会重新排序，再交给应用层")]),t._v(" "),s("li",[t._v("重复数据会丢弃")]),t._v(" "),s("li",[t._v("提供「流量控制」，基于可变大小的滑动窗口协议")]),t._v(" "),s("li",[t._v("提供「拥塞控制」，通过慢启动、拥塞避免、快重传、快恢复等算法，防止网络风暴")])])]),t._v(" "),s("li",[t._v("什么是三次握手与四次挥手")])])]),t._v(" "),s("li",[s("p",[t._v("5 层网络协议栈")]),t._v(" "),s("ul",[s("li",[t._v("从应用层的发送 http 请求，到传输层通过什么是建立 tcp/ip 连接，再到网络层的 ip 寻址，再到数据链路层的封装成帧，最后到物理层的利用物理介质传输。服务端的接收就是反过来的步骤：\n"),s("ul",[s("li",[t._v("应用层(dns,http)：DNS 解析成 IP 并发送 http 请求；\n"),s("ul",[s("li",[s("em",[t._v("(表示层)，7 层插入")]),t._v("，web Socket 接口处于表示层。")]),t._v(" "),s("li",[s("em",[t._v("(会话层)，7 层插入")])])])]),t._v(" "),s("li",[t._v("传输层(tcp,udp)：建立 tcp 连接（什么是）；")]),t._v(" "),s("li",[t._v("网络层(IP,ARP)：IP 寻址；")]),t._v(" "),s("li",[t._v("数据链路层(PPP)：封装成帧；")]),t._v(" "),s("li",[t._v("物理层(利用物理介质传输比特流)：物理传输（然后传输的时候通过双绞线，电磁波等各种介质）。")])])]),t._v(" "),s("li",[t._v("完整的 OSI 七层框架，与 5 层相比，在传输层与应用层之间，多了会话层、表示层。")])])]),t._v(" "),s("li",[s("p",[t._v("DNS 域名解析")]),t._v(" "),s("ul",[s("li",[t._v("流程\n"),s("ul",[s("li",[t._v("本机先找缓存")]),t._v(" "),s("li",[t._v("没有时，递归向本地 dns 服务器，再由其迭代根、二级、主机域，最后递归返回")])])]),t._v(" "),s("li",[t._v("由于域名解析耗时，可通过 dns-prefetch 优化")])])])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("简述输入 URL 到页面显示全过程")]),t._v(" "),s("ul",[s("li",[t._v("DNS 解析")]),t._v(" "),s("li",[t._v("建立 tcp/ip 链接")]),t._v(" "),s("li",[t._v("发送 http 请求，判断是什么缓存类型")]),t._v(" "),s("li",[t._v("客户端拿到资源")]),t._v(" "),s("li",[t._v("开始渲染过程")])])]),t._v(" "),s("li",[s("p",[t._v("浏览器渲染")]),t._v(" "),s("ul",[s("li",[t._v("浏览器渲染过程\n"),s("ul",[s("li",[t._v("dom tree")]),t._v(" "),s("li",[t._v("css rule tree")]),t._v(" "),s("li",[t._v("render tree")]),t._v(" "),s("li",[t._v("layout")]),t._v(" "),s("li",[t._v("repaint")]),t._v(" "),s("li",[t._v("composite")])])]),t._v(" "),s("li",[t._v("reflow 与 repaint\n"),s("ul",[s("li",[t._v("触发 reflow 的情况：\n"),s("ul",[s("li",[t._v("resize")]),t._v(" "),s("li",[t._v("dom 结构改变")]),t._v(" "),s("li",[t._v("改变字体大小")]),t._v(" "),s("li",[t._v("最复杂的一种：获取某些属性时。很多浏览器会对回流做优化，会等到数量足够时做一次批处理回流，但是，除了 render 树的直接变化，当获取一些属性时，浏览器为了获得正确的值也会触发回流，这样使得 浏览器批处理优化无效，包括：\n"),s("ul",[s("li",[t._v("offset(Top/Left/Width/Height)")]),t._v(" "),s("li",[t._v("scroll(Top/Left/Width/Height)")]),t._v(" "),s("li",[t._v("cilent(Top/Left/Width/Height)")]),t._v(" "),s("li",[t._v("width，height")]),t._v(" "),s("li",[t._v("调用了 getComputedStyle()或者 IE 的 currentStyle\n"),s("ul",[s("li",[t._v("js 如何设置获取盒模型对应的宽和高（4 种）\n"),s("ul",[s("li",[t._v("其他两种兼容性不好，也不常用")]),t._v(" "),s("li",[t._v("window.getComputedStyle(dom).width")]),t._v(" "),s("li",[t._v("dom.getBoundingClientRect().width 相对于 viewport 边界")])])])])])])])])]),t._v(" "),s("li",[t._v("重排一定伴随着重绘，重绘却可以单独出现。")]),t._v(" "),s("li",[t._v("display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发现位置变化。")]),t._v(" "),s("li",[t._v("减少重排重绘：\n"),s("ul",[s("li",[t._v("避免循环操作 dom，创建一个 documentFragment 或 div")]),t._v(" "),s("li",[t._v("使用 display: none，触发两次")]),t._v(" "),s("li",[t._v("将需要多次重排的元素的 position 属性设为 absolute 或 fixed")]),t._v(" "),s("li",[t._v("避免多次读取 offset 等属性。无法避免则将它们缓存到变量")]),t._v(" "),s("li",[t._v("不要用 table 布局")])])])])])])]),t._v(" "),s("li",[s("p",[t._v("浏览器多进程")]),t._v(" "),s("ul",[s("li",[t._v("主进程：只有一个，负责协调、主控")]),t._v(" "),s("li",[t._v("插件进程")]),t._v(" "),s("li",[t._v("GPU 进程：3D 绘制，最多一个")]),t._v(" "),s("li",[t._v("浏览器内核（渲染进程）\n"),s("ul",[s("li",[t._v("每个 tab 页都是一个渲染进程")]),t._v(" "),s("li",[t._v("渲染进程又分为 5 大类线程\n"),s("ul",[s("li",[t._v("GUI 渲染线程")]),t._v(" "),s("li",[t._v("JS 引擎线程\n"),s("ul",[s("li",[t._v("GUI 渲染线程 与 JS 引擎线程 互斥\n由于 js 可以操作 DOM，如果同时修改元素属性并同时渲染界面(即 JS 线程和 GUI 线程同时运行)，会导致渲染线程前后获得的元素可能不一致。因此，为了防止渲染出现不可预期的结果，浏览器设定 GUI 渲染线程和 JS 引擎线程为互斥关系")])])]),t._v(" "),s("li",[t._v("事件触发线程")]),t._v(" "),s("li",[t._v("定时器线程")]),t._v(" "),s("li",[t._v("异步 http 请求线程")])])]),t._v(" "),s("li",[t._v("什么是 Event Loop（事件循环）\njs 分为两种任务，一种是"),s("em",[t._v("同步任务")]),t._v("（synchronous），另一种是"),s("em",[t._v("异步任务")]),t._v("（asynchronous）。\n"),s("em",[t._v("同步任务")]),t._v("都在"),s("code",[t._v("JS引擎线程")]),t._v("上执行，形成一个"),s("code",[t._v("执行栈")]),t._v("；\njs 通过「任务队列」来实现异步回调，"),s("code",[t._v("事件触发线程")]),t._v("管理一个"),s("code",[t._v("任务队列")]),t._v("（task queue）；\n"),s("em",[t._v("异步任务")]),t._v("触发条件达成，会由"),s("code",[t._v("定时器线程")]),t._v("或"),s("code",[t._v("异步http请求线程")]),t._v("将回调事件放到"),s("code",[t._v("任务队列")]),t._v("中；\n执行栈中所有同步任务执行完毕，此时 JS 引擎线程空闲，系统会读取任务队列，将可运行的异步任务回调事件添加到执行栈中，开始执行。这个过程不断重复。")]),t._v(" "),s("li",[t._v("JS 引擎线程的执行栈中，包括宏任务、微任务\n"),s("ul",[s("li",[t._v("分类：\n"),s("ul",[s("li",[t._v("宏任务，可以理解成每次执行栈中执行的代码\n"),s("ul",[s("li",[t._v("setTimeout")]),t._v(" "),s("li",[t._v("setInterval")]),t._v(" "),s("li",[t._v("setImmediate")]),t._v(" "),s("li",[t._v("UI rendering（比如一些改变页面 css 的 js 代码任务）")]),t._v(" "),s("li",[t._v("script")]),t._v(" "),s("li",[t._v("I/O")])])]),t._v(" "),s("li",[t._v("微任务，可以理解成 当前宏任务执行过程中所产生的微小任务，并在当前宏任务执行结束时立即执行\n"),s("ul",[s("li",[t._v("Promise.then()或 catch()")]),t._v(" "),s("li",[t._v("Promise 为基础开发的其它技术，比如 fetch API")]),t._v(" "),s("li",[t._v("process.nextTick（Node 独有的）")]),t._v(" "),s("li",[t._v("V8 的垃圾回收过程")]),t._v(" "),s("li",[t._v("MutationObserver")])])])])]),t._v(" "),s("li",[t._v("顺序（由于互斥）：\n"),s("ul",[s("li",[t._v("宏任务--\x3e(可能由当前宏任务所产生的微任务)--\x3e渲染--\x3e宏任务--\x3e(可能由当前宏任务所产生的微任务)--\x3e渲染--\x3e...")])])])])])])])])]),t._v(" "),s("li",[s("p",[t._v("浏览器工作原理")]),t._v(" "),s("ul",[s("li",[t._v("线程和进程的区别\n"),s("ul",[s("li",[t._v("进程是"),s("code",[t._v("资源分配的最小单位")]),t._v("，线程是"),s("code",[t._v("CPU调度（即程序执行）的最小单位")]),t._v("；")]),t._v(" "),s("li",[t._v("一个进程可以包含多个线程，"),s("strong",[t._v("每个进程有自己的独立内存空间，不同进程间数据很难共享")]),t._v("；")]),t._v(" "),s("li",[s("strong",[t._v("同一进程下不同线程间共享")]),t._v("全局变量、静态变量，数据很易共享；")]),t._v(" "),s("li",[t._v("进程要比线程消耗更多的计算机资源；")]),t._v(" "),s("li",[t._v("进程间不会相互影响，而一个线程挂掉将导致其他线程阻塞。")])])]),t._v(" "),s("li",[t._v("进程间通信 6 种：\n"),s("ol",[s("li",[t._v("管道 pipe")]),t._v(" "),s("li",[t._v("命名管道 namedpipe")]),t._v(" "),s("li",[t._v("消息队列 MessageQueue")]),t._v(" "),s("li",[t._v("信号量 Semaphore")]),t._v(" "),s("li",[t._v("共享内存 SharedMemory")]),t._v(" "),s("li",[t._v("套接字 Socket")])])]),t._v(" "),s("li",[t._v("线程间通信 3 种：\n"),s("ol",[s("li",[s("strong",[t._v("锁机制")]),t._v("：包括"),s("code",[t._v("互斥锁")]),t._v("、"),s("code",[t._v("条件变量")]),t._v("、"),s("code",[t._v("读写锁")])]),t._v(" "),s("li",[t._v("信号量机制")]),t._v(" "),s("li",[t._v("信号机制")])]),t._v(" "),s("ul",[s("li",[t._v("线程死锁的原因：线程竞争与进程推进顺序不对，具体需要同时满足 4 个必要条件")]),t._v(" "),s("li",[t._v("解决死锁的方法：加锁顺序、加锁时限、死锁检测")])])])])]),t._v(" "),s("li",[s("p",[t._v("浏览器存储")]),t._v(" "),s("ul",[s("li",[t._v("Cookie、Session、Token（Authorization） 区别")]),t._v(" "),s("li",[t._v("Cookie 属性设置")]),t._v(" "),s("li",[t._v("Cookie 与 WebStorage 区别")])])]),t._v(" "),s("li",[s("p",[t._v("跨域问题")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("同源策略：协议、域名、端口")])]),t._v(" "),s("li",[s("p",[t._v("常用跨域策略（8 种）")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("1、CORS（跨域资源共享）：原理是浏览器在识别 ajax 发送了跨域请求的时候，会将其拦截并在 http 头中加一个"),s("code",[t._v("origin字段")]),t._v("，允许跨域通信。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("CORS 请求分成两类，浏览器对这两种请求的处理是不一样的：简单请求、非简单请求。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("判断条件，需同时满足：")]),t._v(" "),s("ul",[s("li",[t._v("必须是三种方法之一：HEAD、GET、POST，")]),t._v(" "),s("li",[t._v("且 header 信息不超出某几种字段\n（同时满足上述两个条件，才是简单请求，比如 header 中常用的 Content-Type：application/json，还有鉴权的 Authorization，都属于非简单请求）")])])]),t._v(" "),s("li",[s("p",[t._v("简单请求流程：")]),t._v(" "),s("ul",[s("li",[t._v("浏览器自动在 header 添加一个 origin 字段，表明本次请求来自哪个源（协议、域名、端口）。")]),t._v(" "),s("li",[t._v("如果 origin 在指定范围内，则返回多个 Access-Control-xx 字段")]),t._v(" "),s("li",[t._v("如果 origin 不在指定范围，则响应 header 中不包含 Access-Control-Allow-Origin 字段，浏览器收到后就会抛出错误")])])]),t._v(" "),s("li",[s("p",[t._v("注意：默认情况下，Cookie 不包括在 CORS 请求之中。如果要传 cookie，")]),t._v(" "),s("ul",[s("li",[t._v("需要指定 Access-Control-Allow-Credentials: true，")]),t._v(" "),s("li",[t._v("且 Access-Control-Allow-Origin 不能用通配符*号，必须指定具体域名，")]),t._v(" "),s("li",[t._v("另外，开发者还需要在客户端对 XHR 对象中开启 withCredentials: true。")])])]),t._v(" "),s("li",[s("p",[t._v("非简单请求：除那 3 种方法，或者 header 中有常用的 Content-Type：application/json，以及常用在模块鉴权的 Authorization 字段，都是非简单请求")]),t._v(" "),s("ul",[s("li",[t._v('会先发送 一个 OPTIONS 的"预检"请求（里面也包含 origin 字段头信息），用来询问 所在的域名是否在服务器的许可名单之中，以及运行哪些方法和头信息。')]),t._v(" "),s("li",[t._v("如果 origin 在指定范围内，则返回多个 Access-Control-xx 字段\n"),s("ul",[s("li",[t._v("预检通过后之后，就可以发简单请求来完成真正的数据通信了")])])]),t._v(" "),s("li",[t._v("如果 origin 不在指定范围，则响应 header 中不包含 Access-Control-Allow-Origin 字段，浏览器收到后就会抛出错误")])])]),t._v(" "),s("li",[s("p",[t._v("非简单请求可以控制预检请求的发送频率，通过 Access-Control-Max-Age: 600 指定预检有效期")])])])])])]),t._v(" "),s("li",[s("p",[t._v("2、服务端代理")]),t._v(" "),s("ul",[s("li",[t._v("通过 nginx 反向代理或者 nodejs 代理请求，原理就是服务端是不受浏览器的同源策略限制的，因此可通过服务端先请求好资源，再从服务端拿来用。")]),t._v(" "),s("li",[t._v("开发环境下可以使用 webpack 的 http-proxy-middleware 中间件，在 devServer 配置 proxy: config.dev.proxyTable 实现代理跨域。")])])]),t._v(" "),s("li",[s("p",[t._v("3、JSONP")]),t._v(" "),s("ul",[s("li",[t._v("利用拥有“src”属性的标签的异步加载来实现（如"),s("code",[t._v("<script>,<img>,<iframe>")]),t._v("）")]),t._v(" "),s("li",[t._v("允许客户端传一个 callback 参数给服务器，然后服务器返回数据时会用这个 callback 参数作为函数名，包裹住 JSON 数据，返回客户端，客户端执行返回函数")]),t._v(" "),s("li",[t._v("Jsonp 只能发 get 请求")])])]),t._v(" "),s("li",[s("p",[t._v("4、Hash")]),t._v(" "),s("ul",[s("li",[t._v("利用的原理是“hash 的变动不会触发页面刷新”。")]),t._v(" "),s("li",[t._v("在 iframeB 页面通过监听 window.onhashchange 来拿到 A 页面传来的数据。")])])]),t._v(" "),s("li",[s("p",[t._v("5、postMessage")]),t._v(" "),s("ul",[s("li",[t._v("HTML5 规范中的新方法 window.postMessage()可以用于安全跨域通信。")])])]),t._v(" "),s("li",[s("p",[t._v("6、WebSocket")]),t._v(" "),s("ul",[s("li",[t._v("WebSocket 是一种服务器推送技术，支持双向通信，没有同源限制，即允许跨域。协议标识符是 ws（如果加密，则为 wss）。\nvar ws = new WebSocket('wss://xxx.xxxx.org')\nws.onopen = function() { ws.send() }\nws.onmessage = function() { ws.close() }\nws.onclose = function() {}")])])]),t._v(" "),s("li",[s("p",[t._v("7、document.domain")]),t._v(" "),s("ul",[s("li",[t._v("适用于：主域相同子域不同的页面")])])]),t._v(" "),s("li",[s("p",[t._v("8、window.name")]),t._v(" "),s("ul",[s("li",[t._v("在一个窗口的生命周期内，窗口载入的所有的页面都是共享一个 window.name 的")])])])])])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("ES")]),t._v(" "),s("ul",[s("li",[t._v("JS = ES + Web API\n"),s("ul",[s("li",[t._v("Web API：DOM 操作，BOM 操作，事件绑定，Ajax 等。。")])])]),t._v(" "),s("li",[t._v("nodejs = ES + nodejs API\n"),s("ul",[s("li",[t._v("nodejs API：处理 http，处理文件等。。")])])])])]),t._v(" "),s("li",[s("p",[t._v("ES6")]),t._v(" "),s("ul",[s("li",[t._v("let 和 const\n"),s("ul",[s("li",[t._v("ES6 中声明变量方式 6 种")]),t._v(" "),s("li",[t._v("块级作用域")]),t._v(" "),s("li",[t._v("暂时性死区（没有变量提升）")]),t._v(" "),s("li",[t._v("重复声明和赋值")])])]),t._v(" "),s("li",[t._v("普通函数和箭头函数\n"),s("ul",[s("li",[t._v("函数有变量提升吗？声明式会提升，表达式不会提升")]),t._v(" "),s("li",[t._v("箭头函数就是匿名函数，声明会提升，表达式不提升")]),t._v(" "),s("li",[t._v("箭头函数：\n"),s("ul",[s("li",[t._v("this 是定义时所在对象")]),t._v(" "),s("li",[t._v("内部无 this，是定义时外部代码块 this，不能用作构造函数，不能 new")]),t._v(" "),s("li",[t._v("无 arguments，用 rest 参数替代")]),t._v(" "),s("li",[t._v("不能用 yield")])])])])])])]),t._v(" "),s("li",[s("p",[t._v("ts")]),t._v(" "),s("ul",[s("li",[t._v("优点（得益于静态语言的优势）\n"),s("ul",[s("li",[t._v("TS 增加了代码的可读性和可维护性。\n"),s("ul",[s("li",[t._v("类型系统实际上是最好的文档，大部分的函数看看类型的定义就可以知道如何使用了；")]),t._v(" "),s("li",[t._v("可以在编译阶段就发现大部分错误，这总比在运行时候出错好；")]),t._v(" "),s("li",[t._v("增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等；")])])]),t._v(" "),s("li",[t._v("TS 具有包容性。\n"),s("ul",[s("li",[t._v("TypeScript 是 JavaScript 的超集，.js 文件可以直接重命名为 .ts 即可；")]),t._v(" "),s("li",[t._v("即使不显式的定义类型，也能够自动做出类型推论；")]),t._v(" "),s("li",[t._v("编译报错也还是会生成 js 文件；")])])])])]),t._v(" "),s("li",[t._v("type 和 interface 区别\n"),s("ul",[s("li",[t._v("interface 只能定义对象类型；type 声明的方式可以定义原始类型、组合类型")]),t._v(" "),s("li",[t._v("interface 可以实现接口的 extends/implements，而 type 不行")]),t._v(" "),s("li",[t._v("interface 可以实现接口的 merge，但是 type 不行")]),t._v(" "),s("li",[t._v("其实 type 只是一个类型别名，"),s("strong",[t._v("并不会产生类型")]),t._v("。所以其实 type 和 interface 其实不是同一个概念，其实他们俩不应该用来比较的，只是有时候用起来看着类似。")])])])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("列举各种排序算法 分别对应的优缺点和时间复杂度")]),t._v(" "),s("ul",[s("li",[t._v("冒泡、选择、插入 都是"),s("strong",[t._v("O(n^2)")])]),t._v(" "),s("li",[t._v("希尔、归并、快排、堆排序 都是"),s("strong",[t._v("O(nlogn)")])]),t._v(" "),s("li",[t._v("上面这几种中，冒泡插入归并是稳定的，其他都是不稳定的")])])]),t._v(" "),s("li",[s("p",[t._v("快排")]),t._v(" "),s("ul",[s("li",[t._v("手写")]),t._v(" "),s("li",[t._v("Array.prototype.sort()底层实现\n"),s("ul",[s("li",[t._v("V8： <=10 "),s("em",[t._v("插入排序 O(n)")]),t._v("； >10 "),s("em",[t._v("快排 O(nlogn)")])]),t._v(" "),s("li",[t._v("V8 引擎 7.0 版本之后，舍弃快排，因为其不稳定，使用 TimSort 混合排序算法，插入加归并")])])]),t._v(" "),s("li",[t._v("topK 问题\n"),s("ul",[s("li",[t._v("大顶堆，小顶堆：O(nlogk)")])])])])]),t._v(" "),s("li",[s("p",[t._v("js 原型链与对象")]),t._v(" "),s("ul",[s("li",[t._v("创建对象的 3 种方法\n"),s("ul",[s("li",[t._v("实现 Object.create")])])]),t._v(" "),s("li",[t._v("构造函数、实例、原型对象 间的关系")]),t._v(" "),s("li",[t._v("原型链的工作原理")]),t._v(" "),s("li",[t._v("实现 new 操作符")])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("js 基本数据类型")]),t._v(" "),s("ul",[s("li",[t._v("6 基本+1 引用(5 个)")]),t._v(" "),s("li",[t._v("原始类型的特性——不可变性")]),t._v(" "),s("li",[t._v("栈内存与堆内存")]),t._v(" "),s("li",[t._v("基本类型与引用类型的 复制、比较、值传递与引用传递：\n"),s("ul",[s("li",[t._v("ECMAScript 中所有的函数的参数都是按值传递的。")])])])])]),t._v(" "),s("li",[s("p",[t._v("盒模型")]),t._v(" "),s("ul",[s("li",[t._v("box-sizing:\n"),s("ul",[s("li",[s("code",[t._v("content-box")]),t._v("（"),s("code",[t._v("默认值")]),t._v("，"),s("code",[t._v("标准盒模型")]),t._v("）：width 与 height 只包括内容的宽和高")]),t._v(" "),s("li",[s("code",[t._v("border-box")]),t._v(" （"),s("code",[t._v("IE盒模型")]),t._v("，也叫 Quirks"),s("code",[t._v("怪异模型")]),t._v("）：")]),t._v(" "),s("li",[t._v("offsetWidth 水平方向 width + 左右 padding + 左右 border-width")]),t._v(" "),s("li",[t._v("clientWidth 水平方向 width + 左右 padding")]),t._v(" "),s("li",[t._v("margin 与 padding 值设置为百分数时，其值的计算参照 最近父级元素 width，注意，四个方向都是以父级的宽来百分比的")])])]),t._v(" "),s("li",[t._v("JS 如何设置获取盒模型对应的宽和高（4 种）")]),t._v(" "),s("li",[t._v("外边距重叠：垂直方向")]),t._v(" "),s("li",[t._v("BFC(块级格式化上下文)\n"),s("ul",[s("li",[t._v("特性\n"),s("ul",[s("li",[t._v("隔离了的独立容器——边距重叠解决方案")]),t._v(" "),s("li",[t._v("可以包含浮动元素，避免高度塌陷（计算 BFC 高度的时候，浮动元素也会参与计算）")])])]),t._v(" "),s("li",[t._v("创建 BFC\n"),s("ul",[s("li",[t._v("float 除 none")]),t._v(" "),s("li",[t._v("overflow 除 visible")]),t._v(" "),s("li",[t._v("绝对定位")]),t._v(" "),s("li",[t._v("display （inline-blocks，flex，inline-flex，table，table-cells，table-captions...)")])])])])])])]),t._v(" "),s("li",[s("p",[t._v("CSS3 种定位机制：普通流、浮动和绝对定位。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("display")]),t._v(" "),s("ul",[s("li",[t._v("行内元素："),s("strong",[t._v("典型行内元素")]),t._v("：span、a、label、input、textarea、select、 img、br、strong、em\n"),s("ul",[s("li",[t._v("不独占一行")]),t._v(" "),s("li",[t._v("元素的高度、宽度、行高及顶部和底部边距不可设置，宽高由包含的元素撑开")]),t._v(" "),s("li",[t._v("margin 在垂直方向上不生效；设置 padding 本身生效，但是没有把父级元素撑开")])])]),t._v(" "),s("li",[t._v("块级元素："),s("strong",[t._v("典型块级元素")]),t._v("：div、p、h1、form、ul、li\n"),s("ul",[s("li",[t._v("独占一行")]),t._v(" "),s("li",[t._v("元素的高度、宽度、行高以及顶和底边距都可设置，如果不主动设置，则与其父元素一致")])])]),t._v(" "),s("li",[t._v("line-height：1.5，line-height：150%以及 line-height：1.5em 的区别")])])]),t._v(" "),s("li",[s("p",[t._v("position")]),t._v(" "),s("ul",[s("li",[t._v("相对定位\n"),s("ul",[s("li",[t._v("relative：\n"),s("ul",[s("li",[s("code",[t._v("相对于自身原有位置进行偏移")]),t._v("，仍处于标准文档流之中。保有原来的 display 属性。")]),t._v(" "),s("li",[s("strong",[t._v("注意")]),t._v("："),s("code",[t._v("relative元素如果设置偏移后，它原来占据的文档流中的位置仍然会保留，不会被其他块浮动过来填补掉。并且，它的偏移也不会把别的块从文档流中原来的位置挤开，如果有重叠的地方它会重叠在其它文档流元素之上")]),t._v("。")])])])])]),t._v(" "),s("li",[t._v("绝对定位\n"),s("ul",[s("li",[t._v("fixed：以浏览器"),s("code",[t._v("可视窗口为基准")]),t._v("偏移")]),t._v(" "),s("li",[t._v("absolute：\n"),s("ul",[s("li",[t._v("在无已定位祖先元素时，以根节点"),s("code",[t._v("<html>")]),t._v("为基准偏移；")]),t._v(" "),s("li",[t._v("在有已定位祖先元素时，"),s("code",[t._v("相对于最近一级的、不是static定位的父元素")]),t._v("来定位。")])])])])]),t._v(" "),s("li",[t._v("奇技淫巧：fixed 相对于父元素定位\n"),s("ul",[s("li",[t._v("fixed 在特殊情况下不会相对于视口来定位，如果当前元素的父元素 transform 不为 none，不添加:top,bottom,left,right 样式，那么定位的元素就不是依据视口进行定位，而是依据父元素进行定位")])])])])]),t._v(" "),s("li",[s("p",[t._v("居中")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("垂直居中")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("对单行文本居中 height line-Height")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("模拟 div 表格居中 display：table-cell 与 vertical-align: center")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("绝对定位元素居中 无论知不知道宽高，都\nposition: absolute;\nleft: 50%;\ntop: 50%;\ntransform: translate(-50%, -50%);")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("flex 居中 align-items: center;")])])])])]),t._v(" "),s("li",[s("p",[t._v("水平居中")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("居中行内元素 text-align: center;")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("居中一个块级元素 width:200px; margin:0 auto;")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("绝对定位元素居中 无论知不知道宽高，都\nposition: absolute;\nleft: 50%;\ntop: 50%;\ntransform: translate(-50%, -50%);")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("flex 居中 justify-content: center;")])])])])])])])])]),t._v(" "),s("li",[s("p",[t._v("提升页面性能的方法（5 点）")]),t._v(" "),s("ul",[s("li",[t._v("资源压缩合并")]),t._v(" "),s("li",[t._v("善用浏览器缓存\n"),s("ul",[s("li",[t._v("缓存命中流程\n"),s("ul",[s("li",[t._v("强缓存\n"),s("ul",[s("li",[t._v("cache-control: public, private, no-store, no-cache")])])]),t._v(" "),s("li",[t._v("协商缓存")])])]),t._v(" "),s("li",[t._v("缓存具体原理\n"),s("ul",[s("li",[t._v("与 Last-Modified 不一样的是，当服务器返回 304 Not Modified 的响应时，由于 ETag 重新生成过，response header 中还会把这个 ETag 返回，即使这个 ETag 跟之前的没有变化。")]),t._v(" "),s("li",[t._v("字段优先级")]),t._v(" "),s("li",[t._v("强缓存如何重新加载浏览器缓存里面已经缓存过的资源")])])])])]),t._v(" "),s("li",[t._v("非核心代码异步加载（防止 js 阻塞解析）\n"),s("ul",[s("li",[t._v("3 种情况的加载执行图示")]),t._v(" "),s("li",[t._v("async 不确保执行顺序，defer 确保")]),t._v(" "),s("li",[t._v("defer 在 DOMContentLoaded 事件流触发前执行")]),t._v(" "),s("li",[t._v("DOMContentLoaded 与 onload 的区别")])])]),t._v(" "),s("li",[t._v("静态资源异步加载\n"),s("ul",[s("li",[t._v('rel="preload"，本页面可能用到的资源，一般立即加载')]),t._v(" "),s("li",[t._v('rel="prefetch"，下个页面可能用到的资源，一般空闲时才加载')]),t._v(" "),s("li",[t._v("prefetch 跟 preload 不同在于：用户从 A 页面进入 B 页面，preload 的内容会失效，而 prefetch 的内容可以在 B 页面使用。")])])]),t._v(" "),s("li",[t._v("CDN\n"),s("ul",[s("li",[t._v("CDN，内容分发网络。通过在 Internet 中增加一层新的网络架构，将网站的内容发布到最接近用户的网络“边缘”，使用户可以就近取得所需的内容，提高用户访问网站的响应速度。")])])]),t._v(" "),s("li",[t._v("DNS 预解析\n"),s("ul",[s("li",[t._v('rel="dns-prefetch"')]),t._v(" "),s("li",[t._v('标签 《meta http-equiv="x-dns-prefetch-control" content="on">在 https 下开启 a 标签的 dns 预解析')])])])])])]),t._v(" "),s("ul",[s("li",[t._v("PNG，JPG，GIF，WEBP 的区别\n"),s("ul",[s("li",[t._v("jpg 是有损压缩，适合照片，文件小。")]),t._v(" "),s("li",[t._v("png 是无损压缩，适合透明图，小图，做照片文件偏大。")]),t._v(" "),s("li",[t._v("gif 是一种位图文件格式，以 8 位色重现真色彩的图像。可以实现动画效果。")]),t._v(" "),s("li",[t._v("webp 格式是谷歌在 2010 年推出的图片格式，压缩率只有 jpg 的 2/3，大小比 png 小了 45%。\n"),s("ul",[s("li",[t._v("缺点是压缩的时间更久了，兼容性不好，目前谷歌和 opera 支持。")])])])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("CSS 样式")]),t._v(" "),s("ul",[s("li",[t._v("选择器优先级\n"),s("ul",[s("li",[t._v("内联样式 > ID 选择器 > 伪类 > 属性选择器 > 类选择器 > 标签选择器 > 通用选择器（*）")]),t._v(" "),s("li",[t._v("样式表中定义在后面的会覆盖之前的")])])]),t._v(" "),s("li",[t._v("CSS3 新增伪类\n"),s("ul",[s("li",[t._v("p:first-of-type：选择属于其父元素的首个 p 元素的每个 p 元素。")]),t._v(" "),s("li",[t._v("p:last-of-type：选择属于其父元素的最后 p 元素的每个 p 元素。")]),t._v(" "),s("li",[t._v("p:only-of-type：选择属于其父元素唯一的 p 元素的每个 p 元素。")]),t._v(" "),s("li",[t._v("p:only-child：选择属于其父元素的唯一子元素的每个 p 元素。")]),t._v(" "),s("li",[t._v("p:nth-child(2)：选择属于其父元素的第二个子元素的每个 p 元素。\n"),s("ul",[s("li",[t._v("p:nth-child(even)：偶数行")]),t._v(" "),s("li",[t._v("p:nth-child(odd)：奇数行")]),t._v(" "),s("li",[t._v("p:nth-child(2n)：偶数行")]),t._v(" "),s("li",[t._v("p:nth-child(2n+1)：奇数行")]),t._v(" "),s("li",[t._v("p:nth-child(-n+3)：n 为 1、2、3 的元素（-n+3>0 的元素）")])])]),t._v(" "),s("li",[t._v(":enabled :disabled：控制表单控件的禁用状态。")]),t._v(" "),s("li",[t._v(":checked：单选框或复选框被选中。")])])]),t._v(" "),s("li",[t._v("flex 布局\n"),s("ul",[s("li",[t._v("主轴、交叉轴")]),t._v(" "),s("li",[t._v("justify-content 主轴对齐方式")]),t._v(" "),s("li",[t._v("align-items 交叉轴对齐方式")]),t._v(" "),s("li",[t._v("align-content 交叉轴多根轴线时对齐方式")]),t._v(" "),s("li",[t._v("flex：1 （1 1 0）\n"),s("ul",[s("li",[t._v("flex-grow 1 放大")]),t._v(" "),s("li",[t._v("flex-shrink 1 缩小")]),t._v(" "),s("li",[t._v("flex-basis 0 占据空间基准")])])]),t._v(" "),s("li",[t._v("flex：auto (1 1 auto) 和 none (0 0 auto)。")]),t._v(" "),s("li",[t._v("两列布局\n.left {\nflex: 0 0 80px;\nwidth: 80px;\n}\n.right {\nflex: 1; // 等价于 1 1 0\n}")]),t._v(" "),s("li",[t._v("flex-basis 属性定义了在分配多余空间之前，item 占据的主轴空间（main size）。"),s("em",[t._v("浏览器根据这个属性，计算主轴是否有多余空间")]),t._v("。它的默认值为 auto，即项目的本来大小。")])])]),t._v(" "),s("li",[t._v("多种方式实现三栏布局\n"),s("ul",[s("li",[t._v("（1）浮动：")]),t._v(" "),s("li",[t._v("（2）绝对定位")]),t._v(" "),s("li",[t._v("（3）flex 弹性")]),t._v(" "),s("li",[t._v("（4）table 表格")]),t._v(" "),s("li",[t._v("（5）grid 网格：\n"),s("ul",[s("li",[t._v("grid-template-rows:")]),t._v(" "),s("li",[t._v("grid-template-column:")])])]),t._v(" "),s("li",[t._v("只有 flex 弹性布局 与 table 表格布局 是在高度超出后其他块的高度也跟随变高")])])]),t._v(" "),s("li",[t._v("最后一行左对齐问题\n"),s("ul",[s("li",[t._v("flex\n"),s("ul",[s("li",[t._v("案例：每一行列数是固定的\n"),s("ul",[s("li",[t._v("根据个数最后一个元素动态 margin")])]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 如果最后一行是3个元素 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".list:last-child:nth-child(4n - 1)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("margin-right")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("calc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("24% + 4% / 3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 如果最后一行是2个元素 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".list:last-child:nth-child(4n - 2)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("margin-right")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("calc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("48% + 8% / 3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("案例：子元素宽度不固定，最后一行左对齐\n"),s("ul",[s("li",[t._v("方法 1：最后一项 margin-right: auto")]),t._v(" "),s("li",[t._v("方法 2：::after 伪元素 flex:auto 或 flex:1")])]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 方法1 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".container:nth-of-type(1) > :last-child")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("margin-right")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" auto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 方法2 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".container:nth-of-type(2)::after")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("flex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" auto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 或者flex: 1 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("案例：每一行列数不固定\n"),s("ul",[s("li",[t._v("使用足够的空白标签进行填充占位")])])])])]),t._v(" "),s("li",[t._v("Grid 布局\n"),s("ul",[s("li",[t._v("天然有 gap 间隙，且天然格子对齐排布，因此，实现最后一行左对齐可以认为是天生的效果。")]),t._v(" "),s("li",[t._v("但是 repeat()函数兼容性不好，IE 不支持")])])])])]),t._v(" "),s("li",[t._v("经典布局 Sticky Footer\n"),s("code",[t._v('html <div class="wrapper"> <div class="content">\x3c!-- 页面主体内容区域 --\x3e</div> <div class="footer">\x3c!-- 需要做到 Sticky Footer 效果的页脚 --\x3e</div> </div>')]),t._v(" "),s("ul",[s("li",[t._v("方法 1：absolute（需指定 html、body 100% 的高度，wrapper 的 min 且 content 的 padding-bottom 需要与 footer 的 height 一致。）"),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("html,\nbody")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 100%"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".wrapper")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("position")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" relative"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("min-height")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 100%"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("padding-bottom")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 50px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // padding-bottom预留footer高度\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("box-sizing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" border-box"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".footer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("position")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" absolute"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("bottom")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 50px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("方法 2：Flexbox（指定 flex 容器为纵向，content flex 1 自动占满可用空间）"),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("html")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 100%"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("body")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("min-height")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 100%"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" flex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("flex-direction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" column"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".content")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("flex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])])])]),t._v(" "),s("li",[s("p",[t._v("移动端问题")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("JSBridge 原理")]),t._v(" "),s("ul",[s("li",[t._v("实现原理（异步双向）\n"),s("ul",[s("li",[t._v("JavaScript 调用 Native\n"),s("ul",[s("li",[s("ol",[s("li",[t._v("注入 API（推荐）")])]),t._v(" "),s("ul",[s("li",[t._v("webView.window[funcName] = NativeSomeFunc")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("拦截 URL SCHEME")])]),t._v(" "),s("ul",[s("li",[t._v("例如 iframe.src，Native 拦截后根据 URL 参数去做操作")])])])])]),t._v(" "),s("li",[t._v("Native 调用 JavaScript\n"),s("ul",[s("li",[t._v("执行拼接 JavaScript 字符串，JavaScript 的方法必须在全局的 window 上")])])])])])])]),t._v(" "),s("li",[s("p",[t._v("fastClick")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("解决的问题（在 H5 端）")]),t._v(" "),s("ul",[s("li",[t._v("手动点击与真正触发 click 事件会存在 300ms 的延迟\n"),s("ul",[s("li",[t._v("延迟的存在是因为浏览器想知道你是否在进行双击操作，如果是双击，移动端会缩放")])])]),t._v(" "),s("li",[t._v("点击穿透问题（点击行为会穿透元素触发非父子关系元素的事件）\n"),s("ul",[s("li",[t._v("点击穿透是因为 300ms 延迟触发时的副作用。")]),t._v(" "),s("li",[t._v("具体穿透现象：\n比如点击弹窗浮层关闭按钮时，也点击了浮层下页面上对应位置的元素（正常是不应该点击到页面上的对应的元素的）\n之所以说点击穿透是 300ms 延迟触发的副作用，可通过如下过程分析得出：\n手指触碰到屏幕时，触发 touchstart , 弹窗隐藏（这里就已经隐藏了，而如果不是双击，click 可能在 300ms 后才触发）\n手指按上时，可能会有短暂的停留和轻微的移动，触发 touchmove\n手指离开屏幕时，触发 touchend\n等待 300ms 后，看用户在此时间内是否再次触摸屏幕，如果没有\n300ms 后，此时弹窗已消失，浏览器在用户手指离开的位置触发 click 事件，所以点到了页面上的元素")])])])])]),t._v(" "),s("li",[s("p",[t._v("fastclick 原理:")]),t._v(" "),s("ul",[s("li",[t._v("在检测到 touchend 事件的时候，会通过 DOM 自定义事件立即触发模拟一个 click 事件，并把浏览器在 300ms 之后真正的 click 事件阻止掉\n"),s("ul",[s("li",[t._v("移动端，当用户点击屏幕时，会依次触发 touchstart，touchmove(0 次或多次)，touchend，mousemove，mousedown，mouseup，click。即【touch 事件】【mouse 事件】【click 事件】")]),t._v(" "),s("li",[t._v("touchmove 只有当手指在屏幕发生移动的时候才会触发 touchmove 事件。"),s("strong",[t._v("在 touchstart ，touchmove 或者 touchend 事件中的任意一个调用 event.preventDefault，mouse 事件 以及 click 事件将不会触发。")])])])]),t._v(" "),s("li",[t._v("具体实现：\n"),s("ul",[s("li",[s("code",[t._v("在 touchend 阶段 调用 event.preventDefault")]),t._v("，然后通过 "),s("code",[t._v("document.createEvent 创建一个 MouseEvents，然后 通过 event​Target​.dispatch​Event 触发对应目标元素上绑定的 click 事件。")])]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5ce764a2f265da1b8c19645a#heading-3",target:"_blank",rel:"noopener noreferrer"}},[t._v("2019 再聊移动端 300ms 延迟及 fastClick 原理解析"),s("OutboundLink")],1)])])])])]),t._v(" "),s("li",[s("p",[t._v("其他解决点击穿透问题的方案：")]),t._v(" "),s("ol",[s("li",[t._v("pointer-events，让被覆盖元素（下层元素 box）短时间内无法触发 click\nCSS3 的 pointer-events 属性有很多值，有用的主要是 auto（与不设置一样） 和 none（元素不再是 target）"),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听touchstart事件，让下方的box元素先 pointer-events: none。。。延迟350ms后再改回auto")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".mask"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"touchstart"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mask-touchstart"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("css")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"display"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"none"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//让被覆盖元素无法响应click")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".box"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("css")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pointer-events"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"none"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//恢复被覆盖元素")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".box"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("css")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pointer-events"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"auto"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("设置蒙层 mask 消失的延迟\ntouch 后延迟 350ms 再隐藏 mask。先把透明度设置为 0，解决视觉层面的效果，在设置定时器延迟，让蒙层元素消失"),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听touchstart事件，让mask的透明度先设为0，并延迟350ms后再 display: none")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".mask"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"touchstart"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mask-touchstart"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("css")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"opacity"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".mask"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("css")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"display"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"none"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("350")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/leftJS/p/11095226.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("点击穿透问题的方案"),s("OutboundLink")],1)])])])])])])]),t._v(" "),s("li",[s("p",[t._v("移动端适配")]),t._v(" "),s("ul",[s("li",[t._v("基本概念：\n"),s("ul",[s("li",[t._v("物理像素(physical pixel)：物理像素又被称为设备像素，显示设备中一个"),s("strong",[t._v("最微小的物理部件")]),t._v("；")]),t._v(" "),s("li",[t._v("设备独立像素(density-independent pixel，简称 DIPs)：设备独立像素也称为"),s("code",[t._v("密度无关像素")]),t._v("，可以认为是计算机"),s("strong",[t._v("坐标系统中的一个点")]),t._v("，程序使用的虚拟像素(比如说 CSS 像素)，然后由相关系统转换为物理像素。")]),t._v(" "),s("li",[s("code",[t._v("设备像素比")]),t._v("(device pixel ratio，简称为"),s("code",[t._v("dpr")]),t._v(")：设备像素比 ＝ 物理像素 / 设备独立像素(即 CSS 像素)；\n"),s("ul",[s("li",[t._v("在 JS 中获取 dpr：window.devicePixelRatio。")]),t._v(" "),s("li",[t._v("在 CSS 中，通过-webkit-device-pixel-ratio，-webkit-min-device-pixel-ratio 和 -webkit-max-device-pixel-ratio 进行媒体查询。\n"),s("code",[t._v('<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"></meta>')])])])])])]),t._v(" "),s("li",[t._v("适配方案\n"),s("ol",[s("li",[t._v("lib-flexible 手淘 H5\n"),s("ul",[s("li",[t._v("rem 就是相对于根元素"),s("code",[t._v("<html>")]),t._v("的 font-size 来做计算。")]),t._v(" "),s("li",[t._v("基准：750 设计稿；")]),t._v(" "),s("li",[t._v("通过 Hack 手段来根据设备的 dpr 值相应改变"),s("code",[t._v("<meta>")]),t._v("标签中 viewport 的值\n"),s("ul",[s("li",[t._v("根据 dpr 的值来修改 viewport 实现 1px 的线")]),t._v(" "),s("li",[t._v("根据 dpr 的值来修改 html 的 font-size，从而使用 rem 实现等比缩放")]),t._v(" "),s("li",[t._v("使用 Hack 手段用 rem 模拟 vw 特性")])])]),t._v(" "),s("li",[t._v("与 rem 相对的，"),s("code",[t._v("em")]),t._v("是相对于"),s("code",[t._v("父级元素font-size")]),t._v("来计算大小的，em 会继承父级元素的字体大小，浏览器默认字体高为 16px，默认 1em=16px*")])])]),t._v(" "),s("li",[t._v("Viewport（vw）\n"),s("ul",[s("li",[t._v("以前的 Flexible 方案是通过 JS 来模拟 vw 的特性，但目前，vw 已经得到了众多浏览器的支持，因此可以直接考虑将 vw 单位运用于我们的适配布局中。\n"),s("ul",[s("li",[t._v("vw：是 Viewport's width 的简写,1vw 等于 window.innerWidth 的 1%")]),t._v(" "),s("li",[t._v("vh：和 vw 类似，是 Viewport's height 的简写，1vh 等于 window.innerHeight 的 1%")]),t._v(" "),s("li",[t._v("vmin：vmin 的值是当前 vw 和 vh 中较小的值")]),t._v(" "),s("li",[t._v("vmax：vmax 的值是当前 vw 和 vh 中较大的值")]),t._v(" "),s("li",[t._v("如果 window.innerHeight > window.innerWidth 则 vmin 取百分之一的 window.innerWidth，vmax 取百分之一的 window.innerHeight 计算。")])])]),t._v(" "),s("li",[t._v("使用 vw 来实现页面的适配，并且通过 PostCSS 的插件"),s("code",[t._v("postcss-px-to-viewport")]),t._v("把 px 转换成 vw。这样的好处是，我们在撸码的时候，不需要进行任何的计算，你只需要根据设计图写 px 单位")]),t._v(" "),s("li",[t._v("为了更好的实现长宽比，特别是针对于 img、video 和 iframe 元素，通过 PostCSS 插件"),s("code",[t._v("postcss-aspect-ratio-mini")]),t._v("来实现，在实际使用中，只需要把对应的宽和高写进去即可")]),t._v(" "),s("li",[t._v("对于 "),s("code",[t._v("1px")]),t._v(" 是不建议将其转换成对应的 vw 单位的，但在 Retina 下，我们始终是需要面对如何解决 1px 的问题。 - 为了解决 1px 的问题，使用 PostCSS 插件"),s("code",[t._v("postcss-write-svg")]),t._v("，自动生成 border-image 或者 background-image 的图片\n缺点： - px 转换成 vw 单位，多少还会存在一定的像素差，毕竟很多时候无法完全整除。 - 当容器使用 vw 单位，margin 采用 px 单位时，很容易造成整体宽度超过 100vw，可以使用 calc()函数解决 vw 和 px 混合使用的问题。")])])])])])])]),t._v(" "),s("li",[s("p",[t._v("1px border 问题")]),t._v(" "),s("ul",[s("li",[t._v("产生原因：由于不同的手机有不同的 CSS 像素密度，所以设备独立像素（css 像素）中的 1px 并不等于设备的物理像素的 1px。所以当你写 1px 样式时，当 dpr 为 2 时，显示的就是 2px。")]),t._v(" "),s("li",[t._v("解决办法：\n"),s("ul",[s("li",[t._v("使用 viewport 设置 rem 基准（手淘使用的 lib-flexible 就是这种方式）"),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v("在devicePixelRatio = 2 时，输出viewport：\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n在devicePixelRatio = 3 时，输出viewport：\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("利用 伪类 + transform 实现\n"),s("ul",[s("li",[t._v("原理是：把原先元素相对定位，border 去掉，然后利用 :before 或者 :after 重做 border，设为绝对定位，并 transform 的 scale 缩小为对应 dpr 比例")])]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".border-1px")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("position")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" relative"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(";\n\t&::before")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("position")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" absolute"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("left")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("top")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 200%"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("border")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 1px solid red"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" red"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 200%"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("-webkit-transform-origin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" left top"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("transform-origin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" left top"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("-webkit-transform")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scale")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0.5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("transform")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scale")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0.5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("pointer-events")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" none"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 防止点击触发 */")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("box-sizing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" border-box"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token atrule"}},[s("span",{pre:!0,attrs:{class:"token rule"}},[t._v("@media")]),t._v(" screen "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("min-device-pixel-ratio")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("-webkit-min-device-pixel-ratio")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 300%"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 300%"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("-webkit-transform")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scale")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0.33"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("transform")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scale")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0.33"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("使用 border-image 实现"),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("border")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 1px solid transparent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("border-image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token url"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("url")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string url"}},[t._v('"./border-1px.png"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v(" 2 repeat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("使用 box-shadow 模拟边框")]),t._v(" "),s("li",[t._v("直接写 0.5px 边框\n"),s("ul",[s("li",[t._v("这种方法有的浏览器不支持，会识别为 0px")])])]),t._v(" "),s("li",[s("a",{attrs:{href:"http://blog.lemonss.net/2016/12/08/retina-1px-border/",target:"_blank",rel:"noopener noreferrer"}},[t._v("7 种方法解决移动端 Retina 屏幕 1px 边框问题"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5af136b8f265da0b7a20a40e#heading-5",target:"_blank",rel:"noopener noreferrer"}},[t._v("1px 边框解决方案总结"),s("OutboundLink")],1)])])])])])])]),t._v(" "),s("li",[s("p",[t._v("事件流")]),t._v(" "),s("ul",[s("li",[t._v("DOM2 级 事件规定的事件流包括 3 个阶段："),s("code",[t._v("事件捕获阶段")]),t._v("，"),s("code",[t._v("处于目标阶段")]),t._v("，"),s("code",[t._v("事件冒泡阶段")]),t._v("。")]),t._v(" "),s("li",[t._v("自定义事件 new Even('test')")]),t._v(" "),s("li",[t._v("事件代理")])])]),t._v(" "),s("li",[s("p",[t._v("事件循环")])]),t._v(" "),s("li",[s("p",[t._v("防抖和节流")]),t._v(" "),s("ul",[s("li",[t._v("防抖是将多次执行变为最后一次执行，节流是将多次执行变为在规定时间内只执行一次。\n"),s("ul",[s("li",[t._v("各自的原理")]),t._v(" "),s("li",[t._v("各自的场景")]),t._v(" "),s("li",[t._v("各自的代码实现")])])])])])]),t._v(" "),s("p",[t._v("js 编译器\njs 解释器")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("js 作用域")]),t._v(" "),s("ul",[s("li",[t._v("作用域的作用：作用域决定了内部变量的生命周期(即何时被释放)，以及哪一部分代码可以访问其中的变量")]),t._v(" "),s("li",[t._v("作用域链的用途：是保证对执行环境有权访问的所有变量和函数的有序访问。")]),t._v(" "),s("li",[t._v("作用域的工作流程\n"),s("ol",[s("li",[t._v("浏览器在首次载入脚本时，会创建全局执行上下文（"),s("code",[t._v("全局作用域")]),t._v("），并压入"),s("strong",[t._v("执行栈")]),t._v("栈顶（"),s("code",[t._v("全局执行上下文是永远不会被弹出的")]),t._v("）；")]),t._v(" "),s("li",[t._v("然后每进入其它作用域（即"),s("code",[t._v("函数作用域")]),t._v("）就创建对应的执行上下文并把它压入执行栈的顶部，一旦对应的上下文执行完毕，就从栈顶弹出，并将上下文控制权交给当前的执行栈。")]),t._v(" "),s("li",[t._v("这样依次执行（最终都会回到全局执行上下文）。")]),t._v(" "),s("li",[t._v("当前执行上下文执行完毕时，被弹出执行栈，然后如果其没有被引用（没有形成闭包），那么这个函数中用到的内存就会被垃圾处理器"),s("em",[t._v("自动回收")]),t._v("。")])])]),t._v(" "),s("li",[t._v("this 绑定规则（4 条）\n"),s("ul",[s("li",[t._v("默认绑定：绑定到全局对象 window 或 global，在严格模式下绑定到 undefined。")]),t._v(" "),s("li",[t._v("隐式绑定：由上下文对象调用，绑定到那个上下文对象（谁调用，指向谁）。\n"),s("ul",[s("li",[t._v("将隐式绑定的函数以回调的形式传递给另一个自定义函数、第三方库函数或者像 setTimeout 这样的内置 JavaScript 函数时，丢失执行上下文，回退到默认绑定规则")])])]),t._v(" "),s("li",[t._v("主动绑定：由 call 或者 apply(或者 bind)调用，绑定到指定的对象。")]),t._v(" "),s("li",[t._v("由 new 调用：绑定到新创建的实例对象。\n"),s("ul",[s("li",[t._v("构造函数忘记使用 new，则相当于使用实函数，创建全局变量")])])])])]),t._v(" "),s("li",[t._v("什么是闭包\n"),s("ul",[s("li",[t._v("创建闭包（2 种）")]),t._v(" "),s("li",[t._v("闭包的缺点\n"),s("ul",[s("li",[t._v("滥用闭包会造成内存的大量消耗")]),t._v(" "),s("li",[t._v("副作用，闭包函数只能取到外层函数变量的最终值。这个问题可以通过立即执行函数解决。\n"),s("ul",[s("li",[t._v("之所以拿到最终值，是因为"),s("code",[t._v("函数在预解释阶段，被闭包引用的原始数据也被存在了堆内存中")]),t._v("，等到函数执行阶段，循环变量已经达到最终值，才被传入执行。")]),t._v(" "),s("li",[t._v("使用立即执行函数包裹后，由于函数参数是按值传递的，所以就会将变量 i 的当前值复制给形参 index。")])])])])]),t._v(" "),s("li",[t._v("清除闭包常驻内存\n"),s("ul",[s("li",[t._v("当一个内存空间没有变量指向的时候就会被回收。所以直接 "),s("code",[t._v("foo = null")])])])]),t._v(" "),s("li",[t._v("垃圾回收机制\n"),s("ul",[s("li",[t._v("分类\n"),s("ul",[s("li",[t._v("引用计数")]),t._v(" "),s("li",[t._v("【标记清除】，js 引擎使用")])])]),t._v(" "),s("li",[t._v("存在问题：垃圾回收时停止响应其他操作\n"),s("ul",[s("li",[t._v("优化：【分代回收】，区分“临时”与“持久”对象，多回收临时对象，少回收持久对象。V8 引擎就是用分代回收。")])])])])]),t._v(" "),s("li",[t._v("内存泄漏的原因： -【循环引用】和【闭包】")]),t._v(" "),s("li",[t._v("变量和函数声明提升\n"),s("ul",[s("li",[s("strong",[t._v("函数整体在变量整体的下面")]),t._v("（即"),s("em",[t._v("变量提升的优先级更高，在最顶上")]),t._v("）。\n"),s("ul",[s("li",[t._v("第一阶段，先提升函数：对所有函数声明进行提升（忽略表达式和箭头函数）")]),t._v(" "),s("li",[t._v("第二阶段，再提升变量因此变量在更高的位置：对所有的变量进行提升，全部赋值为 undefined（如果已经存在，不赋值为 undefined）")])])])])])])])])]),t._v(" "),s("li",[s("p",[t._v("数据结构")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("数组")]),t._v(" "),s("ul",[s("li",[t._v("广义上数组和链表的区别：\n"),s("ul",[s("li",[s("ol",[s("li",[t._v("存储形式：数组是一块连续的空间，声明时就要确定长度。链表是一块可不连续的动态空间，长度可变，每个节点要保存相邻结点指针；")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("数据查找：数组的线性查找速度快，查找操作直接使用偏移地址。链表需要按顺序检索结点，效率低；")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("数据插入或删除：链表可以快速插入和删除结点，而数组则可能需要大量数据移动；")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("越界问题：链表不存在越界问题，数组有越界问题。")])])])])]),t._v(" "),s("li",[t._v("js 中数组的特点\n"),s("ul",[s("li",[t._v("js 中数组是由 Array 构造函数创建的对象，与 java 不同，有 3 个自己的特性")]),t._v(" "),s("li",[t._v("1、无类型：数组成员可以是任意类型，且同一个数组中可以有不同类型的成员")]),t._v(" "),s("li",[t._v("2、长度可变：数组长度可以动态变化，所以 js 中数组不存在越界问题")]),t._v(" "),s("li",[t._v("3、不连续性：数组成员可以不连续")])])])])]),t._v(" "),s("li",[s("p",[t._v("Set 和 Map")]),t._v(" "),s("ul",[s("li",[t._v("Set\n"),s("ol",[s("li",[t._v("成员不能重复")]),t._v(" "),s("li",[t._v("只有健值，没有健名，有点类似数组。")]),t._v(" "),s("li",[t._v("可以遍历，方法有 add, delete,has")])])]),t._v(" "),s("li",[t._v("weakSet\n"),s("ol",[s("li",[t._v("成员都是对象")]),t._v(" "),s("li",[t._v("成员都是弱引用，随时可以消失。 可以用来保存 DOM 节点，不容易造成内存泄漏")]),t._v(" "),s("li",[t._v("不能遍历，方法有 add, delete,has")])])]),t._v(" "),s("li",[t._v("Map\n"),s("ol",[s("li",[t._v("本质上是健值对的集合，类似集合")]),t._v(" "),s("li",[t._v("可以遍历，方法很多，可以跟各种数据格式转换")])])]),t._v(" "),s("li",[t._v("weakMap\n"),s("ol",[s("li",[t._v("只接受对象作为健名（null 除外），不接受其他类型的值作为健名")]),t._v(" "),s("li",[t._v("健名所指向的对象，不计入垃圾回收机制")]),t._v(" "),s("li",[t._v("不能遍历，方法同 get,set,has,delete")])])])])]),t._v(" "),s("li",[s("p",[t._v("for in")])]),t._v(" "),s("li",[s("p",[t._v("Object.keys")])]),t._v(" "),s("li",[s("p",[t._v("Object.getOwnProperty")])])])]),t._v(" "),s("li",[s("p",[t._v("继承")]),t._v(" "),s("ul",[s("li",[t._v("ES5\n"),s("ul",[s("li",[t._v("原型链继承\n"),s("ul",[s("li",[t._v("缺点：原型上任何类型的属性值都不会通过实例被重写，但是引用类型的属性值会受到实例的影响而修改")])])]),t._v(" "),s("li",[t._v("借用构造函数继承\n"),s("ul",[s("li",[t._v("缺点：只实现了部分继承，父类的原型对象上的属性无法被子类继承。")])])]),t._v(" "),s("li",[t._v("组合继承（原型链+借用构造函数）\n"),s("ul",[s("li",[t._v("特点：借用构造函数拷贝属性副本，与原型链继承共有属性")]),t._v(" "),s("li",[t._v("优化：\n"),s("ul",[s("li",[t._v("解决 Parent 执行两次")]),t._v(" "),s("li",[t._v("解决 s.constructor 指向问题")])])])])])])]),t._v(" "),s("li",[t._v("ES6\n"),s("ul",[s("li",[t._v("extends")]),t._v(" "),s("li",[t._v("super 的两种使用方式：函数、对象")]),t._v(" "),s("li",[t._v("ES6 继承与 ES5 继承机制比较\n"),s("ul",[s("li",[t._v("ES5 的继承，实质是先创造子类的实例对象 this，然后再将父类的方法添加到 this 上面（Parent.apply(this)）。")]),t._v(" "),s("li",[t._v("ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到 this 上面（所以必须先调用 super 方法），然后再用子类的构造函数修改 this。")])])])])])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("JS 模块化规范")]),t._v(" "),s("ul",[s("li",[t._v("1、CommonJS\n"),s("ul",[s("li",[t._v("同步加载、require/module.exports、以 node.js 为代表")])])]),t._v(" "),s("li",[t._v("2、AMD\n"),s("ul",[s("li",[t._v("异步加载、依赖前置")])])]),t._v(" "),s("li",[t._v("3、CMD\n"),s("ul",[s("li",[t._v("异步加载、依赖就近")])])]),t._v(" "),s("li",[t._v("4、UMD\n"),s("ul",[s("li",[t._v("commonjs+AMD")])])]),t._v(" "),s("li",[t._v("5、ES6Module\n"),s("ul",[s("li",[t._v("成为浏览器和服务器通用的模块解决方案")]),t._v(" "),s("li",[t._v("静态化、使得编译时就能确定模块的依赖关系、输入、输出")]),t._v(" "),s("li",[t._v("import，因为是在编译阶段执行，import 会 提升")]),t._v(" "),s("li",[t._v("export")]),t._v(" "),s("li",[t._v("目前 import/export 最终都是编译为 require/exports 来执行的")])])]),t._v(" "),s("li",[t._v("ES6 Module 与 CommonJS 两种模块化规范的比较\n"),s("ul",[s("li",[t._v("输出类型不同\n"),s("ul",[s("li",[t._v("CommonJS 输出 值的拷贝副本")]),t._v(" "),s("li",[t._v("ES6Module 输出 值的引用")])])]),t._v(" "),s("li",[t._v("执行时机不同\n"),s("ul",[s("li",[t._v("CommonJS 运行时加载")]),t._v(" "),s("li",[t._v("ES6Module 编译时输出接口")])])]),t._v(" "),s("li",[t._v("执行位置不同\n"),s("ul",[s("li",[t._v("require 可以理解为一个全局方法，就意味着可以在任何地方执行")]),t._v(" "),s("li",[t._v("import 因为在编译时执行，所以必须写在文件的顶部")])])]),t._v(" "),s("li",[t._v("性能差异\n"),s("ul",[s("li",[t._v("require 的性能相对于 import 稍低，因为 require 是在"),s("strong",[t._v("运行时才加载整个模块")]),t._v("并且还赋值给某个变量")]),t._v(" "),s("li",[t._v("import 只需要依据 import 中的接口在编译时引入指定模块所以性能稍高")])])]),t._v(" "),s("li",[t._v("循环加载时处理不同\n"),s("ul",[s("li",[t._v('CommonJS require 的时候，就会全部执行。一旦出现某个模块被"循环加载"，就只输出已经执行的部分，还未执行的部分不会输出。')]),t._v(" "),s("li",[t._v('ES6Module import 时成为指向被加载模块的引用，因此在"循环加载"时，也只能由开发者自己保证，真正取值的时候能够取到值。')])])])])])])]),t._v(" "),s("li",[s("p",[t._v("web worker")]),t._v(" "),s("ul",[s("li",[t._v("web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。用户可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。")]),t._v(" "),s("li",[t._v("分类\n"),s("ul",[s("li",[t._v("Dedicated Worker：专用的 worker，只能被创建它的 JS 访问")]),t._v(" "),s("li",[t._v("Shared Worker：共享的 worker，可以被同一域名下的 JS 访问")]),t._v(" "),s("li",[t._v("Service Worker：事件驱动的 worker，生命周期与页面无关。Service Worker 表示离线缓存文件，其本质是"),s("em",[t._v("Web 应用程序")]),t._v("与"),s("em",[t._v("浏览器")]),t._v("之间的"),s("strong",[t._v("代理服务器")]),t._v("。\n"),s("ul",[s("li",[t._v("可以在网络可用时作为浏览器和网络间的代理，也可以在离线或者网络极差的环境下使用离线的缓存文件。")])])])])]),t._v(" "),s("li",[t._v("Dedicated Worker 和 Shared Worker 专注于解决"),s("code",[t._v("「耗时的JS执行 影响 UI响应」")]),t._v("的问题。")]),t._v(" "),s("li",[t._v("Service Worker 则是为解决"),s("code",[t._v("「Web App 的用户体验不如 Native App」")]),t._v("的普遍问题。")])])]),t._v(" "),s("li",[s("p",[t._v("Webpack")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("所有文件都是模块，只认识 js 模块，所以要通过一些 loader 把 css、图片等文件转化成 webpack 认识的模块。")])]),t._v(" "),s("li",[s("p",[t._v("打包结果")]),t._v(" "),s("ul",[s("li",[t._v("app.js：团队编写的源码入口文件")]),t._v(" "),s("li",[t._v("vendor.js：源码依赖的第三方 vendor 代码")]),t._v(" "),s("li",[t._v("n.js：按数字索引的团队源码异步拆分部分")]),t._v(" "),s("li",[t._v("manifest.js，有些项目也直接命名为 runtime.js：这个 manifest 文件是最先加载的「指引文件」，runtime 通过其记录的模块标识符，处理和加载其他 bundle 文件，使其按要求进行加载和执行。\n"),s("ul",[s("li",[t._v("打包后 js 文件的加载顺序是先 manifest.js，再 vendor.js，之后才是 app.js")])])])])]),t._v(" "),s("li",[s("p",[t._v("module、chunk、bundle3 者的关系")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("module")]),t._v(" 在开发中的所有的资源(.js、.css、.png)都是 module，是 webpack 打包前的概念。")]),t._v(" "),s("li",[s("code",[t._v("chunk")]),t._v(" 是 webpack 在进行模块的依赖分析的时候，代码分割出来的代码块。一个 chunk 可能包含若干 module。")]),t._v(" "),s("li",[s("code",[t._v("bundle")]),t._v(" 最终输出到用户端的 chunk，被称之为 bundle；\n"),s("ul",[s("li",[t._v("一般一个 chunk 对应一个 bundle\n"),s("ul",[s("li",[t._v("只有在配置了 sourcemap 时，才会出现一个 chunk 对应多个 bundle 的情况。")]),t._v(" "),s("li",[t._v("而在 entry 指定数组，多个 chunk 会打包到一个 bundle 中。")])])])])])])]),t._v(" "),s("li",[s("p",[t._v("打包后文件")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("manifest.js")]),t._v(" 内部是一个 IIFE，称为"),s("code",[t._v("webpackBootstrap启动器函数")]),t._v("，这个函数会接受一个空数组（命名为 modules）作为参数。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("除"),s("strong",[t._v("manifest.js")]),t._v('外的所有其他 bundle，都往 window["webpackJsonp"]数组里面 push chunkId 和 含有的 modules。')])]),t._v(" "),s("li",[s("p",[t._v("而"),s("strong",[t._v("manifest.js")]),t._v("提供 3 个核心方法：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("1、提供全局函数 "),s("code",[t._v("webpackJsonpCallback(data)")]),t._v(' 来处理全局的 window["webpackJsonp"] 数组。')])]),t._v(" "),s("li",[s("p",[t._v("2、提供 "),s("code",[t._v("__webpack_require__(moduleId)")]),t._v("：作用就是加载执行对应的 module，并且缓存起来。")]),t._v(" "),s("ul",[s("li",[t._v("先判断下 installedModules 中是否有缓存，有则直接返回其 module.exports；")]),t._v(" "),s("li",[t._v("没有的话就执行，将 module 输出的内容挂载到 module.exports 对象上，同时缓存到 installedModules 中。")]),t._v(" "),s("li",[t._v("注意：每个 module 只会在最开始依赖到的时候加载一次，如果有继续依赖的 module，则递归执行，且加载过的依赖值也只执行一次。")])])]),t._v(" "),s("li",[s("p",[t._v("3、提供 "),s("code",[t._v("__webpack_require__.e(chunkId)")]),t._v("，也就是 "),s("code",[t._v("requireEnsure(chunkId)")]),t._v(" 异步加载模块，返回 promise。")]),t._v(" "),s("ul",[s("li",[t._v("简单地说，是用来 懒加载某个 chunk 的")]),t._v(" "),s("li",[t._v("传入一个 chunkId，先判断该 chunk 是否已被加载，是的话直接返回一个成功的 promise，并让 then 执行函数的 "),s("code",[t._v("__webpack_require__")]),t._v(" 对应的 module 即可；")]),t._v(" "),s("li",[t._v("否则，会动态创建一个 script 标签去加载对应 chunk，加载成功后会将该 chunk 中所有 module 注入到 webpackJsonp 中")])])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("bundle.js")]),t._v("，app.js 或 n.js 都属于此类。")]),t._v(" "),s("ul",[s("li",[t._v("每个 chunk 都是一个 IIFE 的 webpackJsonp 方法")]),t._v(" "),s("li",[t._v("webpackJsonp 的具体 3 个参数见上文，")]),t._v(" "),s("li",[t._v("其内部会使用到"),s("code",[t._v("__webpack_require__(moduleId)")]),t._v("去加载执行模块")]),t._v(" "),s("li",[t._v("如果有异步加载的模块，还会使用"),s("code",[t._v("__webpack_require__.e(chunkId)")]),t._v("去返回 promise")])])])])])])]),t._v(" "),s("li",[s("p",[t._v("webpack 构建流程：")]),t._v(" "),s("ul",[s("li",[t._v("1、"),s("code",[t._v("初始化")]),t._v("：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler。")]),t._v(" "),s("li",[t._v("2、"),s("code",[t._v("编译")]),t._v("：从 Entry 出发，针对每个 Module 串行调用对应的 Loader 去翻译文件的内容，再找到该 Module 依赖的 Module，递归地进行编译处理。")]),t._v(" "),s("li",[t._v("3、"),s("code",[t._v("输出")]),t._v("：将编译后的 Module 组合成 Chunk，将 Chunk 转换成文件，输出到文件系统中。")])])]),t._v(" "),s("li",[s("p",[t._v("关键词")]),t._v(" "),s("ul",[s("li",[t._v("bundle：webpack 打包出来的文件。")]),t._v(" "),s("li",[t._v("chunk：webpack 依赖分析的时候，分割出来的代码块。")]),t._v(" "),s("li",[t._v("entry：建立依赖图的起点，3 种方式配置：字符串、数组、对象。")]),t._v(" "),s("li",[t._v("output：\n"),s("ul",[s("li",[t._v("path：dist 文件夹")]),t._v(" "),s("li",[t._v("publicPath：浏览器加载代码的 url 通用部分，即 dist 文件后的路径")])])]),t._v(" "),s("li",[t._v("Loader 在 module.rules 中配置，对象数组，作为模块的解析规则\n"),s("ul",[s("li",[t._v("test、use、options")])])]),t._v(" "),s("li",[t._v("Plugin 在 plugins 中单独配置，类型为数组，每一项是一个 Plugin 的实例\n"),s("ul",[s("li",[t._v("Plugin 可以监听 Webpack 运行的生命周期中广播出的事件")])])])])]),t._v(" "),s("li",[s("p",[t._v("常用 loader 和 plugin：")]),t._v(" "),s("ul",[s("li",[t._v("loader：sass-loader, postcss-loader, css-loader, style-loader, file-loader, vue-loader, babel-loader")]),t._v(" "),s("li",[t._v("plugin：uglifyjs-webpack-plugin, terser-webpack-plugin（压缩 js）, define-plugin, CommonsChunkPlugin, SplitChunksPlugin, HashedModuleIdsPlugin, html-webpack-plugin, WebpackManifestPlugin, MiniCssExtractPlugin, HotModuleReplacementPlugin")])])]),t._v(" "),s("li",[s("p",[t._v("提高 webpack 开发效率")]),t._v(" "),s("ul",[s("li",[t._v("对打包速度分析：speed-measure-webpack-plugin")]),t._v(" "),s("li",[t._v("webpack-merge")]),t._v(" "),s("li",[t._v("HotModuleReplacementPlugin")])])]),t._v(" "),s("li",[s("p",[t._v("对 bundle 体积进行监控和分析")]),t._v(" "),s("ul",[s("li",[t._v("对打包体积分析：webpack-bundle-analyzer")]),t._v(" "),s("li",[t._v("VSCode 插件 Import Cost")])])]),t._v(" "),s("li",[s("p",[t._v("loader 执行顺序")]),t._v(" "),s("ul",[s("li",[t._v("1、默认情况下，会按照配置文件中的书写顺序 从下往上 处理")]),t._v(" "),s("li",[t._v("2、enforce 强制执行 loader 的作用顺序： - pre 代表在所有正常 loader 之前执行； - post 是所有 loader 之后执行； - inline 官方不推荐使用。")])])]),t._v(" "),s("li",[s("p",[t._v("生产环境使用 source map")]),t._v(" "),s("ul",[s("li",[t._v("map 文件只要不打开开发者工具，浏览器是不会加载的。")]),t._v(" "),s("li",[t._v("3 种处理方案：\n"),s("ul",[s("li",[t._v("hidden-source-map：借助第三方错误监控平台 Sentry 使用。")]),t._v(" "),s("li",[t._v("nosources-source-map：只会显示具体行数以及查看源代码的错误栈。安全性比 sourcemap 高。")]),t._v(" "),s("li",[t._v("sourcemap：通过 nginx 设置将 .map 文件只对白名单开放(公司内网)。")])])]),t._v(" "),s("li",[t._v("注意：避免在生产中使用 inline- 和 eval-，因为它们会增加 bundle 体积，并降低整体性能。")])])]),t._v(" "),s("li",[s("p",[t._v("文件指纹 chunkhash")]),t._v(" "),s("ul",[s("li",[t._v("指纹类别\n"),s("ul",[s("li",[t._v("Hash：即每次编译都不同。可以在测试环境打包的 JS 文件中使用'[name].[hash]'")]),t._v(" "),s("li",[s("code",[t._v("Chunkhash")]),t._v("：不同的 entry 会生出不同的 chunkhash。适用于"),s("code",[t._v("生产环境")]),t._v("打包后的 JS 文件'[name].[chunkhash]'，最大限度利用浏览器缓存。")]),t._v(" "),s("li",[t._v("Contenthash：根据文件内容来定义 hash，文件内容不变，则 contenthash 不变。")])])]),t._v(" "),s("li",[t._v("[chunkhash]不能和 HMR 一起使用，即开发环境因为不需要持久化缓存，故不要用[chunkhash]、[contenthash]、[hash]，直接用[name]")]),t._v(" "),s("li",[t._v("占位符指定长度 [chunkhash:8]")]),t._v(" "),s("li",[t._v("各类别适用文件\n"),s("ul",[s("li",[t._v("JS 文件的指纹设置'[name][chunkhash:8].js'\n"),s("ul",[s("li",[t._v("（"),s("em",[t._v("js 文件为什么不用 contenthash 呢")]),t._v("？）")]),t._v(" "),s("li",[t._v("因为 js 引入了 css 模块，如果 css 改变，css 使用的 contenthash，css 的指纹变了，但对于引入它的 js 模块来说，如果使用 contenthash，则 js 模块指纹不变。这样就会出错了，因为 js 无法引入更新后的 css 文件。")])])]),t._v(" "),s("li",[t._v("CSS 文件的指纹设置'[name][contenthash:8].css'\n"),s("ul",[s("li",[t._v("（"),s("em",[t._v("css 文件为什么不用 chunkhash 呢")]),t._v("？）")]),t._v(" "),s("li",[t._v("因为 js 引入了 css 模块，如果 js 改变，js 使用的是 chunkhash，则 chunkhash 会改变，那么其引入的 css 模块也会跟着改变指纹，但这是不合理的，因为 css 自身内容根本没变。")]),t._v(" "),s("li",[t._v("所以 css 要使用 contenthash，只与自身内容有关，无视被哪个 js 模块引用。")])])]),t._v(" "),s("li",[t._v("Images/Fonts 的指纹设置'[name][hash:8].[ext]', 注意，图片字体的 hash 与和 css 或 js 的 hash 概念不一样，是按内容生成的，不是按编译生成的。")])])])])]),t._v(" "),s("li",[s("p",[t._v("持久化缓存 caching（注意 id 问题）")]),t._v(" "),s("ul",[s("li",[t._v("通过指定：output.filename: '[name].[chunkhash].js'，内容改变名字才变")]),t._v(" "),s("li",[t._v("再配合代码分割：将 vendor.js 单独打包。")]),t._v(" "),s("li",[t._v("注意模块 id 变化问题：\n"),s("ul",[s("li",[t._v("异步模块 id 是计数器递增的，如果中间增加了新模块，之后的就要变")]),t._v(" "),s("li",[t._v("使用 HashedModuleIdsPlugin 插件来改变模块 ID 的计算方式，哈希值代替计数 ID")])])])])]),t._v(" "),s("li",[s("p",[t._v("如何将文件名发送到浏览器")]),t._v(" "),s("ul",[s("li",[t._v("HtmlWebpackPlugin")]),t._v(" "),s("li",[t._v("WebpackManifestPlugin")])])]),t._v(" "),s("li",[s("p",[t._v("webpack 动态加载就两种方式：")]),t._v(" "),s("ul",[s("li",[t._v("import()和 require.ensure，不过他们实现原理是相同的。")])])]),t._v(" "),s("li",[s("p",[t._v("code splitting")]),t._v(" "),s("ul",[s("li",[t._v("将项目代码中无需立即调用的代码，在代码构建时转变为异步加载的过程。")]),t._v(" "),s("li",[t._v("代码分割入手点（如何分割）\n"),s("ul",[s("li",[t._v("1、"),s("code",[t._v("入口文件方式")]),t._v("（Entry Points）")]),t._v(" "),s("li",[t._v("2、"),s("code",[t._v("动态引入/懒加载")]),t._v("（Dynamic Imports/Lazy-Loading）")]),t._v(" "),s("li",[t._v("3、"),s("code",[t._v("避免重复")]),t._v("（Prevent Duplication）\n"),s("ul",[s("li",[t._v("webpack3：CommonsChunkPlugin 提取公共代码块被（Webpack4 废弃了 CommonsChunkPlugin）\nnew webpack.optimize.CommonsChunkPlugin() - name: 'vendor', minChunks: module => module.context - name: 'manifest', minChunks: Infinity,")]),t._v(" "),s("li",[t._v("webpack4：SplitChunksPlugin 自动分割\nmodule.exports = {\noptimization: {\nsplitChunks: {\nchunks: 'all', // 智能将依赖项提取到独立的 chunk 中, vendor.js\n}\nruntimeChunk: true, // 提取 runtime.js 或叫 manifest.js\n},\n};")])])])])]),t._v(" "),s("li",[t._v("import()代码分割类型（两种）\n"),s("ul",[s("li",[t._v("静态代码分割")]),t._v(" "),s("li",[t._v("动态代码分割")])])]),t._v(" "),s("li",[t._v("魔法注释\n"),s("ul",[s("li",[t._v("在 import 关键字后的括号中使用指定注释，对分离出的 chunk 进行命名，指定异步加载模块不同打包模式，使异步模块预加载")])])]),t._v(" "),s("li",[t._v("Webpack 4 引入了 mode 这个选项（提供 development、production 两种模式，如果 mode 是 production，那 Webpack 4 就会开启 Code Splitting。")])])]),t._v(" "),s("li",[s("p",[t._v("webpack 文件监听原理")]),t._v(" "),s("ul",[s("li",[t._v("开启监听模式(两种方式)\n"),s("ul",[s("li",[s("ol",[s("li",[t._v("启动 webpack 命令时，带上 --watch 参数，浏览器需刷新")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("热更新: WDS 使用 HotModuleReplacementPlugin")])]),t._v(" "),s("ul",[s("li",[t._v("优点 1：WDS（webpack-dev-server）不刷新浏览器；")]),t._v(" "),s("li",[t._v("优点 2：WDS 不输出文件，⽽是放在内存中；")])])])])])])]),t._v(" "),s("li",[s("p",[t._v("热更新原理比较难讲清，只要记住上面的两个优点就行了。")])]),t._v(" "),s("li",[s("p",[t._v("优化 Webpack 的构建速度")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("1、"),s("code",[t._v("分包构建")]),t._v("（从 vendor.js 中将不太变动的库依赖单独处理，因为比如 axios 不经常变动，打包进 vendor 中造成包很大，并且经常打包也浪费了构建时间），两种方式：")]),t._v(" "),s("ul",[s("li",[t._v("1、extenals 外部扩展（CDN）\n"),s("ul",[s("li",[t._v("webpack 打包时，发现 jquery 定义在 externals，是外部引用的，则不会打包 jquery 代码，从而减少打包时间")])])]),t._v(" "),s("li",[t._v("2、DLLPlugin && DllReferencePlugin\n"),s("ul",[s("li",[t._v("Externals 会有多次引用的问题，所以也不好，DLL 则是 前置不经常更新的第三方库依赖包的构建，来提高真正的 build 和 rebuild 构建效率")]),t._v(" "),s("li",[t._v("只要第三方库没有变化，之后的每次 build 都只需要去打包自己的业务代码")]),t._v(" "),s("li",[t._v("webpack 通过 webpack.DllPlugin 与 webpack.DllReferencePlugin 两个内嵌插件实现此功能。\n"),s("ul",[s("li",[t._v("DllPlugin 进行分包，生成两个文件（bundlejs、bundle.mainifest.json）；")]),t._v(" "),s("li",[t._v("DllReferencePlugin 对 bundle.manifest.json 引用，让一些基本不会改动的代码先打包成静态资源，避免反复编译浪费时间。")])])])])])])]),t._v(" "),s("li",[s("p",[t._v("2、摇树优化 "),s("code",[t._v("Tree shaking")])]),t._v(" "),s("ul",[s("li",[t._v("在打包过程中检测工程中没有被引用过的模块并进行标记，在资源压缩时将它们从最终的 bundle 中去掉（只对 ES6 Modlue 生效）")]),t._v(" "),s("li",[t._v("原理：\n"),s("ul",[s("li",[t._v("tree-shaking 是因为"),s("em",[t._v("import 静态引入")]),t._v("的能力，得以"),s("em",[t._v("对文件内容进行浅层比较")]),t._v("，去掉未被使用的代码。")])])]),t._v(" "),s("li",[t._v("如何使用：\n"),s("ul",[s("li",[t._v("开发中尽可能使用 ES6 Module 的模块，提高 tree shaking 效率。")]),t._v(" "),s("li",[t._v("禁用 babel-loader 的模块依赖解析（会转成 commonjs 形式模块，就不能 tree shaking 了）")]),t._v(" "),s("li",[t._v("尽量使用 ESM 版的 lodash(lodash-es)，import { dobounce } from 'lodash-es'")]),t._v(" "),s("li",[t._v("使用插件，去除无用 CSS 代码")])])])])]),t._v(" "),s("li",[s("p",[t._v("3、作用域提升 "),s("code",[t._v("Scope hoisting")])]),t._v(" "),s("ul",[s("li",[t._v("scope hoisting 会把需要导入的文件直接移入导入者顶部 打包在一起，这就是所谓的 hoisting。\n"),s("ul",[s("li",[t._v("Scope hoisting 的收益\n"),s("ul",[s("li",[t._v("代码量明显减少，因为减少了函数声明语句")]),t._v(" "),s("li",[t._v("减少了内存开销")]),t._v(" "),s("li",[t._v("运行速度提升：因为不用多次使用"),s("strong",[t._v("webpack_require")]),t._v("调用模块。")])])]),t._v(" "),s("li",[t._v("Scope hoisting 的条件\n"),s("ul",[s("li",[t._v("必须使用 ES6 的语法")]),t._v(" "),s("li",[t._v("如何开启：new webpack.optimize.ModuleConcatenationPlugin()\n"),s("ul",[s("li",[t._v("当然开启了也不一定会打包在一起，因为有的是非 ES6 模块或使用异步 import()")])])])])])])])])]),t._v(" "),s("li",[s("p",[t._v("4、"),s("code",[t._v("压缩代码")])]),t._v(" "),s("ul",[s("li",[t._v("多进程并行压缩 webpack-paralle-uglify-plugin，开启 parallel 参数")]),t._v(" "),s("li",[t._v("压缩 CSS：mini-css-extract-plugin")])])]),t._v(" "),s("li",[s("p",[t._v("5、利用"),s("code",[t._v("缓存提升二次构建速度")])]),t._v(" "),s("ul",[s("li",[t._v("babel-loader 开启缓存（cacheDirectory：true）")]),t._v(" "),s("li",[t._v("terser-webpack-plugin：开启缓存（cache：true）")])])])])]),t._v(" "),s("li",[s("p",[t._v("webpack 常用配置技巧")]),t._v(" "),s("ul",[s("li",[t._v("省略文件后缀及配置别名："),s("code",[t._v("extensions")]),t._v("、"),s("code",[t._v("alias")])]),t._v(" "),s("li",[t._v("模块注入全局变量：使用 "),s("code",[t._v("ProvidePlugin")]),t._v(" 配置全局注入")])])]),t._v(" "),s("li",[s("p",[t._v("babel 转译过程：")]),t._v(" "),s("ul",[s("li",[t._v("parseing：babylon 进行解析得到 ES6 代码的 AST")]),t._v(" "),s("li",[t._v("transforming：plugin 用 babel-traverse 对 AST 转译得到新的 AST")]),t._v(" "),s("li",[t._v("generating：用 babel-generator 通过 新的 AST 树生成 ES5 代码")])])])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("前端路由模式")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("SPA：只有一个 HTML 的应用，利用 JS 动态的变换 HTML 的内容，从而来模拟多个视图间跳转。")]),t._v(" "),s("ul",[s("li",[t._v("优点：无需重复加载整个页面，前后端分离职责清晰，服务器压力小")]),t._v(" "),s("li",[t._v("缺点：首次加载耗时多，需要管理前进后退路由，SEO 难度较大")])])]),t._v(" "),s("li",[s("p",[t._v("前端路由：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("为 SPA 中的每个视图展示形式匹配一个特殊的 url。在刷新、前进、后退和 SEO 时均通过这个特殊的 url 来实现。")])]),t._v(" "),s("li",[s("p",[t._v("前端路由需要实现 2 点：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("能改变 url 但不让浏览器向服务器发送请求。")])]),t._v(" "),s("li",[s("strong",[t._v("可以监听到 url 的变化。")])])])]),t._v(" "),s("li",[s("p",[t._v("hash、history 模式都可以实现上述两点：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("hash 模式 原理")]),t._v(" "),s("ul",[s("li",[t._v("改变 hash，不会刷新页面，即 不会导致浏览器向服务器发送请求")]),t._v(" "),s("li",[t._v("hashchange 事件")])])]),t._v(" "),s("li",[s("p",[t._v("history 模式 原理")]),t._v(" "),s("ul",[s("li",[t._v("h5 提供了 history.pushState() 和 history.replaceState()，因此可以实现：改变 url 同时，不会刷新页面")]),t._v(" "),s("li",[t._v("如何监听呢？因为 history 的改变并不会触发任何事件，所以需要”曲线救国“，拦截所有可能触发 history 改变的情况，变相监听 history 的改变，\n"),s("ul",[s("li",[t._v("只有 4 种 history 改变途径\n"),s("ul",[s("li",[t._v("点击浏览器的前进或后退按钮；window.onpopstate")]),t._v(" "),s("li",[t._v("点击 a 标签；")]),t._v(" "),s("li",[t._v("在 JS 代码中触发 history.pushState 函数；")]),t._v(" "),s("li",[t._v("在 JS 代码中触发 history.replaceState 函数；")])])])])])])]),t._v(" "),s("li",[s("p",[t._v("history 模式为什么需要后端支持？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("history 在修改 url 后，虽然页面并不会刷新，但如果我们手动刷新，或通过 url 直接进入应用的时候，服务端是无法识别这个 url 的")])]),t._v(" "),s("li",[s("p",[t._v("单页应用，其他 url 服务器会 404")])]),t._v(" "),s("li",[s("p",[t._v("因此，需要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回单页应用的 html 文件。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  nginx配置修改，主要增加了：\n  ```bash\n  location / {\n      try_files $uri $uri/ @rewrites;\n  }\n  ```\n  try_files 是指当用户请求url资源时 www.xxx.com/xxx，try_files 会到硬盘资源根目录里找 xxx。\n  - 如果存在名为 xxx 的文件就返回；\n  - 如果找不到再找名为 xxx 的目录；\n  - 再找不到就会执行@rewrites。（$uri指找文件， $uri/指找目录）\n  ```\n  location @rewrites {\n      rewrite ^(.+)$ /index.html last;\n  }\n  ```\n  rewrite是nginx中的重定向指令。^(.+)$ 是重定向规则。/index.html重定向路径。\n")])])])])])]),t._v(" "),s("li",[s("p",[t._v("如何选择模式呢？")]),t._v(" "),s("ul",[s("li",[t._v("因为 history 是趋势，我们直接看 hash 的缺点就好了：\n"),s("ul",[s("li",[t._v("更丑；")]),t._v(" "),s("li",[t._v("会导致锚点功能失效；")]),t._v(" "),s("li",[t._v("相同 hash 值不会触发动作将记录加入到历史栈中，而 pushState 则可以。")])])])])])])])])]),t._v(" "),s("li",[s("p",[t._v("前端路由（重复了，需整理下）")]),t._v(" "),s("ul",[s("li",[t._v("hash 模式\n"),s("ul",[s("li",[s("code",[t._v("hash的变化不会向服务器发送请求，即不会刷新页面，但会触发网页跳转，即前进后退")]),t._v("，而且 hash 的改变会"),s("code",[t._v("触发 hashchange 事件")])])])]),t._v(" "),s("li",[t._v("history 模式\n"),s("ul",[s("li",[s("code",[t._v("history.pushState(state, title, url)")]),t._v(" 和 "),s("code",[t._v("history.replaceState()")]),t._v(" "),s("code",[t._v("可以改变 url 同时，不会刷新页面")])]),t._v(" "),s("li",[t._v("监听 url 变化需要通过监听 4 个方面：\n"),s("ul",[s("li",[t._v("监听前进、后退 "),s("code",[t._v("window.onpopstate")]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onpopstate")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"onpopstate"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" location"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pathname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("监听 a 标签点击")]),t._v(" "),s("li",[t._v("js 主动 history.pushState"),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"btn1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"click"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"page1"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"切换路由到"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"page1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\thistory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pushState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"page1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重要！！")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("js 主动 history.replaceState")])])]),t._v(" "),s("li",[t._v("后端支持，无论访问什么 url，都返回 index.html，并且前端需要添加匹配不到路由时展示 404 页面")])])]),t._v(" "),s("li",[t._v("hash 模式相比于 history 模式的优点、缺点：\n"),s("ul",[s("li",[t._v("优点就是更简单")]),t._v(" "),s("li",[t._v("缺点\n"),s("ul",[s("li",[t._v("更丑；")]),t._v(" "),s("li",[t._v("会导致锚点功能失效；")]),t._v(" "),s("li",[t._v("相同 hash 值不会触发动作将记录加入到历史栈中，而 pushState 则可以。")])])])])])])])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("SSR 服务端渲染和同构原理")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("为什么要服务端渲染（SSR）")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("避免首屏等待")]),t._v("，即 TTFP，首屏等待时间")]),t._v(" "),s("li",[s("code",[t._v("更好支持SEO")])])])]),t._v(" "),s("li",[s("p",[t._v("主流的 SSR 框架有：")]),t._v(" "),s("ul",[s("li",[t._v("NEXT.js，对应 React")]),t._v(" "),s("li",[t._v("Nuxt.js，对应 Vue")])])]),t._v(" "),s("li",[s("p",[t._v("传统 SSR 与 CSR 客户端渲染（SPA）")])]),t._v(" "),s("li",[s("p",[t._v("前端同构应用（SSR + SPA）：")]),t._v(" "),s("ul",[s("li",[t._v("第一次访问页面是服务端渲染，基于第一次访问，后续的交互就是 SPA 的效果和体验，还不影响 SEO。简单说就是一个前端项目里的组件，部分服务端渲染后输出，部分由客户端异步渲染，既保障网页渲染速度，也有利于搜索引擎 SEO。")])])]),t._v(" "),s("li",[s("p",[t._v("同构应用需要解决的 3 个问题")]),t._v(" "),s("ul",[s("li",[t._v("1、"),s("code",[t._v("路由同构")]),t._v("：双端路由如何维护\n"),s("ul",[s("li",[t._v("路由配置抽取出来 react-router-config")])])]),t._v(" "),s("li",[t._v("2、"),s("code",[t._v("数据预取同构")]),t._v("：获取数据的方法和逻辑写在哪里\n"),s("ul",[s("li",[t._v("可选方案：使用高阶组件给路由页面组件绑定数据获取方法，比如 withSSR(WrappedCompoennt, getInitialProps)")])])]),t._v(" "),s("li",[t._v("到这里，实现了双端的数据预取同构，但是数据也仅仅是服务端有，浏览器端是没有这个数据，浏览器会渲染出不同的结构替换服务端的渲染")]),t._v(" "),s("li",[t._v("3、"),s("code",[t._v("渲染同构")]),t._v("：如何复用 服务端 html\n"),s("ul",[s("li",[t._v("在服务端将预取的数据注入到浏览器，使浏览器端可以访问到。客户端进行渲染前，需要先将数据传入对应的组件，保证 props 的一致性。")]),t._v(" "),s("li",[t._v("我们的方案是直接挂在 html 中。")])])])])]),t._v(" "),s("li",[s("p",[t._v("SSR 之所以能够实现，"),s("strong",[t._v("本质上是因为虚拟 DOM 的存在")])])]),t._v(" "),s("li",[s("p",[t._v("SSR 生命周期注意点：（"),s("em",[t._v("mount 钩子都不支持 ssr 端")]),t._v("）")]),t._v(" "),s("ul",[s("li",[t._v("在 React 中，componentDidMount 只在客户端才会执行，在服务器端这个生命周期函数是不会执行的。即服务端不支持 componentDidMount。")]),t._v(" "),s("li",[t._v("在 Vue 中，服务端渲染只支持 beforCreate 和 created 两个钩子函数，不支持 mounted 这个钩子。")])])]),t._v(" "),s("li",[s("p",[t._v("其他要注意的问题")]),t._v(" "),s("ul",[s("li",[t._v("node 端没有 window 和 webstorage")]),t._v(" "),s("li",[t._v("React 通过 renderToString("),s("code",[t._v("<App />")]),t._v(")方法将应用代码转换成字符串，再替换到页面中占位符的位置。")]),t._v(" "),s("li",[t._v("ReactDOM.hydrate 会去复用原本已经存在的 DOM 节点，尝试在已有标记上绑定事件监听器。")]),t._v(" "),s("li",[t._v("SSR 是不支持异步组件的\n"),s("ul",[s("li",[t._v("我们的方案没有解决这个问题")])])]),t._v(" "),s("li",[t._v("SEO 支持（路由页动态生成 TDK）\n"),s("ul",[s("li",[t._v("采用 react-helmet 库")])])]),t._v(" "),s("li",[t._v("结合状态管理的 SSR 实现")])])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://juejin.im/post/5bc7ea48e51d450e46289eab#heading-0",target:"_blank",rel:"noopener noreferrer"}},[t._v("React 中同构（SSR）原理脉络梳理"),s("OutboundLink")],1)])])])]),t._v(" "),s("li",[s("p",[t._v("base64")]),t._v(" "),s("ul",[s("li",[t._v("作用：传输、存储和表示二进制。基于 64 个可打印的字符来表示二进制的数据的一种方法。可以用来加密但很简单。")]),t._v(" "),s("li",[t._v("编码原理")])])]),t._v(" "),s("li",[s("p",[t._v("git - git rebase 变基，合并多次本地 commit 记录，使得分支树是线性的\n如果你想要你的分支树呈现简洁，不罗嗦，线性的 commit 记录，那就采用 rebase\ngit rebase 操作实际上是将当前执行 rebase 分支的所有基于原分支提交点之后的 commit 打散成一个一个的 patch，并重新生成一个新的 commit hash 值，再次基于原分支目前最新的 commit 点上进行提交，并不根据两个分支上实际的每次提交的时间点排序，rebase 完成后，切到基分支进行合并另一个分支时也不会生成一个新的 commit 点，可以保持整个分支树的完美线性")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("    另外值得一提的是，当我们开发一个功能时，可能会在本地有无数次commit，而你实际上在你的master分支上只想显示每一个功能测试完成后的一次完整提交记录就好了，其他的提交记录并不想将来全部保留在你的master分支上，那么rebase将会是一个好的选择，他可以在rebase时将本地多次的commit合并成一个commit，还可以修改commit的描述等\n\n    git merge 操作合并分支会让两个分支的每一次提交都按照提交时间（并不是push时间）排序，并且会将两个分支的最新一次commit点进行合并成一个新的commit，最终的分支树呈现非整条线性直线的形式\n")])])])])])])])}),[],!1,null,null,null);n.default=v.exports}}]);