(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{444:function(t,s,a){t.exports=a.p+"assets/img/entry-node-of-loop.fcb13508.png"},641:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"链表中环的入口结点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#链表中环的入口结点"}},[t._v("#")]),t._v(" 链表中环的入口结点")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("leetcode - 142. 环形链表 II"),n("OutboundLink")],1)]),t._v(" "),n("h4",{attrs:{id:"_1、题目描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、题目描述"}},[t._v("#")]),t._v(" 1、题目描述")]),t._v(" "),n("p",[t._v("给定一个链表，返回链表开始入环的第一个节点。如果链表无环，则返回 null。")]),t._v(" "),n("p",[t._v("为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。")]),t._v(" "),n("p",[t._v("说明：不允许修改给定的链表。")]),t._v(" "),n("p",[t._v("示例 1：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：head = [3,2,0,-4], pos = 1\n输出：tail connects to node index 1\n解释：链表中有一个环，其尾部连接到第二个节点。\n")])])]),n("h4",{attrs:{id:"_2、思路"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、思路"}},[t._v("#")]),t._v(" 2、思路")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("第一步："),n("strong",[t._v("确定一个链表是否有环")]),t._v("。这一步就是"),n("code",[t._v("快慢指针法")]),t._v("，定义两个指针，同时从链表的头结点出发，快指针一次走两步，慢指针一次走一步。如若有环，两个指针必定相遇，也就是如果快指针反追上了慢指针，说明存在环（这里要注意，两指针相遇的地方一定在环中，但不一定是环的入口），如果快指针走到了链表的末尾（指向了NULL），则说明不存在环。")])]),t._v(" "),n("li",[n("p",[t._v("第二步："),n("strong",[t._v("找到环的入口点")]),t._v("。这还是可以"),n("code",[t._v("利用双指针")]),t._v("来解决，两个指针初始都指向头结点，如果我们可以知道环中的结点个数，假设为n，那么第一个指针先向前走n步，然后两个指针（另一个从头结点开始）同时向前，当两个指针再次相遇时，他们的相遇点正好就是环的入口点。")])])]),t._v(" "),n("p",[n("img",{attrs:{src:a(444),alt:""}})]),t._v(" "),n("h2",{attrs:{id:"johninch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#johninch"}},[t._v("#")]),t._v(" Johninch")]),t._v(" "),n("h3",{attrs:{id:"快慢指针法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快慢指针法"}},[t._v("#")]),t._v(" 快慢指针法")]),t._v(" "),n("ul",[n("li",[t._v("时间复杂度O(n)")]),t._v(" "),n("li",[t._v("空间复杂度O(1)")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 环形链表的入口节点")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法：分两步")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 阶段一 快慢指针判断是否成环，相遇必定成环，快指针走到链尾指向null则无环；")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 阶段二 如果成环，记录第一次相遇的节点firstMeet，使用两个慢指针(即步频为1的)一个从head，一个从firstMeet出发，相遇时从head出发的指针则为入环点")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("detectCycle")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("head")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 阶段1：快慢指针，速度fast步频2，slow步频1，试图找出第一次相遇的点，判断是否成环")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fast "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" slow "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" firstMeet "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slow "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" fast "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" fast"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      slow "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" slow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n      fast "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fast"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slow "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" fast"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相遇时，慢指针走的路程就是 相遇点firstMeet")]),t._v("\n          firstMeet "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" slow\n          "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("firstMeet"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有相遇，不成环")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 阶段2：用 阶段1中找到的 相遇点firstMeet 来找到环的入口")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设定head到入环点为n，假设环路大于n，环内路被分为b与n。")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 慢指针从入环处开始跑b步，距离入环处就剩下了n。")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时，快指针则是从距离入环处n步远的位置开始跑了2b步，距离入环处也是剩下了n。")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 慢指针在圈内b的位置，快指针在圈内n+2b（减去圈长n+b也是b的位置），位置相同")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以他们相遇了，距离入环处都是n，这个点就是firstMeet")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以最后，使用两个slow指针，一个从head出发，一个从firstMeet出发，都走n步，相遇，返回从head出发的slow即可")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 另外，对于环路小于n的情况，则可将多个小环展开视为一个大环，情况是一样的")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("firstMeet "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("firstMeet "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" head\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      firstMeet "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" firstMeet"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n      head "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h4",{attrs:{id:"会不会跨过去"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#会不会跨过去"}},[t._v("#")]),t._v(" 会不会跨过去")]),t._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("会不会跨过去？")]),t._v(" "),n("p",[t._v("注意到：我们在快慢指针的方法中，设定快慢指针的速度分别为2和1，如果成环，那么二者为什么一定会相遇而不是刚好快指针跨过慢指针呢？")]),t._v(" "),n("p",[t._v("这样思考：二者相差速度为1，如果"),n("code",[t._v("把慢跑者视作参考系，则意味着慢跑者站着不动，快跑者的速度为1")]),t._v("，而最小间隔是1，因此一定会相遇。")]),t._v(" "),n("p",[t._v("如果速度是其他值呢，比如是2和4呢？")]),t._v(" "),n("p",[t._v("二者相差是2，最小距离为1，所以真的是有可能跨过去的！")])]),t._v(" "),n("h3",{attrs:{id:"使用set缓存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用set缓存"}},[t._v("#")]),t._v(" 使用Set缓存")]),t._v(" "),n("ul",[n("li",[t._v("时间复杂度O(n)")]),t._v(" "),n("li",[t._v("空间复杂度O(n)")])]),t._v(" "),n("p",[t._v("判断链表是否成环，设置一个缓存，将每个链表节点都存起来，如果重复出现，就是有环的，否则就没有环：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("detectCycle")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("head")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cache "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cache"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("has")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            cache"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        head "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);