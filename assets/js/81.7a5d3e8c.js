(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{575:function(t,s,a){t.exports=a.p+"assets/img/reg-exec.986781e4.png"},899:function(t,s,a){"use strict";a.r(s);var e=a(14),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"正则表达式基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式基础"}},[t._v("#")]),t._v(" 正则表达式基础")]),t._v(" "),e("h2",{attrs:{id:"实例化正则对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实例化正则对象"}},[t._v("#")]),t._v(" 实例化正则对象")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字面量方式")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用构造函数")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\d"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"g"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("strong",[t._v("字面量方式")]),t._v("：把要写的正则放在两个//之间，其中//最后面的 g 是"),e("em",[t._v("高级搜索标志")]),t._v("。")]),t._v(" "),e("li",[e("strong",[t._v("使用构造函数")]),t._v("：通过 new 一个 RegExp，接受两个字符串参数。第一个是正则的内容，在\\d 前面加上了一个\\是对\\d 中的\\进行"),e("code",[t._v("转义（escaping）")]),t._v("，记住这个是必须的，有特殊的字符都需要转义。第二个参数是"),e("em",[t._v("高级搜索标志")]),t._v("。")])]),t._v(" "),e("h2",{attrs:{id:"escaping-转义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#escaping-转义"}},[t._v("#")]),t._v(" Escaping 转义")]),t._v(" "),e("p",[t._v("如果需要使用"),e("code",[t._v("任何特殊字符")]),t._v("的字面值（例如，搜索字符'*'），你必须通过在它前面放一个"),e("code",[t._v("反斜杠来转义")]),t._v("它。")]),t._v(" "),e("h2",{attrs:{id:"元字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[t._v("#")]),t._v(" 元字符")]),t._v(" "),e("p",[t._v("有特殊含义的非字母字符。")]),t._v(" "),e("h3",{attrs:{id:"直接量-元字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#直接量-元字符"}},[t._v("#")]),t._v(" 直接量 元字符")]),t._v(" "),e("ul",[e("li",[t._v("\\f 换页符。")]),t._v(" "),e("li",[t._v("\\n 换行符。")]),t._v(" "),e("li",[t._v("\\r 回车符。")]),t._v(" "),e("li",[t._v("\\t 制表符。")]),t._v(" "),e("li",[t._v("\\v 垂直制表符。")]),t._v(" "),e("li",[t._v("\\0 匹配 Null 字符。")]),t._v(" "),e("li",[t._v("/ 一个/直接量。")]),t._v(" "),e("li",[t._v("\\ 一个\\直接量。")]),t._v(" "),e("li",[t._v(". 一个.直接量。")]),t._v(" "),e("li",[t._v("* 一个*直接量。")]),t._v(" "),e("li",[t._v("+ 一个+直接量。")]),t._v(" "),e("li",[t._v("? 一个?直接量。")]),t._v(" "),e("li",[t._v("| 一个|直接量。")]),t._v(" "),e("li",[t._v("( 一个(直接量。")]),t._v(" "),e("li",[t._v("{ 一个{直接量。")]),t._v(" "),e("li",[t._v("[ 一个[直接量。")])]),t._v(" "),e("h3",{attrs:{id:"匹配类-元字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#匹配类-元字符"}},[t._v("#")]),t._v(" 匹配类 元字符")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("[]")]),t._v(" 匹配类，匹配的时候匹配到[]其中一个即可：[0-9]表示 0 到 9，[a-zA-Z]表示匹配所有的大小写字母。")]),t._v(" "),e("li",[e("strong",[t._v("^")]),t._v(" 反向类：[^9]表示除 9 之外的所有字符。")])]),t._v(" "),e("h3",{attrs:{id:"预定义类-元字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#预定义类-元字符"}},[t._v("#")]),t._v(" 预定义类 元字符")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v(".")]),t._v(" 表示除换行符(\\n、\\r 也包括回车符)之外的任何单个字符，等价于 [^\\r\\n]。")]),t._v(" "),e("li",[e("strong",[t._v("d")]),t._v(" 表示数字字符，等价于[0-9]。")]),t._v(" "),e("li",[e("strong",[t._v("D")]),t._v(" 表示非数字字符，等价于[^0-9]。")]),t._v(" "),e("li",[e("strong",[t._v("s")]),t._v(" 表示空白字符，等价于[\\t\\n\\x\\f\\r]。")]),t._v(" "),e("li",[e("strong",[t._v("S")]),t._v(" 表示非空白字符，等价于[^\\t\\n\\x\\f\\r]。")]),t._v(" "),e("li",[e("strong",[t._v("w")]),t._v(" 表示单词字符(字母数字下划线)，等价于[a-zA-Z_0-9]。")]),t._v(" "),e("li",[e("strong",[t._v("W")]),t._v(" 表示非单词字符(字母数字下划线)，等价于[^a-za-z_0-9]。")])]),t._v(" "),e("h3",{attrs:{id:"边界类-元字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#边界类-元字符"}},[t._v("#")]),t._v(" 边界类 元字符")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("^...")]),t._v(" 表示以...开始。")]),t._v(" "),e("li",[e("strong",[t._v("...$")]),t._v(" 表示以...结束。")]),t._v(" "),e("li",[e("strong",[t._v("\\b")]),t._v(" 表示单词边界。")]),t._v(" "),e("li",[e("strong",[t._v("\\B")]),t._v(" 表示非单词边界。")])]),t._v(" "),e("h3",{attrs:{id:"量词-元字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#量词-元字符"}},[t._v("#")]),t._v(" 量词 元字符")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("?")]),t._v(" 匹配前面一个表达式 0 次或者 1 次。等价于 {0,1}。作为量词时有两种模式：\n"),e("ul",[e("li",[t._v("默认是"),e("code",[t._v("贪婪模式（匹配尽可能多的字符）")]),t._v("：/e?le?/ 匹配 \"angel\" 中的 'el'、\"angle\" 中的 'le' 以及 \"oslo' 中的 'l'。")]),t._v(" "),e("li",[t._v("如果"),e("code",[t._v("紧跟在任何量词 *、 +、? 或 {} 的后面")]),t._v("，将会使量词变为"),e("code",[t._v("非贪婪模式（匹配尽量少的字符）")]),t._v('：例如，对 "123abc" 使用 /\\d+/ 将会匹配 "123"，而使用 /\\d+?/ 则只会匹配到 "1"。')])])]),t._v(" "),e("li",[e("strong",[t._v("+")]),t._v(" 匹配前面一个表达式 1 次或者多次。等价于 {1,}。")]),t._v(" "),e("li",[e("strong",[t._v("*")]),t._v(" 匹配前一个表达式 0 次或多次。等价于 {0,}。")]),t._v(" "),e("li",[t._v("{n} 表示出现 n 次。")]),t._v(" "),e("li",[t._v("{n,m} 表示出现 n 到 m 次。")]),t._v(" "),e("li",[t._v("{n,} 表示至少出现 n 次。")])]),t._v(" "),e("h3",{attrs:{id:"分组-元字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分组-元字符"}},[t._v("#")]),t._v(" 分组 元字符")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("(x)")]),t._v(" 括号被称为"),e("code",[t._v("捕获括号")]),t._v("：会匹配 x 并且记住匹配项。记住的匹配项有可以使用在两种环节中：\n"),e("ul",[e("li",[t._v("\\1、\\2、...、\\n 是用在正则表达式的"),e("code",[t._v("匹配环节")]),t._v("。\n"),e("ul",[e("li",[t._v("模式 "),e("code",[t._v("/(foo) (bar) \\1 \\2/")]),t._v('，可匹配"foo bar foo bar"。模式中的 \\1 和 \\2 表示被捕获括号匹配的子字符串，即 foo 和 bar。')])])]),t._v(" "),e("li",[t._v("$1、$2、...、$n 是用在正则表达式的"),e("code",[t._v("替换环节")]),t._v("。\n"),e("ul",[e("li",[t._v("模式"),e("code",[t._v("'John Smith'.replace(/(\\w+)\\s(\\w+)/, \"$2, $1\")")]),t._v('可输出"Smith, John"。模式中的 $1 和 $2 表示被捕获括号匹配的子字符串，即 John 和 Smith，之后重新排列。')])])])])]),t._v(" "),e("li",[e("strong",[t._v("(?:x)")]),t._v(" 这种括号叫作"),e("code",[t._v("非捕获括号")]),t._v("：匹配 x 但是不记住该匹配项。")]),t._v(" "),e("li",[t._v("x|y 匹配 x 或者 y 。")]),t._v(" "),e("li",[e("strong",[t._v("x(?=y)")]),t._v(" "),e("code",[t._v("先行断言")]),t._v("：匹配 x 仅仅当 x 后面跟着 y 。\n"),e("ul",[e("li",[t._v("例如，/Jack(?=Sprat)/会匹配到'Jack'仅仅当它后面跟着'Sprat'。/Jack(?=Sprat|Frost)/匹配'Jack'仅仅当它后面跟着'Sprat'或者是'Frost'。但是'Sprat'和'Frost'都不是匹配结果的一部分。")])])]),t._v(" "),e("li",[e("strong",[t._v("(?<=y)x")]),t._v(" "),e("code",[t._v("后行断言")]),t._v("：匹配 x 仅仅当 x 前面是 y 。\n"),e("ul",[e("li",[t._v("例如，/(?<=Jack)Sprat/会匹配到'Sprat'仅仅当它前面是'Jack'。/(?<=Jack|Tom)Sprat/匹配'Sprat'仅仅当它前面是'Jack'或者是'Tom'。但是'Jack'和'Tom'都不是匹配结果的一部分。")])])]),t._v(" "),e("li",[e("strong",[t._v("x(?!y)")]),t._v(" "),e("code",[t._v("正向否定查找")]),t._v("：仅仅当 x 后面不跟着 y 时匹配 x 。\n"),e("ul",[e("li",[t._v('例如，仅仅当这个数字后面没有跟小数点的时候，/\\d+(?!.)/ 匹配一个数字。正则表达式/\\d+(?!.)/.exec("3.141")匹配‘141’而不是‘3.141’')])])]),t._v(" "),e("li",[e("strong",[t._v("(?<!y)x")]),t._v(" "),e("code",[t._v("反向否定查找")]),t._v("：仅仅当 x 前面不是 y 时匹配 x 。")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("RegExp.\\$1 哪来的值")]),t._v(" "),e("p",[e("code",[t._v("RegExp")]),t._v(" 是 javascript 中的一个内置对象。为正则表达式。")]),t._v(" "),e("p",[e("code",[t._v("RegExp.$1")]),t._v("是 RegExp 的一个属性，指的是与正则表达式匹配的第一个 子匹配(以括号为标志)字符串，以此类推，RegExp.$2，RegExp.$3，..RegExp.$99 总共可以有 99 个匹配。")]),t._v(" "),e("p",[t._v("如果直接在控制台打印 RegExp, 出现的一定是一个空字符串。那么, 我们在什么时候可以使用"),e("code",[t._v("RegExp.$1")]),t._v("呢?")]),t._v(" "),e("p",[t._v("其实"),e("strong",[t._v("RegExp 这个对象会在我们"),e("code",[t._v("调用了正则表达式的方法后")]),t._v(", 自动将最近一次的结果保存在里面")]),t._v(", 所以如果我们在使用正则表达式时, 有用到分组, 那么就可以直接在调用完以后直接使用 RegExp.$xx 来使用捕获到的分组内容, 如下:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" r "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^(\\d{4})-(\\d{1,2})-(\\d{1,2})$")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2019-10-08"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RegExp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2019")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RegExp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n")])])])]),t._v(" "),e("h2",{attrs:{id:"高级搜索标志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高级搜索标志"}},[t._v("#")]),t._v(" 高级搜索标志")]),t._v(" "),e("ul",[e("li",[t._v("g 全局搜索。")]),t._v(" "),e("li",[t._v("i 不区分大小写搜索。")]),t._v(" "),e("li",[t._v("m 多行搜索。")])]),t._v(" "),e("h2",{attrs:{id:"正则相关方法汇总"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正则相关方法汇总"}},[t._v("#")]),t._v(" 正则相关方法汇总")]),t._v(" "),e("p",[t._v("正则表达式可以被用于 RegExp 的 exec 和 test 方法，以及 String 的 match、replace、search 和 split 方法。")]),t._v(" "),e("h3",{attrs:{id:"regexp-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#regexp-方法"}},[t._v("#")]),t._v(" RegExp 方法")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("exec")]),t._v(" 一个在字符串中执行查找匹配的 RegExp 方法，它返回一个数组（未匹配到则返回 null）。")]),t._v(" "),e("li",[e("strong",[t._v("test")]),t._v(" 一个在字符串中测试是否匹配的 RegExp 方法，它返回 true 或 false。")])]),t._v(" "),e("h4",{attrs:{id:"匹配手机号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#匹配手机号"}},[t._v("#")]),t._v(" 匹配手机号")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^1[34578]\\d{9}&")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("text")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h4",{attrs:{id:"匹配邮箱"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#匹配邮箱"}},[t._v("#")]),t._v(" 匹配邮箱")]),t._v(" "),e("p",[t._v("匹配邮箱规则很复杂，实际的生产中只需要满足基本的验证规则：姑且把邮箱地址分成“第一部分@第二部分”这样： - 第一部分：由字母、数字、下划线、英语句号（.）组成， - 第二部分：为一个域名，域名由字母、数字、短横线（-）、英语句号（.）、域名后缀组成，而顶级域名后缀一般为 2-6 位字母，如 cn,com,net。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[0-9A-Z_\\.]+@[0-9A-Z-]+\\.[A-Z]{2,6}$")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("i")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h4",{attrs:{id:"用-exec-从-url-中截取信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用-exec-从-url-中截取信息"}},[t._v("#")]),t._v(" 用 exec 从 url 中截取信息")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" url "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.baidu.com?dsp=ipad&sid=20510"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[?&](\\w+)=(\\w+)")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"循环"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tobj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"obj"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" obj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("使用.exec 方法，当其匹配到 reg，会逐次返回匹配值数组：\n"),e("img",{attrs:{src:a(575),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"string-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string-方法"}},[t._v("#")]),t._v(" String 方法")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("match")]),t._v(" 一个在字符串中执行查找匹配的 String 方法，它返回一个数组，在未匹配到时会返回 null。")]),t._v(" "),e("li",[e("strong",[t._v("search")]),t._v(" 一个在字符串中测试匹配的 String 方法，它返回匹配到的位置索引，或者在失败时返回-1。")]),t._v(" "),e("li",[e("strong",[t._v("replace")]),t._v(" 一个在字符串中执行查找匹配的 String 方法，并且使用替换字符串替换掉匹配到的子字符串。")]),t._v(" "),e("li",[e("strong",[t._v("split")]),t._v(" 一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);