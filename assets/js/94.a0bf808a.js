(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{621:function(t,_,v){"use strict";v.r(_);var e=v(14),r=Object(e.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"进阶算法-动态规划"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进阶算法-动态规划"}},[t._v("#")]),t._v(" 进阶算法-动态规划")]),t._v(" "),v("p",[t._v("动态规划算法 实现基本步骤4步（以不同路径题目为例）：")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("确定状态表示")]),t._v("：令 "),v("code",[t._v("dp[i][j]")]),t._v(" 是到达 "),v("code",[t._v("i")]),t._v(", "),v("code",[t._v("j")]),t._v(" 最多路径；")]),t._v(" "),v("li",[v("strong",[t._v("划分最优子结构")]),t._v("：路径总和 "),v("code",[t._v("dp[i][j]")]),t._v(" 可以拆分为 "),v("code",[t._v("dp[i-1][j]")]),t._v(" 与 "),v("code",[t._v("dp[i][j-1]")]),t._v(" 子路径；")]),t._v(" "),v("li",[v("strong",[t._v("得出状态转移方程")]),t._v("："),v("code",[t._v("dp[i][j] = dp[i-1][j] + dp[i][j-1]")]),t._v("；")]),t._v(" "),v("li",[v("strong",[t._v("确定边界（base case，最简单情况）")]),t._v("：对于第一行 "),v("code",[t._v("dp[0][j]")]),t._v("，或者第一列 "),v("code",[t._v("dp[i][0]")]),t._v("，由于都是在边界，所以只能为 1。")])]),t._v(" "),v("h2",{attrs:{id:"_1、不同路径"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、不同路径"}},[t._v("#")]),t._v(" 1、不同路径")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/Algorithm/DP/uniquePaths.html"}},[t._v("不同路径")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/Algorithm/DP/uniquePaths2.html"}},[t._v("不同路径 II")])],1)]),t._v(" "),v("h2",{attrs:{id:"_2、最短路径"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、最短路径"}},[t._v("#")]),t._v(" 2、最短路径")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/Algorithm/DP/findCheapestPrice/"}},[t._v("K 站中转内最便宜的航班")])],1)])])}),[],!1,null,null,null);_.default=r.exports}}]);