(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{563:function(t,a,s){t.exports=s.p+"assets/img/MultiRepo-VS-MonoRepo.d3984c0e.png"},870:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"包管理方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#包管理方案"}},[t._v("#")]),t._v(" 包管理方案")]),t._v(" "),n("h2",{attrs:{id:"multirepo-vs-monorepo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#multirepo-vs-monorepo"}},[t._v("#")]),t._v(" MultiRepo VS MonoRepo")]),t._v(" "),n("p",[n("img",{attrs:{src:s(563),alt:"MultiRepo-VS-MonoRepo"}})]),t._v(" "),n("p",[t._v("Monorepo 的全称是 monolithic repository，即单体式仓库，与之对应的是 MultiRepo(multiple repository)，这里的“单”和“多”是指每个仓库中所管理的模块数量。")]),t._v(" "),n("ul",[n("li",[t._v("MultiRepo 是比较传统的做法，即每一个 package 都单独用一个仓库（repo）来进行管理。")]),t._v(" "),n("li",[t._v("MonoRepo 指在一个项目仓库 (repo) 中管理多个模块/包 (package)。")])]),t._v(" "),n("p",[t._v("前者允许多元化发展（各项目可以有自己的构建工具、依赖管理策略、单元测试方法），后者希望集中管理，减少项目间的差异带来的沟通成本。虽然拆分子仓库、拆分子 npm 包是进行项目隔离的天然方案，但当仓库内容出现关联时，没有任何一种调试方式比源码放在一起更高效。")]),t._v(" "),n("p",[t._v("MultiRepo（多 Git Repo，多 npm）导致复用要关心版本号，调试需要 npm link，这并不是理想的开发环境。而几乎我们熟知的仓库都采用了 MonoRepo，可以看到这些项目的第一级目录的内容以脚手架为主，主要内容都在 packages 目录中、分多个 package 进行管理。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("├── packages\n|   ├── pkg1\n|   |   ├── package.json\n|   ├── pkg2\n|   |   ├── package.json\n├── package.json\n")])])]),n("p",[t._v("因此 MonoRepo 是更加流行更加合理的方式，目前最常见的 MonoRepo 解决方案是 "),n("code",[t._v("Lerna")]),t._v(" 和 "),n("code",[t._v("yarn 的 workspaces 特性")]),t._v(" 的 monorepo 工作流；")]),t._v(" "),n("ul",[n("li",[t._v("lerna 和 yarn-workspace 并不是只能选其一，大多 MonoRepo 即会使用 lerna 又会在 package.json 声明 workspaces。")]),t._v(" "),n("li",[t._v("由于 yarn 和 lerna 在功能上有较多的重叠,我们采用 yarn 官方推荐的做法："),n("strong",[t._v("用 yarn 来处理依赖问题，用 lerna 来处理发布问题")]),t._v("。")]),t._v(" "),n("li",[t._v("这样的话，无论你的包管理器是 npm 还是 yarn，都能发挥 MonoRepo 的优势；要是包管理是 yarn ，lerna 就会把依赖安装交给 yarn 处理。")])]),t._v(" "),n("h2",{attrs:{id:"yarn-的-workspaces-特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#yarn-的-workspaces-特性"}},[t._v("#")]),t._v(" yarn 的 workspaces 特性")]),t._v(" "),n("h3",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),n("p",[t._v("Yarn Workspaces（工作区）是 Yarn 提供的 MonoRepo 的依赖管理机制，从 Yarn 1.0 开始默认支持，用于在代码仓库的根目录下管理多个 package 的依赖。")]),t._v(" "),n("ul",[n("li",[t._v("开发多个互相依赖的 package 时，workspace 会自动对 package 的引用设置软链接（symlink），比 yarn link 更加方便，且链接仅局限在当前 workspace 中，不会对整个系统造成影响")]),t._v(" "),n("li",[t._v("所有 package 的依赖会安装在最根目录的 node_modules 下，节省磁盘空间，且给了 yarn 更大的依赖优化空间")]),t._v(" "),n("li",[t._v("所有 package 使用同一个 yarn.lock，更少造成冲突且易于审查")])]),t._v(" "),n("h3",{attrs:{id:"如何使用-yarn-workspaces-特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何使用-yarn-workspaces-特性"}},[t._v("#")]),t._v(" 如何使用 yarn workspaces 特性")]),t._v(" "),n("p",[t._v("https://classic.yarnpkg.com/en/docs/cli/workspaces")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mono-demo"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"version"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0.0"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"private"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 根目录一般是项目的脚手架，无需发布，"private": true会确保根目录不被发布出去。')]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workspaces"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"packages/*"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明workspace中package的路径。值是一个字符串数组，支持Glob通配符。")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 其中"packages/*"是社区的常见写法，也可以枚举所有package： "workspaces": ["package-a", "package-b"]。')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 命令")]),t._v("\n- yarn workspace <workspace_name> <command> "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在指定的package中运行指定的命令。")]),t._v("\n- yarn workspaces run <command> "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在所有package中运行指定的命令，若某个package中没有对应的命令则会报错。")]),t._v("\n- yarn workspaces info "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--json"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查看项目中的workspace依赖树。")]),t._v("\n- yarn <add|remove> <package> -W "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -W: --ignore-workspace-root-check ，允许依赖被安装在workspace的根目录")]),t._v("\n")])])]),n("p",[t._v("使用 Learn 管理的项目的目录结构和 yarn workspace 类似。\nLerna 的依赖管理是也基于 yarn/npm，但是安装依赖的方式和 yarn workspace 有些差异：")]),t._v(" "),n("ul",[n("li",[t._v("Yarn workspace 只会在根目录安装一个 node_modules，这有利于提升依赖的安装效率和不同 package 间的版本复用。")]),t._v(" "),n("li",[t._v("而 Lerna 默认会进到每一个 package 中运行 yarn/npm install，并在每个 package 中创建一个 node_modules（npm 的 workspaces 特性）。")])]),t._v(" "),n("h2",{attrs:{id:"介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/lerna/lerna#getting-started",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lerna"),n("OutboundLink")],1),t._v(" 是一个工具，它优化了使用 git 和 npm "),n("strong",[t._v("管理"),n("code",[t._v("多包")]),t._v("存储库")]),t._v("的工作流。")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i lerna -g\n")])])]),n("h2",{attrs:{id:"常用命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("lerna init")]),t._v(": 初始化\n执行成功后，目录下将会生成这样的目录结构。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("- packages(目录，之后还有进入分别npm init 每个子pkg)\n- lerna.json(配置文件)\n- package.json(工程描述文件)\n")])])]),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// package.json")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"root"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"private"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 私有的，不会被发布，是管理整个项目，与要发布到npm的包解耦")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"devDependencies"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lerna"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^3.15.0"')]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lerna.json")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"packages"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"packages/*"')]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"version"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.0"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[n("code",[t._v("lerna bootstrap")]),t._v(": 安装各 packages 依赖，默认是 npm i，如果指定 yarn 的 workspaces，则会用 yarn install；")]),t._v(" "),n("li",[n("code",[t._v("lerna publish")]),t._v(": 发布（要确保已经使用 git 链接到远程仓库）")]),t._v(" "),n("li",[n("code",[t._v("lerna create < name > [loc]")]),t._v(": 创建一个包，name 包名，loc 位置可选")])]),t._v(" "),n("h2",{attrs:{id:"工作模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工作模式"}},[t._v("#")]),t._v(" 工作模式")]),t._v(" "),n("p",[t._v("两种工作模式：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("Fixed/Locked")]),t._v(" (default) mode：lerna 是把工程当作一个整体来对待。每次发布 packages，都是全量发布，无论是否修改。")]),t._v(" "),n("li",[n("code",[t._v("Independent")]),t._v(" mode：\n"),n("ul",[n("li",[t._v("lerna 会配合 Git，检查文件变动，只发布有改动的 package。")]),t._v(" "),n("li",[t._v("lerna init --independent 初始化项目。")]),t._v(" "),n("li",[t._v('lerna.json 文件里面"version": "independent"。')]),t._v(" "),n("li",[t._v("每次 publish 时，您都将得到一个提示符，提示每个已更改的包，以指定是补丁、次要更改、主要更改还是自定义更改。")])])])]),t._v(" "),n("h2",{attrs:{id:"lerna-最佳实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lerna-最佳实践"}},[t._v("#")]),t._v(" lerna 最佳实践")]),t._v(" "),n("p",[t._v("为了能够使 lerna 发挥最大的作用，根据这段时间使用 lerna 的经验，总结出一个最佳实践。下面是一些特性。")]),t._v(" "),n("ul",[n("li",[t._v("采用 Independent 模式")]),t._v(" "),n("li",[t._v("根据 Git 提交信息，自动生成 changelog")]),t._v(" "),n("li",[t._v("eslint 规则检查")]),t._v(" "),n("li",[t._v("prettier 自动格式化代码")]),t._v(" "),n("li",[t._v("提交代码，代码检查 hook")]),t._v(" "),n("li",[t._v("遵循 semver 版本规范")])]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// package.json")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"root"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"private"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"c"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git-cz"')]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"config"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"commitizen"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"path"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./node_modules/cz-lerna-changelog"')]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"husky"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"hooks"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pre-commit"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lint-staged"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"commit-msg"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commitlint -E HUSKY_GIT_PARAMS"')]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lint-staged"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"*.ts"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint --fix"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"devDependencies"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"@commitlint/cli"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^8.1.0"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"@commitlint/config-conventional"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^8.1.0"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"commitizen"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^3.1.1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"cz-lerna-changelog"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^2.0.2"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"husky"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^3.0.0"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lerna"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^3.15.0"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lint-staged"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^9.2.0"')]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lerna.json")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"packages"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"packages/*"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"command"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "bootstrap": {')]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// \t"hoist": true')]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// },")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"version"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"conventionalCommits"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"ignoreChanges"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"**/*.md"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"version"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.1-alpha.1"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"custom-block danger"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("在 lerna 中的"),n("code",[t._v("lerna bootstrap --hoist")]),t._v(" 命令，使用 --hoist 来把每个 package 下的依赖包都提升到工程根目录，来降低安装以及管理的成本。如果直接在 lerna.json 中配置 command.bootstrap.hoist = true，则就省去了每次加 --hoist 参数。")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("lerna ERR"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" EWORKSPACES --hoist is not supported with --npm-client"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("yarn, use "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" workspaces instead\n")])])]),n("p",[t._v("在最佳实践中，不要再使用"),n("code",[t._v("lerna bootstrap --hoist")]),t._v("，会报错，直接使用 yarn workspaces 来替代就可以了。")])]),t._v(" "),n("h2",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://juejin.cn/post/6844903918279852046",target:"_blank",rel:"noopener noreferrer"}},[t._v("lerna+yarn workspace+monorepo 项目的最佳实践"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.cn/post/6844903568751722509",target:"_blank",rel:"noopener noreferrer"}},[t._v("lerna 管理前端模块最佳实践"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.cn/post/6844903911095025678",target:"_blank",rel:"noopener noreferrer"}},[t._v("基于 Lerna 管理 packages 的 Monorepo 项目最佳实践"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.cn/post/6974967455114362888",target:"_blank",rel:"noopener noreferrer"}},[t._v("Yarn Workspace 使用指南"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);