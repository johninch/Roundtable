(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{445:function(t,r,a){t.exports=a.p+"assets/img/Time-Complexity.2ec8e66c.png"},446:function(t,r,a){t.exports=a.p+"assets/img/structure-two-type.35d1bdb8.png"},648:function(t,r,a){"use strict";a.r(r);var e=a(14),i=Object(e.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"前端算法学习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端算法学习"}},[t._v("#")]),t._v(" 前端算法学习")]),t._v(" "),e("h2",{attrs:{id:"时间复杂度和空间复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度和空间复杂度"}},[t._v("#")]),t._v(" 时间复杂度和空间复杂度")]),t._v(" "),e("p",[t._v("首先要搞懂时间复杂度和空间复杂度的概念，它们的高低共同决定着一段代码质量的好坏：")]),t._v(" "),e("h4",{attrs:{id:"_1-时间复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-时间复杂度"}},[t._v("#")]),t._v(" 1. 时间复杂度")]),t._v(" "),e("p",[t._v("一个算法的时间复杂度反映了程序运行从开始到结束所需要的时间。把算法中基本操作重复执行的次数（频度）作为算法的时间复杂度。")]),t._v(" "),e("blockquote",[e("p",[t._v("没有循环语句，记作O(1)，也称为常数阶。只有一重循环，则算法的基本操作的执行频度与问题规模n呈线性增大关系，记作O(n)，也叫线性阶。")])]),t._v(" "),e("p",[t._v("常见的时间复杂度有：")]),t._v(" "),e("ul",[e("li",[t._v("O(1): Constant Complexity: Constant 常数复杂度")]),t._v(" "),e("li",[t._v("O(log n): Logarithmic Complexity: 对数复杂度")]),t._v(" "),e("li",[t._v("O(n): Linear Complexity: 线性时间复杂度")]),t._v(" "),e("li",[t._v("O(n^2): N square Complexity 平⽅方")]),t._v(" "),e("li",[t._v("O(n^3): N square Complexity ⽴立⽅方")]),t._v(" "),e("li",[t._v("O(2^n): Exponential Growth 指数")]),t._v(" "),e("li",[t._v("O(n!): Factorial 阶乘")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(445),alt:"Time-Complexity"}})]),t._v(" "),e("h4",{attrs:{id:"_2-空间复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-空间复杂度"}},[t._v("#")]),t._v(" 2. 空间复杂度")]),t._v(" "),e("p",[t._v("一个程序的空间复杂度是指运行完一个程序所需内存的大小。利用程序的空间复杂度，可以对程序的运行所需要的内存多少有个预先估计。")]),t._v(" "),e("p",[t._v("一个程序执行时除了需要存储空间和存储本身所使用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间。")]),t._v(" "),e("h2",{attrs:{id:"数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),e("blockquote",[e("p",[t._v("数据结构即数据元素相互之间存在的一种和多种特定的关系集合。")])]),t._v(" "),e("p",[t._v("一般你可以从两个维度来理解它，逻辑结构和存储结构。")]),t._v(" "),e("h4",{attrs:{id:"_1-逻辑结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-逻辑结构"}},[t._v("#")]),t._v(" 1. 逻辑结构")]),t._v(" "),e("p",[e("img",{attrs:{src:a(446),alt:"数据结构的逻辑结构"}})]),t._v(" "),e("p",[t._v("简单的来说逻辑结构就是数据之间的关系，逻辑结构大概统一的可以分成两种：线性结构、非线性结构。")]),t._v(" "),e("ul",[e("li",[t._v("线性结构：是一个有序数据元素的集合。 其中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的。常用的线性结构有: 栈，队列，链表，线性表。")]),t._v(" "),e("li",[t._v("非线性结构：各个数据元素不再保持在一个线性序列中，每个数据元素可能与零个或者多个其他数据元素发生联系。常见的非线性结构有 二维数组，树等。")])]),t._v(" "),e("h4",{attrs:{id:"_2-存储结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-存储结构"}},[t._v("#")]),t._v(" 2. 存储结构")]),t._v(" "),e("p",[t._v("存储结构是逻辑结构用计算机语言的实现。常见的存储结构有顺序存储、链式存储、索引存储以及散列存储。")]),t._v(" "),e("p",[t._v("例如：")]),t._v(" "),e("ul",[e("li",[t._v("数组在内存中的位置是连续的，它就属于顺序存储；")]),t._v(" "),e("li",[t._v("链表是主动建立数据间的关联关系的，在内存中却不一定是连续的，它属于链式存储；")]),t._v(" "),e("li",[t._v("还有顺序和逻辑上都不存在顺序关系，但是你可以通过一定的方式去放问它的哈希表，数据散列存储。")])]),t._v(" "),e("h2",{attrs:{id:"目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),e("h4",{attrs:{id:"链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Linked-List/sortList.html"}},[t._v("💯排序链表")])],1),t._v(" "),e("li",[e("a",{attrs:{href:"./Linked-List/print-from-tail-to-head"}},[t._v("💯从尾到头打印链表")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Linked-List/reverse-linked-list"}},[t._v("💯反转链表")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Linked-List/merge-two-sorted-link"}},[t._v("💯合并两个有序链表")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Linked-List/entry-node-of-loop"}},[t._v("💯链表中环的入口结点")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Linked-List/find-first-common-node"}},[t._v("💯两个链表的第一个公共节点")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Linked-List/find-Kth-to-tail"}},[t._v("💯链表倒数第k个节点")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Linked-List/delete-repeat-node"}},[t._v("✔️删除链表中重复的节点")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Linked-List/copy-complicated-linked-list"}},[t._v("复杂链表的复制")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Linked-List/deep-clone"}},[t._v("约瑟夫环")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Linked-List/deep-clone"}},[t._v("相交链表")])])]),t._v(" "),e("h4",{attrs:{id:"树和二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#树和二叉树"}},[t._v("#")]),t._v(" 树和二叉树")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"./Tree-and-Binary-Tree/inorder-traversal"}},[t._v("💯二叉树的中序遍历")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Tree-and-Binary-Tree/preorder-traversal"}},[t._v("💯二叉树的前序遍历")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Tree-and-Binary-Tree/postorder-traversal"}},[t._v("💯二叉树的后序遍历")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Tree-and-Binary-Tree/levelOrder-traversal"}},[t._v("💯二叉树的层序遍历")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Tree-and-Binary-Tree/reconstruct-binary-tree"}},[t._v("💯重建二叉树")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Tree-and-Binary-Tree/get-HRD"}},[t._v("💯求二叉树的后序遍历")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Tree-and-Binary-Tree/is-symmetrical"}},[t._v("💯对称的二叉树")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Tree-and-Binary-Tree/mirror"}},[t._v("💯二叉树的镜像")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Tree-and-Binary-Tree/generate-BST"}},[t._v("💯生成二叉搜索树")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Tree-and-Binary-Tree/isValidBST"}},[t._v("💯验证二叉搜索树")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Tree-and-Binary-Tree/kth-node"}},[t._v("💯二叉搜索树的第k个节点")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Tree-and-Binary-Tree/verify-squence-of-BST"}},[t._v("💯二叉搜索树的后序遍历")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Tree-and-Binary-Tree/max-depth"}},[t._v("💯二叉树的最大深度")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Tree-and-Binary-Tree/min-depth"}},[t._v("💯二叉树的最小深度")])]),t._v(" "),e("li",[e("a",{attrs:{href:"./Tree-and-Binary-Tree/is-balanced"}},[t._v("💯平衡二叉树")])])]),t._v(" "),e("h4",{attrs:{id:"排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[t._v("#")]),t._v(" 排序")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Sort/firstMissingPositive.html"}},[t._v("💯缺失的第一个正数")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Sort/fast-sort.html"}},[t._v("💯快速排序")])],1)]),t._v(" "),e("h4",{attrs:{id:"正则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正则"}},[t._v("#")]),t._v(" 正则")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Reg/repeatedSubstringPattern.html"}},[t._v("💯重复的子字符串（正则匹配模式）")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Reg/isMatch.html"}},[t._v("正则表达式匹配")])],1)]),t._v(" "),e("h4",{attrs:{id:"字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/Algorithm/String/revertByWord.html"}},[t._v("💯反转字符串中的单词iii")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Algorithm/String/countBinarySubstrings.html"}},[t._v("💯计数二进制子串")])],1)]),t._v(" "),e("h4",{attrs:{id:"数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Array/letterCombinations.html"}},[t._v("💯电话号码的字母组合（组合运算）")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Array/canPlaceFlowers.html"}},[t._v("💯种花问题（筛选运算-贪心）")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Array/hasGroupsSizeX.html"}},[t._v("卡牌分组（归类运算-最大公约数）")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Array/grayCode.html"}},[t._v("格雷编码（二进制运算）")])],1)]),t._v(" "),e("h4",{attrs:{id:"栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Stack/calPoints.html"}},[t._v("💯棒球比赛")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Stack/maximalRectangle.html"}},[t._v("最大矩阵")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Stack/largestRectangleArea.html"}},[t._v("柱状图中最大的矩形")])],1)]),t._v(" "),e("h4",{attrs:{id:"队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Queue/MyCircularQueue.html"}},[t._v("💯设计循环队列")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Queue/leastInterval.html"}},[t._v("任务调度器")])],1)]),t._v(" "),e("h4",{attrs:{id:"递归"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[t._v("#")]),t._v(" 递归")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Recursion/hanota.html"}},[t._v("💯汉诺塔问题")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Recursion/restoreIpAddresses.html"}},[t._v("💯复原IP地址")])],1)]),t._v(" "),e("h4",{attrs:{id:"贪心算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法"}},[t._v("#")]),t._v(" 贪心算法")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Greedy/maxProfit.html"}},[t._v("💯买卖股票的最佳时机")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Greedy/maxProfit2.html"}},[t._v("💯买卖股票的最佳时机 II")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Algorithm/Greedy/lemonadeChange.html"}},[t._v("💯柠檬水找零")])],1)]),t._v(" "),e("h4",{attrs:{id:"动态规划与"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动态规划与"}},[t._v("#")]),t._v(" 动态规划与")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/Algorithm/DP/uniquePaths.html"}},[t._v("💯不同路径")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Algorithm/DP/uniquePaths2.html"}},[t._v("💯不同路径 II")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Algorithm/DP/findCheapestPrice.html"}},[t._v("K 站中转内最便宜的航班")])],1)]),t._v(" "),e("h4",{attrs:{id:"矩阵"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#矩阵"}},[t._v("#")]),t._v(" 矩阵")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Heap/deep-clone"}},[t._v("xxx")])])]),t._v(" "),e("h4",{attrs:{id:"查找"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查找"}},[t._v("#")]),t._v(" 查找")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Search/deep-clone"}},[t._v("xxx")])])]),t._v(" "),e("h4",{attrs:{id:"位运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#位运算"}},[t._v("#")]),t._v(" 位运算")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Bitwise/deep-clone"}},[t._v("xxx")])])]),t._v(" "),e("h4",{attrs:{id:"回溯法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回溯法"}},[t._v("#")]),t._v(" 回溯法")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Backtracking/deep-clone"}},[t._v("xxx")])])]),t._v(" "),e("h4",{attrs:{id:"数学"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数学"}},[t._v("#")]),t._v(" 数学")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Math/deep-clone"}},[t._v("xxx")])])]),t._v(" "),e("h4",{attrs:{id:"哈希表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#哈希表"}},[t._v("#")]),t._v(" 哈希表")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Hashtable/deep-clone"}},[t._v("xxx")])])]),t._v(" "),e("h4",{attrs:{id:"堆"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[t._v("#")]),t._v(" 堆")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Heap/deep-clone"}},[t._v("xxx")])])])])}),[],!1,null,null,null);r.default=i.exports}}]);