(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{651:function(t,s,n){"use strict";n.r(s);var a=n(14),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"正则表达式匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式匹配"}},[t._v("#")]),t._v(" 正则表达式匹配")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/regular-expression-matching",target:"_blank",rel:"noopener noreferrer"}},[t._v("leetcode - 10. 正则表达式匹配"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。")]),t._v(" "),n("ul",[n("li",[t._v("'.' 匹配任意单个字符")]),t._v(" "),n("li",[t._v("'*' 匹配零个或多个前面的那一个元素")]),t._v(" "),n("li",[t._v("所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。")])]),t._v(" "),n("p",[t._v("说明:")]),t._v(" "),n("ul",[n("li",[t._v("s 可能为空，且只包含从 a-z 的小写字母。")]),t._v(" "),n("li",[t._v("p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。")])]),t._v(" "),n("h2",{attrs:{id:"johninch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#johninch"}},[t._v("#")]),t._v(" Johninch")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// /**")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  * @param {string} s")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  * @param {string} p")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  * @return {boolean}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// var isMatch = function(s, p) {")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     const formatToReg = (item, index, source) => {")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         if (/[a-z]/.test(item)) {")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//             return item")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//         } else if (item === ".") {')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//             return '[a-z]'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//         } else if (item === "*") {')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//             if (!source[index-1]) {")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                 return ''")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//             }")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//             return '*'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         }")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     }")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     const pArr = p.split('');")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     const regArr = pArr.map((item, index) => formatToReg(item, index, pArr));")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     // 匹配，是要涵盖 整个 字符串 s的，而不是部分字符串，所以要添加边界元字符")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     let reg = '^' + regArr.join('') + '$';")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     var realReg = new RegExp(reg, 'g');")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     return realReg.test(s)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// };")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("isMatch")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'^'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当然这道题本质不应该使用正则引擎来做，而需要自己实现简单的正则引擎")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" isMatch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);