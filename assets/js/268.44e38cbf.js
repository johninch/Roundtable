(window.webpackJsonp=window.webpackJsonp||[]).push([[268],{842:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"异步编程-2-promise对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步编程-2-promise对象"}},[t._v("#")]),t._v(" 异步编程（2）：Promise对象")]),t._v(" "),a("h2",{attrs:{id:"定义及使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义及使用"}},[t._v("#")]),t._v(" 定义及使用")]),t._v(" "),a("ul",[a("li",[t._v("Promise就是‘承诺’在某个逻辑时间点执行异步操作。有三种状态：pending(进行中)、fulfilled (已完成)、rejected(已失败)。")]),t._v(" "),a("li",[t._v("Promise状态改变只有两种情况：pending => fulfilled (初始态到成功态)、pending => reject (初始态到失败态度)")])]),t._v(" "),a("p",[t._v("new Promise()实例需要传一个function，包含两个参数，类型都是function，分别是resolve函数和reject函数。Promise实例状态为成功时会调用"),a("code",[t._v("resolve方法")]),t._v("；状态为失败时调用"),a("code",[t._v("reject方法")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("即只有异步操作的结果可以决定当前是哪一种状态，任何外界操作都无法改变这个状态；")])]),t._v(" "),a("li",[a("p",[t._v("状态一经改变就凝固了，不会再变，之后任何时候都可以得到这结果，即使添加更多的回调函数也会立即得到这结果。")])]),t._v(" "),a("li",[a("p",[t._v("promise一旦建立就无法取消，并会立即执行；")])]),t._v(" "),a("li",[a("p",[t._v("如果不设置回调函数，promise内部抛出的错误外边无法获取到；")])]),t._v(" "),a("li",[a("p",[t._v("promise处于pending状态时，不知道promise执行的具体进度（刚开始执行还是快要执行结束）")])])]),t._v(" "),a("h2",{attrs:{id:"核心方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心方法"}},[t._v("#")]),t._v(" 核心方法")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("Promise.prototype.then()")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("作用是为 Promise 实例添加状态改变时的回调函数。then()接受两个参数，第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。")]),t._v(" "),a("li",[t._v("then方法返回的是一个"),a("strong",[t._v("新的Promise实例")]),t._v("（注意，不是原来那个Promise实例）。因此可以实现Promise的链式调用，即then方法后面再调用另一个then方法。链式调用的特点是无论第一个then是成功还是失败，都将它的返回值作为下一次成功回调函数的参数。（注意：如果只完成链式调用，其本质上只需将this返回出去即可。这里实现的是链式Promise调用，所以每次then都会返回一个新的promise）。")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Promise.prototype.catch()")])]),t._v(" "),a("ul",[a("li",[t._v("Promise.prototype.catch()方法是.then(null, rejection)的别名，指定错误发生时的回调函数。")])])]),t._v(" "),a("li",[a("p",[t._v("Promise.all()")]),t._v(" "),a("ul",[a("li",[t._v("Promise.all用于将多个Promise实例包装成新的Promise实例p。接收的参数数组[p1, p2, p3]均为Promise实例，如果不是就转换成Promise实例。")]),t._v(" "),a("li",[t._v("只有数组中所有实例状态都变为Fulfilled，总的实例p的状态才会变为Fulfilled；\n只要数组中有一个实例状态被Rejected，总的实例p的状态就变为Rejected。")])])]),t._v(" "),a("li",[a("p",[t._v("Promise.race()")]),t._v(" "),a("ul",[a("li",[t._v("与all()相对应的方法。Promise.race用于将多个Promise实例包装成一个新的实例。\n只要有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的实例返回值，就传递给p的回调函数。")])])]),t._v(" "),a("li",[a("p",[t._v("Promise.resolve()")]),t._v(" "),a("ul",[a("li",[t._v("将现有对象转换为Promise对象。如果Promise.resolve方法的参数不是具有then方法的对象，则返回一个新的Promise，其状态为Resolved。")])])]),t._v(" "),a("li",[a("p",[t._v("Promise.reject()")]),t._v(" "),a("ul",[a("li",[t._v("Promise.reject(reason)也会返回一个新的Promise实例，状态为Rejected。Promise.reject方法的参数reason会被传递给实例的回调函数。")])])])]),t._v(" "),a("h2",{attrs:{id:"实现-promise-finally"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现-promise-finally"}},[t._v("#")]),t._v(" 实现 Promise.finally")]),t._v(" "),a("blockquote",[a("p",[t._v("finally 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作，使用方法如下")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Promise\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("finally")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("finally不接收任何参数；finally本质上是then的特例。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("P")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("reason")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" reason"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"promise本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise本质"}},[t._v("#")]),t._v(" Promise本质")]),t._v(" "),a("ul",[a("li",[t._v("Promise的概念并不是ES6新出的，而是ES6统一了用法，写进了语言标准，原生提供了Promise对象。")]),t._v(" "),a("li",[t._v("Promise的写法只是回调函数的改进，使用then()之后，异步任务的两段执行看得更清楚，除此之外"),a("code",[t._v("并无新意")]),t._v("。撇开优点，Promise的最大问题就是代码冗余，原来的任务被Promise包装一下，不管什么操作，一眼看上去都是一堆then()，原本的语意变得很不清楚。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);